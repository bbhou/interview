import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,a as n,o as i}from"./app-d8EKP-K0.js";const p={};function r(l,s){return i(),e("div",null,s[0]||(s[0]=[n(`<h1 id="_24丨kafka-性能监控工具之队列级监控及常用计数器解析" tabindex="-1"><a class="header-anchor" href="#_24丨kafka-性能监控工具之队列级监控及常用计数器解析"><span>24丨Kafka：性能监控工具之队列级监控及常用计数器解析</span></a></h1><p><audio id="audio" title="24丨Kafka：性能监控工具之队列级监控及常用计数器解析" controls="" preload="none"><source id="mp3" src="https://static001.geekbang.org/resource/audio/a8/86/a8c27f0ac42253f1b1fbbedda3675b86.mp3"></audio></p><p>在我看来队列服务器是最简单的一种组件了。因为队列给我们下手的机会实在是并不多。我们只是用它，如果想改变它就只能去改代码，其他的都只是配置问题。</p><p>在当前的市场中，Kafka算是用得非常火的一个队列服务器了，所以今天，我选择它来做一些解读。</p><p>虽然我在前面一直在强调分析的思路，但在这一篇中，我打算换个思路，不是像以前那样，直接给你一个结论型的思维导图，而是一起来分析一个组件，让我们看看从哪里下手，来观察一个被分析对象的相关配置。</p><h2 id="了解kafka的基本知识" tabindex="-1"><a class="header-anchor" href="#了解kafka的基本知识"><span>了解Kafka的基本知识</span></a></h2><p>我们先看一下这张图，以便更好地了解一个队列服务器。</p><img src="https://static001.geekbang.org/resource/image/65/87/659043d7a680bd0cb5df070e0ecec687.jpg" alt=""><p>这是Kafka官网上的一个图。从这个图中可以看到，对Kafka来说，这就像一个典型的集线器。那它里面的结构是什么样子的呢？根据我的理解，我画了一个如下的示意图：</p><img src="https://static001.geekbang.org/resource/image/d5/30/d59231449717009067723332de568130.png" alt=""><p>在这个图中，有三个Broker，也就是三个集群节点。每个消息有一个leader partition，还有两个follower partition。我没有画更多的Producer和Consumer、Consumer Group，是觉得线太多了容易乱。</p><p>因为Producer和Consumer肯定会从leader partition中读写数据，而Kafka也保证了leader在不同broker上的均衡，所以Kafka的集群能力很好。</p><p>我们再看一下消息是如何在Kafka中被存储的。</p><img src="https://static001.geekbang.org/resource/image/20/72/2047c0b11c63407a8ebfb696398b0272.png" alt=""><p>上图是Kafka数据的存储方式，也就是每个分区都是一直往后面加的。</p><p>我们再来看一下它的数据存储方式。</p><p>首先是目录：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>drwxr-xr-x 2 root root 4096 Feb  7 23:39 test-0</span></span>
<span class="line"><span>drwxr-xr-x 2 root root 4096 Feb  7 01:34 test_perf-1</span></span>
<span class="line"><span>drwxr-xr-x 2 root root 4096 Feb  7 01:34 test_perf-4</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Kafka的目录是根据topic创建的，每个目录名中也包括一个partition。比如上面名字中的test_perf-1就是topic名是test_perf，partition就是1。</p><p>接着再来看下文件：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>[root@node-2 test-2]# ll</span></span>
<span class="line"><span>total 10850656</span></span>
<span class="line"><span>-rw-r--r-- 1 root root     493128 Feb  9 14:14 00000000000000000000.index</span></span>
<span class="line"><span>-rw-r--r-- 1 root root 1073739646 Feb  9 14:14 00000000000000000000.log</span></span>
<span class="line"><span>-rw-r--r-- 1 root root     630504 Feb  9 14:14 00000000000000000000.timeindex</span></span>
<span class="line"><span>-rw-r--r-- 1 root root     443520 Feb  9 14:16 00000000000000240212.index</span></span>
<span class="line"><span>-rw-r--r-- 1 root root 1073727327 Feb  9 14:16 00000000000000240212.log</span></span>
<span class="line"><span>-rw-r--r-- 1 root root     551052 Feb  9 14:16 00000000000000240212.timeindex</span></span>
<span class="line"><span>-rw-r--r-- 1 root root     448840 Feb  9 14:18 00000000000000453584.index</span></span>
<span class="line"><span>-rw-r--r-- 1 root root 1073729759 Feb  9 14:18 00000000000000453584.log</span></span>
<span class="line"><span>-rw-r--r-- 1 root root     556920 Feb  9 14:18 00000000000000453584.timeindex</span></span>
<span class="line"><span>.........................</span></span>
<span class="line"><span>-rw-r--r-- 1 root root         12 Feb  9 13:14 leader-epoch-checkpoint</span></span>
<span class="line"><span>[root@node-2 test-2]#</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有索引文件，有数据文件，也有时间索引文件，非常明显的三个后缀名。索引文件显然就是指向message在数据文件中的什么位置，而这些数据文件就是一个个的Segment，也就是一段一段的。这些文件的大小受server.properties文件中的log.segment.bytes参数限制，默认为1G。</p><p>要查到相应的message就要先查索引文件，找到message的位置；然后从log文件中找到具体的message。</p><p>在这个逻辑中，Segment的大小就很有讲究了，太细就会导致索引文件过大，查找索引费时间；太粗了就会导致查找得不够精准。那么该如何配置呢？也要通过性能测试才能知道。</p><p>有了这些信息之后，我们再看下Kafka高效的原因：</p><ol><li>Kafka直接使用Linux文件系统的Cache来高效缓存数据。</li><li>Kafka采用Linux Zero-Copy技术提高发送性能（不懂Linux Zero-copy的请自行补课）。</li><li>Kafka服务端采用的是selector多线程模式（从逻辑上理解，它和Tomcat的NIO类似，我就不单独画图了，以免占篇幅）。</li><li>Kafka采用二分法找数据。</li></ol><p>总体来说，就是一个Java的应用，直接使用文件系统和操作系统的特性实现了队列的高效应用场景。</p><h2 id="配置文件" tabindex="-1"><a class="header-anchor" href="#配置文件"><span>配置文件</span></a></h2><p>我们先来查看一下Kafka的配置文件中都有什么，为了简洁，在这里，我把一些注释以及和性能无关的配置删除了。当然如果你有兴趣的话，可以到Kafka的config目录中找到server.properties中，以查看这些内容。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>############################# Socket Server Settings #############################</span></span>
<span class="line"><span>num.network.threads=3</span></span>
<span class="line"><span>num.io.threads=8</span></span>
<span class="line"><span>socket.send.buffer.bytes=102400</span></span>
<span class="line"><span>socket.receive.buffer.bytes=102400</span></span>
<span class="line"><span>socket.request.max.bytes=104857600</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>############################# Log Basics #############################</span></span>
<span class="line"><span>num.partitions=10</span></span>
<span class="line"><span>num.recovery.threads.per.data.dir=1</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>############################# Internal Topic Settings  #############################</span></span>
<span class="line"><span>offsets.topic.replication.factor=1</span></span>
<span class="line"><span>transaction.state.log.replication.factor=1</span></span>
<span class="line"><span>transaction.state.log.min.isr=1</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>############################# Log Flush Policy #############################</span></span>
<span class="line"><span>log.flush.interval.messages=10000</span></span>
<span class="line"><span>log.flush.interval.ms=1000</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>############################# Log Retention Policy #############################</span></span>
<span class="line"><span>log.retention.check.interval.ms=300000</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>############################# Zookeeper #############################</span></span>
<span class="line"><span>zookeeper.connection.timeout.ms=6000</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>############################# Group Coordinator Settings #############################</span></span>
<span class="line"><span>group.initial.rebalance.delay</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其实配置文件并不多，对不对？从配置名称上也很容易知道它们和什么相关。这里比较重要的参数就是Socket Server相关的，以及和log相关的。</p><p>我觉得到了这里，这个逻辑就基本清楚了，对Kafka的性能优化也就有了大体的判断。</p><h2 id="构建kafka的性能优化思维导图" tabindex="-1"><a class="header-anchor" href="#构建kafka的性能优化思维导图"><span>构建Kafka的性能优化思维导图</span></a></h2><p>我们可以根据以上的知识画出如下所示的，Kafka的基本优化点：</p><img src="https://static001.geekbang.org/resource/image/b2/db/b2b0ad6f744035d26d5efab25d4ec9db.png" alt=""><p>同样的，我把操作系统和JDK方面的优化当成独立的部分，在上图中只把Kafka相关的内容列出来。</p><p>有了上面的知识，也有了这个思维逻辑，那么就可以理出针对一个Kafka应用要干的事情：</p><ol><li>先分析一下具体的应用场景，关键是topic、partition数量、message大小。</li><li>确定要支撑的业务容量和时间长度。</li><li>分析架构中需要的broker量级、partition、Segment等配置。这些配置应该是架构师给出的准确预估，如果不能给出，那只能靠我们，也就是做性能测试的人给出具体的结论了。</li></ol><h2 id="对组件的性能分析思路" tabindex="-1"><a class="header-anchor" href="#对组件的性能分析思路"><span>对组件的性能分析思路</span></a></h2><p>我想告诉你的是对一个组件的性能分析思路。如果你有了下面这张图所示的思路，那至少可以覆盖大部分的性能问题了。这个思路就是：</p><img src="https://static001.geekbang.org/resource/image/62/ab/625d1ec2717f84cb2dc9119d8c7e43ab.jpg" alt=""><p>对于Kafka这样的队列服务器来说，状态计数器是啥子呢？让我们看一下Kafka的一个Grafana Dashboard。</p><img src="https://static001.geekbang.org/resource/image/f0/d7/f0025246911a11e34d0608e607669ad7.png" alt=""><img src="https://static001.geekbang.org/resource/image/f9/1d/f9cefe3ff768fe06662a3ab26aca6c1d.png" alt=""><img src="https://static001.geekbang.org/resource/image/35/37/35319958007c7fbcb2332cc920af7837.png" alt=""><p>从这几个图就能看得出来，最重要的是每秒产生了多少message，以及消费时间间隔。这两个对我们来说是最重要的队列计数器了。</p><p>但是它们能不能告诉我们现在的队列服务器有没有瓶颈呢？显然是不能的。</p><p>对于队列来说，消息都是异步被消费者取走的。所以队列中要有保存消息的能力，但是保存多久呢？永远保存吗？显然不现实。但是如果保存得太短了，正常的业务都可能做不下去，所以，我们要制定策略，哪些topic是实时处理的，处理不完怎么办？内存多大，能保存多少消息，积压了怎么办？</p><p>所以对于队列服务器，只看上面的那几个计数器，我觉得过于片面。</p><p>我们前面提到的grafana+prometheus监控操作系统、MySQL的DashBoard都有非常完整的数据，但是Kafka的DashBoard显然信息不够，不能判断它自己有没有问题。</p><p>操作系统的监控指标对Kafka来说，也是异常的重要。就像之前我说过的那样，操作系统是不可绕过的分析节点。所以所有要做性能测试和性能分析的人，首先要学的就是操作系统方面的知识。</p><h2 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h2><p>下面我们来看一个简单测试示例。</p><h3 id="生产10w消息" tabindex="-1"><a class="header-anchor" href="#生产10w消息"><span>生产10W消息</span></a></h3><p>在这个示例中，共生产10W的消息，每个消息大小是2000字节，每秒产生5000个消息。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>[root@node-1 Kafka_2.13-2.4.0]# /home/zee/Kafka/Kafka_2.13-2.4.0/bin/Kafka-producer-perf-test.sh --topic test --num-records 100000 --record-size 2000 --throughput 5000 --producer-props bootstrap.servers=172.18.0.2:9092,172.19.0.14:9092,172.20.0.7:9092</span></span>
<span class="line"><span>24997 records sent, 4999.4 records/sec (9.54 MB/sec), 15.8 ms avg latency, 398.0 ms max latency.</span></span>
<span class="line"><span>25010 records sent, 5001.0 records/sec (9.54 MB/sec), 26.0 ms avg latency, 514.0 ms max latency.</span></span>
<span class="line"><span>25000 records sent, 5000.0 records/sec (9.54 MB/sec), 1.1 ms avg latency, 24.0 ms max latency.</span></span>
<span class="line"><span>100000 records sent, 4998.000800 records/sec (9.53 MB/sec), 11.03 ms avg latency, 514.00 ms max latency, 1 ms 50th, 52 ms 95th, 305 ms 99th, 501 ms 99.9th.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到每秒有9.53MB的消息产生，平均响应时延是11.03ms，最大时延是514ms。</p><h3 id="生产100w消息" tabindex="-1"><a class="header-anchor" href="#生产100w消息"><span>生产100W消息</span></a></h3><p>在这个示例中，共生产100W的消息，每个消息大小是2000字节，每秒产生5000个消息。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>[root@node-4 bin]# /home/zee/Kafka/Kafka_2.13-2.4.0/bin/Kafka-producer-perf-test.sh --topic test_perf --num-records 1000000 --record-size 2000 --throughput 5000 --producer-props bootstrap.servers=172.17.0.11:9092,172.19.0.14:9092,172.20.0.7:9092</span></span>
<span class="line"><span>24992 records sent, 4996.4 records/sec (9.53 MB/sec), 21.7 ms avg latency, 482.0 ms max latency.</span></span>
<span class="line"><span>25025 records sent, 5004.0 records/sec (9.54 MB/sec), 0.9 ms avg latency, 16.0 ms max latency.</span></span>
<span class="line"><span>........</span></span>
<span class="line"><span>25000 records sent, 5000.0 records/sec (9.54 MB/sec), 0.6 ms avg latency, 9.0 ms max latency.</span></span>
<span class="line"><span>25005 records sent, 5001.0 records/sec (9.54 MB/sec), 0.7 ms avg latency, 30.0 ms max latency.</span></span>
<span class="line"><span>1000000 records sent, 4999.625028 records/sec (9.54 MB/sec), 2.05 ms avg latency, 482.00 ms max latency, 1 ms 50th, 1 ms 95th, 16 ms 99th, 267 ms 99.9th.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到每秒有9.54MB的消息产生，平均响应时延是2.05ms，最大时延是482ms。</p><h3 id="生产1000w消息" tabindex="-1"><a class="header-anchor" href="#生产1000w消息"><span>生产1000W消息</span></a></h3><p>在这个示例中，生产1000W消息，其他参数不变：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>[root@node-4 bin]# /home/zee/Kafka/Kafka_2.13-2.4.0/bin/Kafka-producer-perf-test.sh --topic test_perf --num-records 10000000 --record-size 2000 --throughput 5000 --producer-props bootstrap.servers=172.17.0.11:9092,172.19.0.14:9092,172.20.0.7:9092</span></span>
<span class="line"><span>24992 records sent, 4998.4 records/sec (9.53 MB/sec), 22.7 ms avg latency, 480.0 ms max latency.</span></span>
<span class="line"><span>25015 records sent, 5002.0 records/sec (9.54 MB/sec), 0.8 ms avg latency, 13.0 ms max latency.</span></span>
<span class="line"><span>25005 records sent, 5000.0 records/sec (9.54 MB/sec), 0.7 ms avg latency, 21.0 ms max latency.</span></span>
<span class="line"><span>..........</span></span>
<span class="line"><span>25000 records sent, 5000.0 records/sec (9.54 MB/sec), 0.7 ms avg latency, 26.0 ms max latency.</span></span>
<span class="line"><span>25010 records sent, 5001.0 records/sec (9.54 MB/sec), 0.7 ms avg latency, 24.0 ms max latency.</span></span>
<span class="line"><span>10000000 records sent, 4999.900002 records/sec (9.54 MB/sec), 0.83 ms avg latency, 532.00 ms max latency, 1 ms 50th, 1 ms 95th, 4 ms 99th, 65 ms 99.9th.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从结果可以看到，每秒还是9.54MB大小的消息，平均时延0.83ms，最大时延是532ms。</p><p>来做一个图比对一下：</p><img src="https://static001.geekbang.org/resource/image/e4/8f/e4f416d4dc41898ad5dd264d9e022f8f.jpg" alt=""><p>从这个图就明显看出生产的消息越少，平均响应时间越长。可见顺序写得越多，那每次写的平均时间就会越小，所以Kafka在大数据量的读写中会表现得非常好。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>严格来说，这一篇文章是为了告诉你一个逻辑，那就是对一个组件不了解的时候，如何用你的基础技术知识把对组件的性能优化方向整理出来，以及如何通过自己的基础知识来做一个非常合理的分析。</p><p>这个逻辑就是：</p><ol><li>先了解这个组件的基本知识：包括架构、实现原理等信息。</li><li>再整理出这个组件的配置参数。</li><li>找到合适的全局监控工具。</li><li>做压力测试时给出明显的判断。</li></ol><p>这是个大体的逻辑，当然这个逻辑还有一个前提，那就是你得有相应的基础知识，在Kafka的这个分析中，要有操作系统和Java的基础知识，在实操中还需要多找几个不懂的组件做些练习才能理解这个逻辑的真谛。</p><p>就我自己来说，我会找一个完全没有接触过的组件，从安装部署开始直到性能测试、瓶颈判断、优化分析，看看需要多长时间，我才能理解得了这个组件。</p><p>这种思维方式，给了我很多的安全感，就是遇到了没接触过的内容，也不至心慌气短。</p><h2 id="思考题" tabindex="-1"><a class="header-anchor" href="#思考题"><span>思考题</span></a></h2><p>最后给你留两道思考题吧，你觉得如何分析一个未知组件呢？Kafka的分析逻辑又是什么？</p><p>欢迎你用自己的理解思考一下这两个问题，也欢迎把这篇文章分享给你的朋友或者同事，一起交流一下。</p>`,78)]))}const d=a(p,[["render",r]]),o=JSON.parse('{"path":"/posts/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%AE%9E%E6%88%9830%E8%AE%B2/%E7%AC%AC%E4%B8%89%E6%A8%A1%E5%9D%97%EF%BC%9A%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7%E7%AF%87/24%E4%B8%A8Kafka%EF%BC%9A%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7%E5%B7%A5%E5%85%B7%E4%B9%8B%E9%98%9F%E5%88%97%E7%BA%A7%E7%9B%91%E6%8E%A7%E5%8F%8A%E5%B8%B8%E7%94%A8%E8%AE%A1%E6%95%B0%E5%99%A8%E8%A7%A3%E6%9E%90.html","title":"24丨Kafka：性能监控工具之队列级监控及常用计数器解析","lang":"zh-CN","frontmatter":{"description":"24丨Kafka：性能监控工具之队列级监控及常用计数器解析 在我看来队列服务器是最简单的一种组件了。因为队列给我们下手的机会实在是并不多。我们只是用它，如果想改变它就只能去改代码，其他的都只是配置问题。 在当前的市场中，Kafka算是用得非常火的一个队列服务器了，所以今天，我选择它来做一些解读。 虽然我在前面一直在强调分析的思路，但在这一篇中，我打算换...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/interview/posts/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%AE%9E%E6%88%9830%E8%AE%B2/%E7%AC%AC%E4%B8%89%E6%A8%A1%E5%9D%97%EF%BC%9A%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7%E7%AF%87/24%E4%B8%A8Kafka%EF%BC%9A%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7%E5%B7%A5%E5%85%B7%E4%B9%8B%E9%98%9F%E5%88%97%E7%BA%A7%E7%9B%91%E6%8E%A7%E5%8F%8A%E5%B8%B8%E7%94%A8%E8%AE%A1%E6%95%B0%E5%99%A8%E8%A7%A3%E6%9E%90.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"24丨Kafka：性能监控工具之队列级监控及常用计数器解析"}],["meta",{"property":"og:description","content":"24丨Kafka：性能监控工具之队列级监控及常用计数器解析 在我看来队列服务器是最简单的一种组件了。因为队列给我们下手的机会实在是并不多。我们只是用它，如果想改变它就只能去改代码，其他的都只是配置问题。 在当前的市场中，Kafka算是用得非常火的一个队列服务器了，所以今天，我选择它来做一些解读。 虽然我在前面一直在强调分析的思路，但在这一篇中，我打算换..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-16T11:19:38.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-16T11:19:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"24丨Kafka：性能监控工具之队列级监控及常用计数器解析\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-08-16T11:19:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755343178000,"updatedTime":1755343178000,"contributors":[{"name":"bbhou","username":"bbhou","email":"1557740299@qq.com","commits":1,"url":"https://github.com/bbhou"}]},"readingTime":{"minutes":10.1,"words":3031},"filePathRelative":"posts/性能测试实战30讲/第三模块：性能监控分析工具篇/24丨Kafka：性能监控工具之队列级监控及常用计数器解析.md","localizedDate":"2025年8月16日","excerpt":"\\n<p><audio id=\\"audio\\" title=\\"24丨Kafka：性能监控工具之队列级监控及常用计数器解析\\" controls=\\"\\" preload=\\"none\\"><source id=\\"mp3\\" src=\\"https://static001.geekbang.org/resource/audio/a8/86/a8c27f0ac42253f1b1fbbedda3675b86.mp3\\"></audio></p>\\n<p>在我看来队列服务器是最简单的一种组件了。因为队列给我们下手的机会实在是并不多。我们只是用它，如果想改变它就只能去改代码，其他的都只是配置问题。</p>\\n<p>在当前的市场中，Kafka算是用得非常火的一个队列服务器了，所以今天，我选择它来做一些解读。</p>","autoDesc":true}');export{d as comp,o as data};
