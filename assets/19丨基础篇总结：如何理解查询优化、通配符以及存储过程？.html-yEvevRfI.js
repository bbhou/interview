import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,a as n,o as i}from"./app-d8EKP-K0.js";const d={};function p(c,e){return i(),s("div",null,e[0]||(e[0]=[n(`<h1 id="_19丨基础篇总结-如何理解查询优化、通配符以及存储过程" tabindex="-1"><a class="header-anchor" href="#_19丨基础篇总结-如何理解查询优化、通配符以及存储过程"><span>19丨基础篇总结：如何理解查询优化、通配符以及存储过程？</span></a></h1><p><audio id="audio" title="19丨基础篇总结：如何理解查询优化、通配符以及存储过程？" controls="" preload="none"><source id="mp3" src="https://static001.geekbang.org/resource/audio/92/2e/921c35d2baa0e77404aa5537e2e22a2e.mp3"></audio></p><p>到这一篇的时候，意味着SQL专栏的基础部分正式更新完毕。在文章更新的时候，谢谢大家积极地评论和提问，让专栏增色不少。我总结了一些基础篇的常见问题，希望能对你有所帮助。答疑篇主要包括了DBMS、查询优化、存储过程、事务处理等一些问题。</p><h2 id="关于各种dbms的介绍" tabindex="-1"><a class="header-anchor" href="#关于各种dbms的介绍"><span>关于各种DBMS的介绍</span></a></h2><h3 id="答疑1" tabindex="-1"><a class="header-anchor" href="#答疑1"><span>答疑1</span></a></h3><p>文章中有句话不太理解，“列式数据库是将数据按照列存储到数据库中，这样做的好处是可以大量降低系统的 I/O”，可以解释一些“降低系统I/O”是什么意思吗？</p><h3 id="解答" tabindex="-1"><a class="header-anchor" href="#解答"><span>解答</span></a></h3><p>行式存储是把一行的数据都串起来进行存储，然后再存储下一行。同样，列式存储是把一列的数据都串起来进行存储，然后再存储下一列。这样做的话，相邻数据的数据类型都是一样的，更容易压缩，压缩之后就自然降低了I/O。</p><p>我们还需要从数据处理的需求出发，去理解行式存储和列式存储。数据处理可以分为OLTP（联机事务处理）和OLAP（联机分析处理）两大类。</p><p>OLTP一般用于处理客户的事务和进行查询，需要随时对数据表中的记录进行增删改查，对实时性要求高。</p><p>OLAP一般用于市场的数据分析，通常数据量大，需要进行复杂的分析操作，可以对大量历史数据进行汇总和分析，对实时性要求不高。</p><p>那么对于OLTP来说，由于随时需要对数据记录进行增删改查，更适合采用行式存储，因为一行数据的写入会同时修改多个列。传统的RDBMS都属于行式存储，比如Oracle、SQL Server和MySQL等。</p><p>对于OLAP来说，由于需要对大量历史数据进行汇总和分析，则适合采用列式存储，这样的话汇总数据会非常快，但是对于插入（INSERT）和更新（UPDATE）会比较麻烦，相比于行式存储性能会差不少。</p><p>所以说列式存储适合大批量数据查询，可以降低I/O，但如果对实时性要求高，则更适合行式存储。</p><h2 id="关于查询优化" tabindex="-1"><a class="header-anchor" href="#关于查询优化"><span>关于查询优化</span></a></h2><h3 id="答疑1-1" tabindex="-1"><a class="header-anchor" href="#答疑1-1"><span>答疑1</span></a></h3><p>在MySQL中统计数据表的行数，可以使用三种方式：<code>SELECT COUNT(*)</code>、<code>SELECT COUNT(1)</code>和<code>SELECT COUNT(具体字段)</code>，使用这三者之间的查询效率是怎样的？之前看到说是：<code>SELECT COUNT(*)</code>＞ <code>SELECT COUNT(1)</code>＞ <code>SELECT COUNT(具体字段)</code>。</p><h3 id="解答-1" tabindex="-1"><a class="header-anchor" href="#解答-1"><span>解答</span></a></h3><p>在MySQL InnoDB存储引擎中，<code>COUNT(*)</code>和<code>COUNT(1)</code>都是对所有结果进行<code>COUNT</code>。如果有WHERE子句，则是对所有符合筛选条件的数据行进行统计；如果没有WHERE子句，则是对数据表的数据行数进行统计。</p><p>因此<code>COUNT(*)</code>和<code>COUNT(1)</code>本质上并没有区别，执行的复杂度都是<code>O(N)</code>，也就是采用全表扫描，进行循环+计数的方式进行统计。</p><p>如果是MySQL MyISAM存储引擎，统计数据表的行数只需要<code>O(1)</code>的复杂度，这是因为每张MyISAM的数据表都有一个meta信息存储了<code>row_count</code>值，而一致性则由表级锁来保证。因为InnoDB支持事务，采用行级锁和MVCC机制，所以无法像MyISAM一样，只维护一个<code>row_count</code>变量，因此需要采用扫描全表，进行循环+计数的方式来完成统计。</p><p>需要注意的是，在实际执行中，<code>COUNT(*)</code>和<code>COUNT(1)</code>的执行时间可能略有差别，不过你还是可以把它俩的执行效率看成是相等的。</p><p>另外在InnoDB引擎中，如果采用<code>COUNT(*)</code>和<code>COUNT(1)</code>来统计数据行数，要尽量采用二级索引。因为主键采用的索引是聚簇索引，聚簇索引包含的信息多，明显会大于二级索引（非聚簇索引）。对于<code>COUNT(*)</code>和<code>COUNT(1)</code>来说，它们不需要查找具体的行，只是统计行数，系统会自动采用占用空间更小的二级索引来进行统计。</p><p>然而如果想要查找具体的行，那么采用主键索引的效率更高。如果有多个二级索引，会使用key_len小的二级索引进行扫描。当没有二级索引的时候，才会采用主键索引来进行统计。</p><p>这里我总结一下：</p><ol><li>一般情况下，三者执行的效率为 <code>COUNT(*)</code>= <code>COUNT(1)</code>&gt; <code>COUNT(字段)</code>。我们尽量使用<code>COUNT(*)</code>，当然如果你要统计的是某个字段的非空数据行数，则另当别论，毕竟比较执行效率的前提是结果一样才可以。</li><li>如果要统计<code>COUNT(*)</code>，尽量在数据表上建立二级索引，系统会自动采用<code>key_len</code>小的二级索引进行扫描，这样当我们使用<code>SELECT COUNT(*)</code>的时候效率就会提升，有时候可以提升几倍甚至更高。</li></ol><h3 id="答疑2" tabindex="-1"><a class="header-anchor" href="#答疑2"><span>答疑2</span></a></h3><p>在MySQL中，<code>LIMIT</code>关键词是最后执行的，如果可以确定只有一条结果，那么就起不到查询优化的效果了吧，因为<code>LIMIT</code>是对最后的结果集过滤，如果结果集本来就只有一条，那就没有什么用了。</p><h3 id="解答-2" tabindex="-1"><a class="header-anchor" href="#解答-2"><span>解答</span></a></h3><p>如果你可以确定结果集只有一条，那么加上<code>LIMIT 1</code>的时候，当找到一条结果的时候就不会继续扫描了，这样会加快查询速度。这里指的查询优化针对的是会扫描全表的SQL语句，如果数据表已经对字段建立了唯一索引，那么可以通过索引进行查询，不会全表扫描的话，就不需要加上<code>LIMIT 1</code>了。</p><h2 id="关于通配符的解释" tabindex="-1"><a class="header-anchor" href="#关于通配符的解释"><span>关于通配符的解释</span></a></h2><p>关于查询语句中通配符的使用理解，我举了一个查询英雄名除了第一个字以外，包含“太”字的英雄都有谁的例子，使用的SQL语句是：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>SQL&amp;gt; SELECT name FROM heros WHERE name LIKE &#39;_%太%&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>（_）匹配任意一个字符，（%） 匹配大于等于0个任意字符。</p><p>所以通配符<code>&#39;_%太%&#39;</code>说明在第一个字符之后需要有“太”字，这里就不能匹配上“太乙真人”，但是可以匹配上“东皇太一”。如果数据表中有“太乙真人太太”，那么结果集中也可以匹配到。</p><p>另外，单独的<code>LIKE &#39;%&#39;</code>无法查出NULL值，比如：<code>SELECT * FROM heros WHERE role_assist LIKE &#39;%&#39;</code>。</p><h3 id="答疑4" tabindex="-1"><a class="header-anchor" href="#答疑4"><span>答疑4</span></a></h3><p>可以理解在WHERE条件字段上加索引，但是为什么在ORDER BY字段上还要加索引呢？这个时候已经通过WHERE条件过滤得到了数据，已经不需要再筛选过滤数据了，只需要根据字段排序就好了。</p><h3 id="解答-3" tabindex="-1"><a class="header-anchor" href="#解答-3"><span>解答</span></a></h3><p>在MySQL中，支持两种排序方式，分别是FileSort和Index排序。在Index排序中，索引可以保证数据的有序性，不需要再进行排序，效率更高。而FileSort排序则一般在内存中进行排序，占用CPU较多。如果待排结果较大，会产生临时文件I/O到磁盘进行排序的情况，效率较低。</p><p>所以使用ORDER BY子句时，应该尽量使用Index排序，避免使用FileSort排序。当然你可以使用explain来查看执行计划，看下优化器是否采用索引进行排序。</p><p>优化建议：</p><ol><li>SQL中，可以在WHERE子句和ORDER BY子句中使用索引，目的是在WHERE子句中避免全表扫描，在ORDER BY子句避免使用FileSort排序。当然，某些情况下全表扫描，或者FileSort排序不一定比索引慢。但总的来说，我们还是要避免，以提高查询效率。一般情况下，优化器会帮我们进行更好的选择，当然我们也需要建立合理的索引。</li><li>尽量使用Index完成ORDER BY排序。如果WHERE和ORDER BY后面是相同的列就使用单索引列；如果不同就使用联合索引。</li><li>无法使用Index时，需要对FileSort方式进行调优。</li></ol><h3 id="答疑5" tabindex="-1"><a class="header-anchor" href="#答疑5"><span>答疑5</span></a></h3><p>ORDER BY是对分的组排序还是对分组中的记录排序呢？</p><h3 id="解答-4" tabindex="-1"><a class="header-anchor" href="#解答-4"><span>解答</span></a></h3><p>ORDER BY就是对记录进行排序。如果你在ORDER BY前面用到了GROUP BY，实际上这是一种分组的聚合方式，已经把一组的数据聚合成为了一条记录，再进行排序的时候，相当于对分的组进行了排序。</p><h3 id="答疑6" tabindex="-1"><a class="header-anchor" href="#答疑6"><span>答疑6</span></a></h3><p>请问下关于SELECT语句内部的执行步骤。</p><h3 id="解答-5" tabindex="-1"><a class="header-anchor" href="#解答-5"><span>解答</span></a></h3><p>一条完整的SELECT语句内部的执行顺序是这样的：</p><ol><li>FROM子句组装数据（包括通过ON进行连接）；</li><li>WHERE子句进行条件筛选；</li><li>GROUP BY分组 ；</li><li>使用聚集函数进行计算；</li><li>HAVING筛选分组；</li><li>计算所有的表达式；</li><li>SELECT 的字段；</li><li>ORDER BY排序；</li><li>LIMIT筛选。</li></ol><h3 id="答疑7" tabindex="-1"><a class="header-anchor" href="#答疑7"><span>答疑7</span></a></h3><p>不太理解哪种情况下应该使用EXISTS，哪种情况应该用IN。选择的标准是看能否使用表的索引吗？</p><h3 id="解答-6" tabindex="-1"><a class="header-anchor" href="#解答-6"><span>解答</span></a></h3><p>索引是个前提，其实选择与否还是要看表的大小。你可以将选择的标准理解为小表驱动大表。在这种方式下效率是最高的。</p><p>比如下面这样：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span> SELECT * FROM A WHERE cc IN (SELECT cc FROM B)</span></span>
<span class="line"><span> SELECT * FROM A WHERE EXISTS (SELECT cc FROM B WHERE B.cc=A.cc)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>当A小于B时，用EXISTS。因为EXISTS的实现，相当于外表循环，实现的逻辑类似于：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span> for i in A</span></span>
<span class="line"><span>     for j in B</span></span>
<span class="line"><span>         if j.cc == i.cc then ...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当B小于A时用IN，因为实现的逻辑类似于：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span> for i in B</span></span>
<span class="line"><span>     for j in A</span></span>
<span class="line"><span>         if j.cc == i.cc then ...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>哪个表小就用哪个表来驱动，A表小就用EXISTS，B表小就用IN。</p><h2 id="关于存储过程" tabindex="-1"><a class="header-anchor" href="#关于存储过程"><span>关于存储过程</span></a></h2><h3 id="答疑1-2" tabindex="-1"><a class="header-anchor" href="#答疑1-2"><span>答疑1</span></a></h3><p>在使用存储过程声明变量时，都支持哪些数据类型呢？</p><h3 id="解答-7" tabindex="-1"><a class="header-anchor" href="#解答-7"><span>解答</span></a></h3><p>不同的DBMS对数据类型的定义不同，你需要查询相关的DBMS文档。以MySQL为例，常见的数据类型可以分成三类，分别是数值类型、字符串类型和日期／时间类型。</p><h3 id="答疑2-1" tabindex="-1"><a class="header-anchor" href="#答疑2-1"><span>答疑2</span></a></h3><p>“IN参数必须在调用存储过程时指定”的含义是什么？我查询了MySQL的存储过程定义，可以不包含 IN 参数。当存储过程的定义语句里有 IN 参数时，存储过程的语句中必须用到这个参数吗?</p><h3 id="解答-8" tabindex="-1"><a class="header-anchor" href="#解答-8"><span>解答</span></a></h3><p>如果存储过程定义了IN参数，就需要在调用的时候传入。当然在定义存储过程的时候，如果不指定参数类型，就默认是IN类型的参数。因为IN参数在存储过程中是默认值，可以省略不写。比如下面两种定义方式都是一样的：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>CREATE PROCEDURE \`add_num\`(IN n INT)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>CREATE PROCEDURE \`add_num\`(n INT)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在存储过程中的语句里，不一定要用到IN参数，只是在调用的时候需要传入这个。另外IN参数在存储过程中进行了修改，也不会进行返回的。如果想要返回参数，需要使用OUT，或者INOUT参数类型。</p><h2 id="关于事务处理" tabindex="-1"><a class="header-anchor" href="#关于事务处理"><span>关于事务处理</span></a></h2><h3 id="答疑1-3" tabindex="-1"><a class="header-anchor" href="#答疑1-3"><span>答疑1</span></a></h3><p>如果<code>INSERT INTO test SELECT &#39;关羽&#39;;</code>之后没有执行COMMIT，结果应该是空。但是我执行出来的结果是<code>&#39;关羽&#39;</code>，为什么ROLLBACK没有全部回滚？</p><p>代码如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span> CREATE TABLE test(name varchar(255), PRIMARY KEY (name)) ENGINE=InnoDB;</span></span>
<span class="line"><span> BEGIN;</span></span>
<span class="line"><span> INSERT INTO test SELECT &#39;关羽&#39;;</span></span>
<span class="line"><span> BEGIN;</span></span>
<span class="line"><span> INSERT INTO test SELECT &#39;张飞&#39;;</span></span>
<span class="line"><span> INSERT INTO test SELECT &#39;张飞&#39;;</span></span>
<span class="line"><span> ROLLBACK;</span></span>
<span class="line"><span> SELECT * FROM test;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="解答-9" tabindex="-1"><a class="header-anchor" href="#解答-9"><span>解答</span></a></h3><p>先解释下连续BEGIN的情况。</p><p>在MySQL中BEGIN用于开启事务，如果是连续BEGIN，当开启了第一个事务，还没有进行COMMIT提交时，会直接进行第二个事务的BEGIN，这时数据库会隐式地COMMIT第一个事务，然后再进入到第二个事务。</p><p>为什么ROLLBACK没有全部回滚呢？</p><p>因为ROLLBACK是针对当前事务的，在BEGIN之后已经开启了第二个事务，当遇到ROLLBACK的时候，第二个事务都进行了回滚，也就得到了第一个事务执行之后的结果即“关羽”。</p><p>关于事务的ACID，以及我们使用COMMIT和ROLLBACK来控制事务的时候，有一个容易出错的地方。</p><p>在一个事务的执行过程中可能会失败。遇到失败的时候是进行回滚，还是将事务执行过程中已经成功操作的来进行提交，这个逻辑是需要开发者自己来控制的。</p><p>这里开发者可以决定，如果遇到了小错误是直接忽略，提交事务，还是遇到任何错误都进行回滚。如果我们强行进行COMMIT，数据库会将这个事务中成功的操作进行提交，它会认为你觉得已经是ACID了（就是你认为可以做COMMIT了，即使遇到了一些小问题也是可以忽略的）。</p><p>我在今天的文章里重点解答了一些问题，还有一些未解答的会留在评论里进行回复。最后出一道思考题吧。</p><p>请你自己写出下面操作的运行结果（你可以把它作为一道笔试题，自己写出结果，再与实际的运行结果进行比对）：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>DROP TABLE IF EXISTS test;</span></span>
<span class="line"><span>CREATE TABLE test(name varchar(255), PRIMARY KEY (name)) ENGINE=InnoDB;</span></span>
<span class="line"><span>BEGIN;</span></span>
<span class="line"><span>INSERT INTO test SELECT &#39;关羽&#39;;</span></span>
<span class="line"><span>BEGIN;</span></span>
<span class="line"><span>INSERT INTO test SELECT &#39;张飞&#39;;</span></span>
<span class="line"><span>INSERT INTO test SELECT &#39;张飞&#39;;</span></span>
<span class="line"><span>COMMIT;</span></span>
<span class="line"><span>SELECT * FROM test;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>欢迎你在评论区写下你的思考，我会与你一起交流，也欢迎把这篇文章分享给你的朋友或者同事，一起交流一下。</p>`,92)]))}const t=a(d,[["render",p]]),o=JSON.parse('{"path":"/posts/SQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9ASQL%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E7%AF%87/19%E4%B8%A8%E5%9F%BA%E7%A1%80%E7%AF%87%E6%80%BB%E7%BB%93%EF%BC%9A%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96%E3%80%81%E9%80%9A%E9%85%8D%E7%AC%A6%E4%BB%A5%E5%8F%8A%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%EF%BC%9F.html","title":"19丨基础篇总结：如何理解查询优化、通配符以及存储过程？","lang":"zh-CN","frontmatter":{"description":"19丨基础篇总结：如何理解查询优化、通配符以及存储过程？ 到这一篇的时候，意味着SQL专栏的基础部分正式更新完毕。在文章更新的时候，谢谢大家积极地评论和提问，让专栏增色不少。我总结了一些基础篇的常见问题，希望能对你有所帮助。答疑篇主要包括了DBMS、查询优化、存储过程、事务处理等一些问题。 关于各种DBMS的介绍 答疑1 文章中有句话不太理解，“列式数...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/interview/posts/SQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9ASQL%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80%E7%AF%87/19%E4%B8%A8%E5%9F%BA%E7%A1%80%E7%AF%87%E6%80%BB%E7%BB%93%EF%BC%9A%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96%E3%80%81%E9%80%9A%E9%85%8D%E7%AC%A6%E4%BB%A5%E5%8F%8A%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%EF%BC%9F.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"19丨基础篇总结：如何理解查询优化、通配符以及存储过程？"}],["meta",{"property":"og:description","content":"19丨基础篇总结：如何理解查询优化、通配符以及存储过程？ 到这一篇的时候，意味着SQL专栏的基础部分正式更新完毕。在文章更新的时候，谢谢大家积极地评论和提问，让专栏增色不少。我总结了一些基础篇的常见问题，希望能对你有所帮助。答疑篇主要包括了DBMS、查询优化、存储过程、事务处理等一些问题。 关于各种DBMS的介绍 答疑1 文章中有句话不太理解，“列式数..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-16T11:19:38.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-16T11:19:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"19丨基础篇总结：如何理解查询优化、通配符以及存储过程？\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-08-16T11:19:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755343178000,"updatedTime":1755343178000,"contributors":[{"name":"bbhou","username":"bbhou","email":"1557740299@qq.com","commits":1,"url":"https://github.com/bbhou"}]},"readingTime":{"minutes":11.85,"words":3556},"filePathRelative":"posts/SQL必知必会/第一章：SQL语法基础篇/19丨基础篇总结：如何理解查询优化、通配符以及存储过程？.md","localizedDate":"2025年8月16日","excerpt":"\\n<p><audio id=\\"audio\\" title=\\"19丨基础篇总结：如何理解查询优化、通配符以及存储过程？\\" controls=\\"\\" preload=\\"none\\"><source id=\\"mp3\\" src=\\"https://static001.geekbang.org/resource/audio/92/2e/921c35d2baa0e77404aa5537e2e22a2e.mp3\\"></audio></p>\\n<p>到这一篇的时候，意味着SQL专栏的基础部分正式更新完毕。在文章更新的时候，谢谢大家积极地评论和提问，让专栏增色不少。我总结了一些基础篇的常见问题，希望能对你有所帮助。答疑篇主要包括了DBMS、查询优化、存储过程、事务处理等一些问题。</p>","autoDesc":true}');export{t as comp,o as data};
