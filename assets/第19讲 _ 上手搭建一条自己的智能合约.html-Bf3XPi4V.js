import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,a as n,o as i}from"./app-d8EKP-K0.js";const t={};function p(r,e){return i(),s("div",null,e[0]||(e[0]=[n(`<h1 id="第19讲-上手搭建一条自己的智能合约" tabindex="-1"><a class="header-anchor" href="#第19讲-上手搭建一条自己的智能合约"><span>第19讲 _ 上手搭建一条自己的智能合约</span></a></h1><p><audio id="audio" title="第19讲 | 上手搭建一条自己的智能合约" controls="" preload="none"><source id="mp3" src="https://static001.geekbang.org/resource/audio/a6/c2/a643b9d098e33bd4eecabc4cc2a07dc2.mp3"></audio></p><p>上一篇我们聊到了区块链智能合约，我主要介绍了智能合约的概念，但是并没有给你提供智能合约的实际运行案例，那么今天，我们就自己动手写一个智能合约，并且介绍一下智能合约标准模板，供你参考学习， 并搭建起自己的智能合约。</p><p>本篇将以以太坊作为基础知识进行讲解，本篇面向没有任何智能合约基础的人群，所以配备了较多的插图和操作命令，如果你正在收听音频，可以点击文稿查看，希望读完这篇文章可以帮助你快速入门智能合约。</p><h2 id="搭建一条智能合约" tabindex="-1"><a class="header-anchor" href="#搭建一条智能合约"><span>搭建一条智能合约</span></a></h2><p>在实际\b操作智能合约之前，我们首先回顾一下以太坊，以太坊又称以太坊钱包。以太坊钱包提供了包括账户管理，以太坊转账、Dapp部署与使用在内的一些常规功能。</p><p>以太坊社区提供了多种语言实现的客户端和开发库，多数客户端支持JSON-RPC2.0标准，目前支持的客户版本有Go-ethereum（Go语言）、Parity（Rust语言）、Cpp-ethereum（C++语言）、Ethereum-lib（Javascript)、EthererumJ(Java语言)、Pyethapp（Python语言)，基本涵盖了主流编程语言。</p><img src="https://static001.geekbang.org/resource/image/36/d6/36bcf515221b62694653e8b7aa6019d6.png" alt=""><p>图片来自以太坊官方文档</p><p>官方推荐使用的版本是Go-ethererum，这是Go语言实现的版本，又称Geth客户端。</p><p>需要提醒你的是，这里客户端的实现语言并不是要求用户熟悉相应的编程语言，这里的用户是指Dapp开发者，比如在操作Geth客户端的时候，\b用户其实并不需要了解Go语言。</p><h3 id="_1-下载与安装geth" tabindex="-1"><a class="header-anchor" href="#_1-下载与安装geth"><span>1.下载与安装Geth</span></a></h3><p>本文使用Geth来进行测试，首先我们要获取Geth客户端，如果用户使用的是Ubuntu环境的话，可以直接从PPA安装。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span> # apt-get install software-properties-common</span></span>
<span class="line"><span> # add-apt-repository -y ppa:ethereum/ethereum</span></span>
<span class="line"><span> # apt-get update</span></span>
<span class="line"><span> # apt-get install ethereum</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>安装成功后，我们可以查看Geth的版本。</p><img src="https://static001.geekbang.org/resource/image/0b/5d/0bc6084a9514588107557646ea7a945d.png" alt=""><p>表示我们已经安装成功，当然你可以也可以编译安装，由于篇幅有限，你可以另寻资料进行尝试。</p><h3 id="_2-搭建以太坊私链" tabindex="-1"><a class="header-anchor" href="#_2-搭建以太坊私链"><span>2.搭建以太坊私链</span></a></h3><p>如果在以太坊的主网上运行和开发测试智能合约，这是不明智的，因为会消耗真实的以太币，不过我们可以使用Geth搭建一条属于自己的以太坊区块链，也就是以太坊私链。</p><p>怎么搭建呢？其实很简单，只需要修改配置文件和一些运行参数即可。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>   {</span></span>
<span class="line"><span>&amp;quot;config&amp;quot;: {</span></span>
<span class="line"><span>    &amp;quot;chainId&amp;quot;: 98,</span></span>
<span class="line"><span>    &amp;quot;homesteadBlock&amp;quot;: 0,</span></span>
<span class="line"><span>    &amp;quot;eip155Block&amp;quot;: 0,</span></span>
<span class="line"><span>    &amp;quot;eip158Block&amp;quot;: 0</span></span>
<span class="line"><span>},</span></span>
<span class="line"><span>&amp;quot;difficulty&amp;quot;: &amp;quot;200000000&amp;quot;,</span></span>
<span class="line"><span>&amp;quot;gasLimit&amp;quot;: &amp;quot;2100000&amp;quot;,</span></span>
<span class="line"><span>&amp;quot;alloc&amp;quot;: {</span></span>
<span class="line"><span>    &amp;quot;7df9a875a174b3bc565e6424a0050ebc1b2d1d82&amp;quot;: { &amp;quot;balance&amp;quot;: &amp;quot;300000&amp;quot; },</span></span>
<span class="line"><span>    &amp;quot;f41c74c9ae680c1aa78f42e5647a62f353b7bdde&amp;quot;: { &amp;quot;balance&amp;quot;: &amp;quot;400000&amp;quot; }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后执行：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>    $ geth --datadir /root/geth-test/ init genesis.json</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这样，我们就初始化了属于自己的创世区块信息。</p><p>接下来我们创建一个账户，由于是用户私链挖矿，只有你一个人挖矿，所以使用CPU挖矿完全没有问题。</p><p>我们通过如下命令进入Geth命令行交互页面：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span> $ geth --datadir /root/geth-test/ --networkid 98 console</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><img src="https://static001.geekbang.org/resource/image/8c/f4/8caf635275f803120000425ad2add6f4.png" alt=""><p>如上图所示的那样，运行通过。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>personal.newAccount()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>我们创建了一个新账户，这个账户就是EOA账户，并通过eth.getBalance获取了当前地址的余额，显示为0。</p><p>输入Exit退出后，我们开始以挖矿模式启动，这里我们最好记录一下我们的地址：</p><blockquote></blockquote><p>【0xf8f7ff845596f0bab1e973859bfcaec6cd2a82ab】</p><p>我们使用如下命令启动挖矿，注意在Etherbase的地方填上述地址：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>$ geth --datadir /root/geth-test/ --networkid 98 --mine --minerthreads=1 --etherbase=0xf8f7ff845596f0bab1e973859bfcaec6cd2a82ab</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>以太坊的PoW挖矿算法是内存困难型的，首先需要生成DAG，这个视你设备的性能而定，需要耗费一定时间，请耐心等待，如下图所示，我们可以看到DAG生成非常耗费时间。</p><img src="https://static001.geekbang.org/resource/image/d6/27/d69fd6ce298a755fc50c68cc67e7cd27.png" alt=""><p>在我的远程开发机上一共耗费了6分半，又经过了4分钟，我挖到了第一个块，如下图所示。</p><img src="https://static001.geekbang.org/resource/image/9d/cb/9da9ac44f1057bd8918f60fde20877cb.png" alt=""><p>这期间机器的负载如下。</p><img src="https://static001.geekbang.org/resource/image/99/a4/9939264d4e1d37ad307e4f12c51d7da4.png" alt=""><p>可以看到CPU和内存占用很高，我这里使用测试的机器是2Core 4GB Ubuntu16.04。</p><p>现在我们再去检查一下Etherbase所指向地址的余额。</p><img src="https://static001.geekbang.org/resource/image/9b/44/9b61e6f4a7247f3b86f2962e653f5a44.png" alt=""><p>可以看到已经有5个以太币了，以太币的最小单位wei，所以5后面18个零表示5个以太币。</p><h3 id="_3-编写并部署属于自己的智能合约" tabindex="-1"><a class="header-anchor" href="#_3-编写并部署属于自己的智能合约"><span>3.编写并部署属于自己的智能合约</span></a></h3><p>智能合约的开发与钱包是独立的，用户可以使用IDE进行调试等操作，目前Dapp的IDE并不多，常见有Truffle、Embark、Remix几种；</p><p>这篇文章中，我并不使用IDE，这里仅仅会给出一些示例代码，即经典的Hello Word，你如果想尝试编写自己的智能合约，可以使用在线IDE。</p><blockquote></blockquote><p><a href="https://ethereum.github.io/browser-solidity/%E3%80%82" target="_blank" rel="noopener noreferrer">https://ethereum.github.io/browser-solidity/。</a></p><p>首先我们要获取Solidity编译器，通过 apt-get install solc 来安装。</p><p>安装成功后，我们新建一个Solidity源码文件，命名为helloword.sol，并且写入代码如下。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>pragma solidity ^0.4.11;</span></span>
<span class="line"><span>contract helloWorld {</span></span>
<span class="line"><span>function renderHelloWorld () returns (string) {</span></span>
<span class="line"><span> return &amp;#39;helloWorld&amp;#39;;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行 solc --bin helloword.sol 获得EVM二进制码。</p><img src="https://static001.geekbang.org/resource/image/9b/4d/9b89682246dc0304984ee6af011d324d.png" alt=""><p>编译器警告我们暂时不必理会，接下来我们还需要生成ABI部署参数，使用命令 solc --abi helloword.sol。</p><img src="https://static001.geekbang.org/resource/image/f1/c4/f13a6440c68435938862ab57873fadc4.png" alt=""><p>开始部署，我们进入console，</p><p>定义code和abi两个变量如下，注意code的值最前面有0x，二进制数据是用十六进制表示的。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span> &amp;gt;code=&amp;quot;0x6060604052341561000f57600080fd5b6101578061001e6000396000f300606060405260043610610041576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063942ae0a714610046575b600080fd5b341561005157600080fd5b6100596100d4565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561009957808201518184015260208101905061007e565b50505050905090810190601f1680156100c65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6100dc610117565b6040805190810160405280600a81526020017f68656c6c6f576f726c6400000000000000000000000000000000000000000000815250905090565b6020604051908101604052806000815250905600a165627a7a72305820fcce0b6910e479539e4796b7d56620a6f90e03ba47449c843bec54958f68bf700029&amp;quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&amp;gt;abi=[{&amp;quot;constant&amp;quot;:false,&amp;quot;inputs&amp;quot;:[],&amp;quot;name&amp;quot;:&amp;quot;renderHelloWorld&amp;quot;,&amp;quot;outputs&amp;quot;:[{&amp;quot;name&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;string&amp;quot;}],&amp;quot;payable&amp;quot;:false,&amp;quot;stateMutability&amp;quot;:&amp;quot;nonpayable&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;function&amp;quot;}]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可以在控制台分别执行，由于结果比较长，这里就不放出来了。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>  // 这一步解锁账户，用于方便部署合约 </span></span>
<span class="line"><span>  &amp;gt;personal.unlockAccount(&amp;quot;0xf8f7ff845596f0bab1e973859bfcaec6cd2a82ab&amp;quot;)</span></span>
<span class="line"><span>   // 使用上述定义的abi变量生成合约信息</span></span>
<span class="line"><span>  &amp;gt;myHelloWorld=eth.contract(abi)</span></span>
<span class="line"><span>  // 注入code信息，激活合约</span></span>
<span class="line"><span>&amp;gt;contract=myHelloWorld.new({from:&amp;quot;0xf8f7ff845596f0bab1e973859bfcaec6cd2a82ab&amp;quot;,data:code,gas:1000000})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最终执行结果如下。</p><img src="https://static001.geekbang.org/resource/image/3b/57/3bdc482fc2eb7fed45d8b16835b1cc57.png" alt=""><p>我们可以通过txpool来查看未确认的交易。</p><img src="https://static001.geekbang.org/resource/image/d6/d1/d693a9be1149770884217eddf46c2cd1.png" alt=""><p>接下来只要等待出块即可，你的合约就会成为正常运行的合约了，否则合约还不可以调用。</p><p>由于我本地挖矿出块异常缓慢，所以我尝试了Remix IDE，运行后我们可以得到如下结果。</p><img src="https://static001.geekbang.org/resource/image/be/03/be4e1b3e4f5727a17ba0494ca352e203.png" alt=""><p>至此一个简单的HelloWord智能合约就生成啦，不过它的运行成本非常高昂，所以我们极力建议使用在一些方便的虚拟环境中。</p><h2 id="智能合约标准模板" tabindex="-1"><a class="header-anchor" href="#智能合约标准模板"><span>智能合约标准模板</span></a></h2><p>当任何人都可以写代码自定义业务逻辑的时候，也就意味着需要一套标准让人们降低开发门槛，标准化的接口让产品之间可以协作。那么我们接下来就来讨论一下以太坊上的三种智能合约标准模板。</p><p>这三种模板都与Token有关。那么首先我们就来区分一下数字货币与Token的概念，数字货币一般指一个区块链项目的平台代币，比如以太坊上的以太币，元界上的ETP都是基础代币。</p><p>而Token往往代表了一种资产，这些资产\b在已经存在的其他区块链之上运行，资产还可以像商品一样交易，例如消费积分、游戏虚拟资产。Token离具体的区块链应用也会更近，因为区块链应用的项目方通常也是Token的发行方。</p><p>目前最广泛使用的三种Token标准都是基于以太坊的，它们分别是ERC20、ERC223、ERC721。这里的ERC表示Ethereum Request for Comments，翻译过来就是以太坊意见征求稿。</p><h3 id="_1-erc20" tabindex="-1"><a class="header-anchor" href="#_1-erc20"><span>1.ERC20</span></a></h3><p>2015年11月，V神在Github上提交了ERC20代币的技术标准，\b随后2016年到2017年，大量的区块链项目都使用ERC20作为工具进行ICO。这使得ERC20成为了区块链整个行业内的Token标准，可见这种标准的影响之大。</p><p>实际上ERC20代币是一类运行在以太坊区块链上的智能合约，只不过这些合约代码遵循一定的规范，这个规范就是ERC20标准，它规定了跨Dapp转移Token、Token交易以及一些使用接口。</p><p>ERC20一共定义了6个函数和两个触发事件，他们都是使用Solidity语言编写的。</p><p>6个函数描述了如何转移以及Token的相关数据如何被访问，市面上99%的ERC20 Token都可以找到这6个函数。2个事件\b提供了Approve和Transfer的格式化输出。</p><p>下面我们重点看一看ERC20的接口。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span> // ---------------------------------------------</span></span>
<span class="line"><span> // ERC Token Standard #20 Interface</span></span>
<span class="line"><span> // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md</span></span>
<span class="line"><span> // -------------------------------------------</span></span>
<span class="line"><span>contract ERC20Interface {</span></span>
<span class="line"><span> function totalSupply() public constant returns (uint);</span></span>
<span class="line"><span> function balanceOf(address tokenOwner) public constant returns (uint balance);</span></span>
<span class="line"><span> function allowance(address tokenOwner, address spender) public constant returns (uint remaining);</span></span>
<span class="line"><span> function transfer(address to, uint tokens) public returns (bool success);</span></span>
<span class="line"><span> function approve(address spender, uint tokens) public returns (bool success);</span></span>
<span class="line"><span> function transferFrom(address from, address to, uint tokens) public returns (bool success);</span></span>
<span class="line"><span> event Transfer(address indexed from, address indexed to, uint tokens);</span></span>
<span class="line"><span> event Approval(address indexed tokenOwner, address indexed spender, uint tokens);</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>Allowance：允许多次创建两个不同的地址之间的单向交易，Token的拥有者可以从此智能合约中提取Token；</li><li>Approve：这个函数需要引用Allowance，顾名思义，它定义了Token的拥有者同意创建属于自己的交易，这个函数要求两个参数作为输入，分别是花费者的地址，以及发送金额；</li><li>BalanceOf：定义了查询目标地址账户余额的接口；</li><li>Transfer和TransferFrom：定义了Token如何转移\b以及执行转移过程；</li><li>TotalSupply：定义了这个Token最大发行量。</li></ol><p>上面我们简要介绍了ERC20标准合约的接口，下面我们来看看升级版的ERC20。</p><h3 id="_2-erc223" tabindex="-1"><a class="header-anchor" href="#_2-erc223"><span>2.ERC223</span></a></h3><p>在某些情况下，ERC20也有些缺陷。例如某人使用ERC20发送100个Token到另外一个账户，如果目标账户是一个合约账户，\b目标账户的合约代码如果不兼容ERC20 标准怎么办呢？</p><p>这一点非常有可能，\b由于合约代码无法识别交易，所以这笔交易就会被拒绝。</p><p>我们知道以太坊使用的并不是UTXO，这意味着合约之间不满足ACID，那么很遗憾，发送方的这100个Token就永久地丢失了。</p><p>为了解决这个问题，\b非官方的社区开发者提交了ERC223\b模板，可以解决这个问题，使用者需要把既存的ERC20合约升级到ERC223合约。</p><h3 id="_3-erc721" tabindex="-1"><a class="header-anchor" href="#_3-erc721"><span>3.ERC721</span></a></h3><p>2018年初，有一个区块链游戏火了，叫做以太坊养猫游戏，这个游戏也是一个智能合约。它基于ERC721标准，实际上它也是一种Token标准。</p><p>ERC721与ERC20最大的区别是：ERC721定义了每一份Token都是唯一的，它们有唯一的标识。例如芒果和米饭是两种不同属性的资产，从物理世界来看，他们是不能直接混在一起使用的，我们不能把芒果加到大米中。</p><p>这样一来，ERC721中Token的含义也转变成了一种物权所有权凭证，不再是ERC20中的同质资产。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>今天我们介绍了以太坊钱包，手把手教你搭建了一条以太坊私链，并告诉你如何编译和部署智能合约，最后我还介绍了三种流行的智能合约模板，希望能帮助你上手并能深入地理解智能合约。</p><p>今天的问题是，除了以太坊之外，还有哪些主打智能合约的区块链项目呢？你可以给我留言，我们一起讨论。感谢你的收听，我们下次再见。</p><p>参考链接：</p><ol><li><a href="http://www.ethdocs.org/en/latest/ethereum-clients/go-ethereum/index.html" target="_blank" rel="noopener noreferrer">http://www.ethdocs.org/en/latest/ethereum-clients/go-ethereum/index.html</a></li><li><a href="https://github.com/ethereum/wiki/wiki/JSON-RPC" target="_blank" rel="noopener noreferrer">https://github.com/ethereum/wiki/wiki/JSON-RPC</a></li><li><a href="http://remix.ethereum.org" target="_blank" rel="noopener noreferrer">http://remix.ethereum.org</a></li><li><a href="https://github.com/ethereum/go-ethereum/wiki/Private-network" target="_blank" rel="noopener noreferrer">https://github.com/ethereum/go-ethereum/wiki/Private-network</a></li><li><a href="https://theethereum.wiki/w/index.php/ERC20_Token_Standard" target="_blank" rel="noopener noreferrer">https://theethereum.wiki/w/index.php/ERC20_Token_Standard</a></li></ol>`,99)]))}const d=a(t,[["render",p]]),c=JSON.parse('{"path":"/posts/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E5%8C%BA%E5%9D%97%E9%93%BE/%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E6%B7%B1%E5%85%A5%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF/%E7%AC%AC19%E8%AE%B2%20_%20%E4%B8%8A%E6%89%8B%E6%90%AD%E5%BB%BA%E4%B8%80%E6%9D%A1%E8%87%AA%E5%B7%B1%E7%9A%84%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6.html","title":"第19讲 _ 上手搭建一条自己的智能合约","lang":"zh-CN","frontmatter":{"description":"第19讲 _ 上手搭建一条自己的智能合约 上一篇我们聊到了区块链智能合约，我主要介绍了智能合约的概念，但是并没有给你提供智能合约的实际运行案例，那么今天，我们就自己动手写一个智能合约，并且介绍一下智能合约标准模板，供你参考学习， 并搭建起自己的智能合约。 本篇将以以太坊作为基础知识进行讲解，本篇面向没有任何智能合约基础的人群，所以配备了较多的插图和操作...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/interview/posts/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E5%8C%BA%E5%9D%97%E9%93%BE/%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E6%B7%B1%E5%85%A5%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF/%E7%AC%AC19%E8%AE%B2%20_%20%E4%B8%8A%E6%89%8B%E6%90%AD%E5%BB%BA%E4%B8%80%E6%9D%A1%E8%87%AA%E5%B7%B1%E7%9A%84%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"第19讲 _ 上手搭建一条自己的智能合约"}],["meta",{"property":"og:description","content":"第19讲 _ 上手搭建一条自己的智能合约 上一篇我们聊到了区块链智能合约，我主要介绍了智能合约的概念，但是并没有给你提供智能合约的实际运行案例，那么今天，我们就自己动手写一个智能合约，并且介绍一下智能合约标准模板，供你参考学习， 并搭建起自己的智能合约。 本篇将以以太坊作为基础知识进行讲解，本篇面向没有任何智能合约基础的人群，所以配备了较多的插图和操作..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-16T11:19:38.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-16T11:19:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"第19讲 _ 上手搭建一条自己的智能合约\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-08-16T11:19:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755343178000,"updatedTime":1755343178000,"contributors":[{"name":"bbhou","username":"bbhou","email":"1557740299@qq.com","commits":1,"url":"https://github.com/bbhou"}]},"readingTime":{"minutes":10.51,"words":3152},"filePathRelative":"posts/深入浅出区块链/第二章 深入区块链技术/第19讲 _ 上手搭建一条自己的智能合约.md","localizedDate":"2025年8月16日","excerpt":"\\n<p><audio id=\\"audio\\" title=\\"第19讲 | 上手搭建一条自己的智能合约\\" controls=\\"\\" preload=\\"none\\"><source id=\\"mp3\\" src=\\"https://static001.geekbang.org/resource/audio/a6/c2/a643b9d098e33bd4eecabc4cc2a07dc2.mp3\\"></audio></p>\\n<p>上一篇我们聊到了区块链智能合约，我主要介绍了智能合约的概念，但是并没有给你提供智能合约的实际运行案例，那么今天，我们就自己动手写一个智能合约，并且介绍一下智能合约标准模板，供你参考学习， 并搭建起自己的智能合约。</p>","autoDesc":true}');export{d as comp,c as data};
