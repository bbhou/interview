import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as t,o as i}from"./app-d8EKP-K0.js";const o={};function r(c,e){return i(),a("div",null,e[0]||(e[0]=[t('<h1 id="_22-实用的加权采样算法" tabindex="-1"><a class="header-anchor" href="#_22-实用的加权采样算法"><span>22 _ 实用的加权采样算法</span></a></h1><p><audio id="audio" title="22 | 实用的加权采样算法" controls="" preload="none"><source id="mp3" src="https://static001.geekbang.org/resource/audio/84/74/84f855c0a04dcefcac5dd8d0dac13974.mp3"></audio></p><p>今天来讲一个非常轻松的话题，这个话题看似和推荐系统没什么关系，但肯定有用，只是在别的推荐系统相关话题里都没人会提。</p><h2 id="一些场景" tabindex="-1"><a class="header-anchor" href="#一些场景"><span>一些场景</span></a></h2><p>还记得前面讲到的用户画像吗？想象一个场景：你经过辛辛苦苦抓数据，清洗数据，收集用户行为，目的就是给用户计算兴趣标签。</p><p>这时候你可能会遇到一个两难的问题：如果给用户计算出兴趣标签的权重了，那应该保留多少标签呢？</p><p>保留太多的话，每次召回候选集时，计算复杂度可不低，只保留少部分吧，那真是手心手背都是肉，生怕丢弃的标签才是用户的真爱。</p><p>怎么办？这时候，你需要的一个简单的加权采样算法，每次召回时并不使用全部用户标签，而是按照权重采样一部分标签来使用，这样做的好处当然很明显：</p><ol><li>大大减少召回时的计算复杂度；</li><li>可以保留更多的用户标签；</li><li>每次召回计算时还能有所变化；</li><li>虽然有变化，但是依然受标签的权重相对大小约束。</li></ol><p>加权采样的应用不只这一个地方，比如在热门排行榜展示时，也可以用加权采样，而不仅仅按照排行榜分数顺序展示，采用加权采样的展示方法，会让排行榜每次刷新都略有变化，人民群众也会更加喜闻乐见。</p><p>下面介绍几种常用的加权采样算法及其原理，供你日常随手拿来使用。</p><h2 id="加权采样" tabindex="-1"><a class="header-anchor" href="#加权采样"><span>加权采样</span></a></h2><p>加权采样有两种情况，一种是能够已知全部样本的个数。这需要遍历整个样本，比如说用户标签采样输出，那么每次采样时仍然需要遍历所有的标签，来依次决定每一个标签输出的概率。</p><p>另一种是不知道总量样本是多大，或者总量很大，以至于你不愿意全部遍历之后再输出采样结果，这样的数据就是数据流，对应的就是流采样。</p><p>下面分别讲这两种采样方法。</p><h3 id="_1-有限数据集" tabindex="-1"><a class="header-anchor" href="#_1-有限数据集"><span>1.有限数据集</span></a></h3><p>等概率采样的方法非常简单，任意编程语言中都有伪随机数实现，就不在本文讨论范围内了。</p><p>现在假设你有用户标签若干，每一个标签都有个权重w，权重高低反映了用户对这个标签的感兴趣程度高低。你希望每次输出一部分标签用于召回推荐候选集，每次输出时都不一样，但是又能反映用户标签的权重，输出的概率和权重成正比。</p><p>这时候你需要一个公式：</p><p>$$S_{i} = R^{\\frac{1}{w_{i} }}$$</p><p>解释一下这个公式：</p><ol><li>wi 是每个样本的权重，比如用户标签权重；</li><li>R是遍历每个样本时产生的0到1之间的随机数；</li><li>Si就是每个样本的采样分数</li></ol><p>遍历之后，按照采样分数排序，输出前k个结果就是你得到的采样结果。可以编程简单做个模拟，比如下面有这样几个简单样本。</p><img src="https://static001.geekbang.org/resource/image/70/7e/70e81cc194a14ba091a91ecb8bf2477e.png" alt=""><p>模拟10000次后，三个样本被采样次数如下：</p><img src="https://static001.geekbang.org/resource/image/dc/27/dc701147b5785fd40ad7205364feeb27.png" alt=""><p>你可以看到，每个样本采样概率和它的权重成正比。</p><p>还有另一种加权采样方法，是利用指数分布。</p><p>我先给忘记了指数分布的人复习一下什么是指数分布。</p><p>假设你到银行去办业务，每个人办理业务的时间是不确定的，那每个人办理业务时间的概率分布就是指数分布，用教科书上的话说，就是两个事件发生的时间间隔。</p><p>指数分布的概率密度函数是：</p><img src="https://static001.geekbang.org/resource/image/98/70/9894def1fc772650414574cbfbd55170.png" alt=""><p>指数分布的参数Lambda，它的倒数，$\\frac{1}{\\lambda}$ 就是事件发生时间间隔的期望。把指数分布的这个意义放进标签中来考虑，标签的权重其实反映一个直觉：权重越大的标签，用户消费它就越频繁，也就是间隔时间就会短。</p><p>所以根据这个原理，就有另一个加权采样的办法：为每一个标签构造一个指数分布随机数，这个指数分布的参数Lambda就是标签权重，然后用这个指数分布的产生一个随机数，再输出随机数最大的k个标签作为采样结果,是不是很完美？</p><p>还是上面的权重，再来模拟10000次。<br><br><img src="https://static001.geekbang.org/resource/image/46/df/468fcee6b610b57649a62ad9904e75df.png" alt=""></p><p>依然完美符合权重的相对大小。</p><h3 id="_2-无限数据集" tabindex="-1"><a class="header-anchor" href="#_2-无限数据集"><span>2.无限数据集</span></a></h3><p>上面的两种采样都是针对有限数据集的，也就是采样之前都要遍历一遍所有样本。那么如果面对的数据集无限大，或者不知道多大时，该怎么做加权采样呢？这就要讲到另一个采样算法了，名字叫蓄水池采样（也叫蓄水池抽样）。</p><p>蓄水池采样可以用在推荐系统的哪些地方呢？比如可以再模型融合之后加一层蓄水池抽样，或者在召回阶段加一层蓄水池采样，这样在不影响整个推荐流程和转化概率的前提下，降低计算复杂度和提升推荐多样性。</p><p>或者，在线阶段要使用用户的反馈行为做实时推荐，对于不同的用户，活跃程度不同，产生的反馈行为数量不同，你也可以用蓄水池采样，为每个用户取出固定数量的行为用于更新推荐结果。</p><p>下面，我先讲蓄水池采样，再讲加权蓄水池采样。</p><p>假如有一个数据集合，一共有n条，要从中采样取出k个，那么每个样本被选中的概率就是 $\\frac{k}{n}$ 。蓄水池采样的做法是：</p><ol><li>直接先取出前k个样本留着，这k个就是随时准备最终要输出的；</li><li>从第k+1个开始，每个都以 $\\frac{k}{n}$ 的概率去替换那留着的k个样本中的一个。</li></ol><p>这个过程，随时可以取用那个k个集合作为输出结果，任意时刻，当总样本遍历了n个时，他们的概率都是 $\\frac{k}{n}$ 。这就是蓄水池采样，蓄水池采样，顾名思义，k个元素的样本集合就是个蓄水池，是任意时刻的采样结果，可以随时取用。</p><p>现在回到我们今天的主题来，实际上更需要的是加权蓄水池采样。加权蓄水池采样利用的依然是在前面说的第一种加权采样方法，只不过结合了蓄水池采样的思想。</p><p>要从大数据集中采样k个，其具体做法是这样的：</p><ol><li>为每一个样本生成一个分数，分数还是用这个公式 $S_{i} = R^{\\frac{1}{w_{i} }}$;</li><li>如果结果不足k个，直接保存到结果中；</li><li>如果结果中已经有k个了，如果 $S_{i}$ 比已有的结果里最小那个分数大，就替换它。</li></ol><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>今天介绍的算法非常简单，但是在推荐系统中有很多的用途。尤其是面对的数据需要采样、需要有所变化时，加权采样本质上来说就是让权重影响采样概率。</p><p>前面的几种加权采样算法，都是让采样概率和权重成正比，这意味着你的样本权重之间的关系要合理。</p><p>那么，请思考另一个问题，如果你的样本权重有正有负，该如何加权采样呢？欢迎留言一起讨论。</p><p>感谢你的收听，我们下次再见。</p><img src="https://static001.geekbang.org/resource/image/87/b0/873b086966136189db14874181823fb0.jpg" alt="">',53)]))}const d=p(o,[["render",r]]),l=JSON.parse('{"path":"/posts/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E4%B8%89%E5%8D%81%E5%85%AD%E5%BC%8F/%E5%8E%9F%E7%90%86%E7%AF%87%20%C2%B7%20%E5%85%B6%E4%BB%96%E5%BA%94%E7%94%A8%E7%AE%97%E6%B3%95/22%20_%20%E5%AE%9E%E7%94%A8%E7%9A%84%E5%8A%A0%E6%9D%83%E9%87%87%E6%A0%B7%E7%AE%97%E6%B3%95.html","title":"22 _ 实用的加权采样算法","lang":"zh-CN","frontmatter":{"description":"22 _ 实用的加权采样算法 今天来讲一个非常轻松的话题，这个话题看似和推荐系统没什么关系，但肯定有用，只是在别的推荐系统相关话题里都没人会提。 一些场景 还记得前面讲到的用户画像吗？想象一个场景：你经过辛辛苦苦抓数据，清洗数据，收集用户行为，目的就是给用户计算兴趣标签。 这时候你可能会遇到一个两难的问题：如果给用户计算出兴趣标签的权重了，那应该保留多...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/interview/posts/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E4%B8%89%E5%8D%81%E5%85%AD%E5%BC%8F/%E5%8E%9F%E7%90%86%E7%AF%87%20%C2%B7%20%E5%85%B6%E4%BB%96%E5%BA%94%E7%94%A8%E7%AE%97%E6%B3%95/22%20_%20%E5%AE%9E%E7%94%A8%E7%9A%84%E5%8A%A0%E6%9D%83%E9%87%87%E6%A0%B7%E7%AE%97%E6%B3%95.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"22 _ 实用的加权采样算法"}],["meta",{"property":"og:description","content":"22 _ 实用的加权采样算法 今天来讲一个非常轻松的话题，这个话题看似和推荐系统没什么关系，但肯定有用，只是在别的推荐系统相关话题里都没人会提。 一些场景 还记得前面讲到的用户画像吗？想象一个场景：你经过辛辛苦苦抓数据，清洗数据，收集用户行为，目的就是给用户计算兴趣标签。 这时候你可能会遇到一个两难的问题：如果给用户计算出兴趣标签的权重了，那应该保留多..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-16T11:19:38.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-16T11:19:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"22 _ 实用的加权采样算法\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-08-16T11:19:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755343178000,"updatedTime":1755343178000,"contributors":[{"name":"bbhou","username":"bbhou","email":"1557740299@qq.com","commits":1,"url":"https://github.com/bbhou"}]},"readingTime":{"minutes":7.03,"words":2109},"filePathRelative":"posts/推荐系统三十六式/原理篇 · 其他应用算法/22 _ 实用的加权采样算法.md","localizedDate":"2025年8月16日","excerpt":"\\n<p><audio id=\\"audio\\" title=\\"22 | 实用的加权采样算法\\" controls=\\"\\" preload=\\"none\\"><source id=\\"mp3\\" src=\\"https://static001.geekbang.org/resource/audio/84/74/84f855c0a04dcefcac5dd8d0dac13974.mp3\\"></audio></p>\\n<p>今天来讲一个非常轻松的话题，这个话题看似和推荐系统没什么关系，但肯定有用，只是在别的推荐系统相关话题里都没人会提。</p>\\n<h2>一些场景</h2>\\n<p>还记得前面讲到的用户画像吗？想象一个场景：你经过辛辛苦苦抓数据，清洗数据，收集用户行为，目的就是给用户计算兴趣标签。</p>","autoDesc":true}');export{d as comp,l as data};
