import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,a as e,o as i}from"./app-d8EKP-K0.js";const p={};function l(r,s){return i(),n("div",null,s[0]||(s[0]=[e(`<h1 id="_15-消息队列和事件循环-页面是怎么-活-起来的" tabindex="-1"><a class="header-anchor" href="#_15-消息队列和事件循环-页面是怎么-活-起来的"><span>15 _ 消息队列和事件循环：页面是怎么“活”起来的？</span></a></h1><p><audio id="audio" title="15 | 消息队列和事件循环：页面是怎么“活”起来的？" controls="" preload="none"><source id="mp3" src="https://static001.geekbang.org/resource/audio/39/c2/39407fedc5ad363289679a42aa7203c2.mp3"></audio></p><p>前面我们讲到了每个渲染进程都有一个主线程，并且主线程非常繁忙，既要处理DOM，又要计算样式，还要处理布局，同时还需要处理JavaScript任务以及各种输入事件。要让这么多不同类型的任务在主线程中有条不紊地执行，这就需要一个系统来统筹调度这些任务，这个统筹调度系统就是我们今天要讲的消息队列和事件循环系统。</p><p>在写这篇文章之前，我翻阅了大量的资料，却发现没有一篇文章能把消息循环系统给讲清楚的，所以我决定用一篇文章来专门介绍页面的事件循环系统。事件循环非常底层且非常重要，学会它能让你理解页面到底是如何运行的， 所以在本篇文章中，我们会将页面的事件循环给梳理清楚、讲透彻。</p><p>为了能让你更加深刻地理解事件循环机制，我们就从最简单的场景来分析，然后带你一步步了解浏览器页面主线程是如何运作的。</p><p>需要说明的是，文章中的代码我会采用C++来示范。如果你不熟悉C++，也没有关系，这里并没有涉及到任何复杂的知识点，只要你了解JavaScript或Python，你就会看懂。</p><h2 id="使用单线程处理安排好的任务" tabindex="-1"><a class="header-anchor" href="#使用单线程处理安排好的任务"><span>使用单线程处理安排好的任务</span></a></h2><p>我们先从最简单的场景讲起，比如有如下一系列的任务：</p><ul><li>任务1：1+2</li><li>任务2：20/5</li><li>任务3：7*8</li><li>任务4：打印出任务1、任务2、任务3的运算结果</li></ul><p>现在要在一个线程中去执行这些任务，通常我们会这样编写代码：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>void MainThread(){</span></span>
<span class="line"><span>     int num1 = 1+2; //任务1</span></span>
<span class="line"><span>     int num2 = 20/5; //任务2</span></span>
<span class="line"><span>     int num3 = 7*8; //任务3</span></span>
<span class="line"><span>     print(&amp;quot;最终计算的值为:%d,%d,%d&amp;quot;,num1,num2,num3)； //任务4</span></span>
<span class="line"><span>  }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的执行代码中，我们把所有任务代码按照顺序写进主线程里，等线程执行时，这些任务会按照顺序在线程中依次被执行；等所有任务执行完成之后，线程会自动退出。可以参考下图来直观地理解下其执行过程：</p><img src="https://static001.geekbang.org/resource/image/72/bc/72726678ac6604116c1d5dad160780bc.png" alt=""><h2 id="在线程运行过程中处理新任务" tabindex="-1"><a class="header-anchor" href="#在线程运行过程中处理新任务"><span>在线程运行过程中处理新任务</span></a></h2><p>但并不是所有的任务都是在执行之前统一安排好的，大部分情况下，新的任务是在线程运行过程中产生的。比如在线程执行过程中，又接收到了一个新的任务要求计算“10+2”，那上面那种方式就无法处理这种情况了。</p><p><strong>要想在线程运行过程中，能接收并执行新的任务，就需要采用事件循环机制</strong>。我们可以通过一个for循环语句来监听是否有新的任务，如下面的示例代码：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>//GetInput</span></span>
<span class="line"><span>//等待用户从键盘输入一个数字，并返回该输入的数字</span></span>
<span class="line"><span>int GetInput(){</span></span>
<span class="line"><span>    int input_number = 0;</span></span>
<span class="line"><span>    cout&amp;lt;&amp;lt;&amp;quot;请输入一个数:&amp;quot;;</span></span>
<span class="line"><span>    cin&amp;gt;&amp;gt;input_number;</span></span>
<span class="line"><span>    return input_number;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>//主线程(Main Thread)</span></span>
<span class="line"><span>void MainThread(){</span></span>
<span class="line"><span>     for(;;){</span></span>
<span class="line"><span>          int first_num = GetInput()；</span></span>
<span class="line"><span>          int second_num = GetInput()；</span></span>
<span class="line"><span>          result_num = first_num + second_num;</span></span>
<span class="line"><span>          print(&amp;quot;最终计算的值为:%d&amp;quot;,result_num)；</span></span>
<span class="line"><span>      }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相较于第一版的线程，这一版的线程做了两点改进。</p><ul><li><strong>第一点引入了循环机制</strong>，具体实现方式是在线程语句最后添加了一个<strong>for循环语句</strong>，线程会一直循环执行。</li><li><strong>第二点是引入了事件</strong>，可以在线程运行过程中，等待用户输入的数字，等待过程中线程处于暂停状态，一旦接收到用户输入的信息，那么线程会被激活，然后执行相加运算，最后输出结果。</li></ul><p>通过引入事件循环机制，就可以让该线程“活”起来了，我们每次输入两个数字，都会打印出两数字相加的结果，你可以结合下图来参考下这个改进版的线程：</p><img src="https://static001.geekbang.org/resource/image/9e/e3/9e0f595324fbd5b7cd1c1ae1140f7de3.png" alt=""><h2 id="处理其他线程发送过来的任务" tabindex="-1"><a class="header-anchor" href="#处理其他线程发送过来的任务"><span>处理其他线程发送过来的任务</span></a></h2><p>上面我们改进了线程的执行方式，引入了事件循环机制，可以让其在执行过程中接受新的任务。不过在第二版的线程模型中，所有的任务都是来自于线程内部的，如果另外一个线程想让主线程执行一个任务，利用第二版的线程模型是无法做到的。</p><p>那下面我们就来看看其他线程是如何发送消息给渲染主线程的，具体形式你可以参考下图：</p><img src="https://static001.geekbang.org/resource/image/2e/05/2eb6a8ecb7cb528da4663573d74eb305.png" alt=""><p>从上图可以看出，渲染主线程会频繁接收到来自于IO线程的一些任务，接收到这些任务之后，渲染进程就需要着手处理，比如接收到资源加载完成的消息后，渲染进程就要着手进行DOM解析了；接收到鼠标点击的消息后，渲染主线程就要开始执行相应的JavaScript脚本来处理该点击事件。</p><p>那么如何设计好一个线程模型，能让其能够接收其他线程发送的消息呢？</p><p>一个通用模式是使用<strong>消息队列</strong>。在解释如何实现之前，我们先说说什么是消息队列，可以参考下图：</p><img src="https://static001.geekbang.org/resource/image/6d/5e/6d141ec0925590d83d97a37cce8e6f5e.png" alt=""><p>从图中可以看出，<strong>消息队列是一种数据结构，可以存放要执行的任务</strong>。它符合队列“<strong>先进先出</strong>”的特点，也就是说<strong>要添加任务的话，添加到队列的尾部；要取出任务的话，从队列头部去取</strong>。</p><p>有了队列之后，我们就可以继续改造线程模型了，改造方案如下图所示：</p><img src="https://static001.geekbang.org/resource/image/2a/ab/2ac6bc0361cb4690c5cc83d8abad22ab.png" alt=""><p>从上图可以看出，我们的改造可以分为下面三个步骤：</p><ol><li>添加一个消息队列；</li><li>IO线程中产生的新任务添加进消息队列尾部；</li><li>渲染主线程会循环地从消息队列头部中读取任务，执行任务。</li></ol><p>有了这些步骤之后，那么接下来我们就可以<strong>按步骤使用代码来实现第三版的线程模型</strong>。</p><p>首先，构造一个队列。当然，在本篇文章中我们不需要考虑队列实现的细节，只是构造队列的接口：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>class TaskQueue{</span></span>
<span class="line"><span>  public:</span></span>
<span class="line"><span>  Task takeTask(); //取出队列头部的一个任务</span></span>
<span class="line"><span>  void pushTask(Task task); //添加一个任务到队列尾部</span></span>
<span class="line"><span>};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，改造主线程，让主线程从队列中读取任务：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>TaskQueue task_queue；</span></span>
<span class="line"><span>void ProcessTask();</span></span>
<span class="line"><span>void MainThread(){</span></span>
<span class="line"><span>  for(;;){</span></span>
<span class="line"><span>    Task task = task_queue.takeTask();</span></span>
<span class="line"><span>    ProcessTask(task);</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，我们添加了一个消息队列的对象，然后在主线程的for循环代码块中，从消息队列中读取一个任务，然后执行该任务，主线程就这样一直循环往下执行，因此只要消息队列中有任务，主线程就会去执行。</p><p>主线程的代码就这样改造完成了。这样改造后，主线程执行的任务都全部从消息队列中获取。所以如果有其他线程想要发送任务让主线程去执行，只需要将任务添加到该消息队列中就可以了，添加任务的代码如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Task clickTask;</span></span>
<span class="line"><span>task_queue.pushTask(clickTask)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>由于是多个线程操作同一个消息队列，所以在添加任务和取出任务时还会加上一个同步锁，这块内容你也要注意下。</p><h2 id="处理其他进程发送过来的任务" tabindex="-1"><a class="header-anchor" href="#处理其他进程发送过来的任务"><span>处理其他进程发送过来的任务</span></a></h2><p>通过使用消息队列，我们实现了线程之间的消息通信。在Chrome中，跨进程之间的任务也是频繁发生的，那么如何处理其他进程发送过来的任务？你可以参考下图：</p><img src="https://static001.geekbang.org/resource/image/e2/c6/e2582e980632fd2df5043f81a11461c6.png" alt=""><p>从图中可以看出，<strong>渲染进程专门有一个IO线程用来接收其他进程传进来的消息</strong>，接收到消息之后，会将这些消息组装成任务发送给渲染主线程，后续的步骤就和前面讲解的“处理其他线程发送的任务”一样了，这里就不再重复了。</p><h2 id="消息队列中的任务类型" tabindex="-1"><a class="header-anchor" href="#消息队列中的任务类型"><span>消息队列中的任务类型</span></a></h2><p>现在你知道页面主线程是如何接收外部任务的了，那接下来我们再来看看消息队列中的任务类型有哪些。你可以参考下<a href="https://cs.chromium.org/chromium/src/third_party/blink/public/platform/task_type.h" target="_blank" rel="noopener noreferrer">Chromium的官方源码</a>，这里面包含了很多内部消息类型，如输入事件（鼠标滚动、点击、移动）、微任务、文件读写、WebSocket、JavaScript定时器等等。</p><p>除此之外，消息队列中还包含了很多与页面相关的事件，如JavaScript执行、解析DOM、样式计算、布局计算、CSS动画等。</p><p>以上这些事件都是在主线程中执行的，所以在编写Web应用时，你还需要衡量这些事件所占用的时长，并想办法解决单个任务占用主线程过久的问题。</p><h2 id="如何安全退出" tabindex="-1"><a class="header-anchor" href="#如何安全退出"><span>如何安全退出</span></a></h2><p>当页面主线程执行完成之后，又该如何保证页面主线程能够安全退出呢？Chrome是这样解决的，确定要退出当前页面时，页面主线程会设置一个退出标志的变量，在每次执行完一个任务时，判断是否有设置退出标志。</p><p>如果设置了，那么就直接中断当前的所有任务，退出线程，你可以参考下面代码：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>TaskQueue task_queue；</span></span>
<span class="line"><span>void ProcessTask();</span></span>
<span class="line"><span>bool keep_running = true;</span></span>
<span class="line"><span>void MainThread(){</span></span>
<span class="line"><span>  for(;;){</span></span>
<span class="line"><span>    Task task = task_queue.takeTask();</span></span>
<span class="line"><span>    ProcessTask(task);</span></span>
<span class="line"><span>    if(!keep_running) //如果设置了退出标志，那么直接退出线程循环</span></span>
<span class="line"><span>        break; </span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="页面使用单线程的缺点" tabindex="-1"><a class="header-anchor" href="#页面使用单线程的缺点"><span>页面使用单线程的缺点</span></a></h2><p>上面讲述的就是页面线程的循环系统是如何工作的，那接下来，我们继续探讨页面线程的一些特征。</p><p>通过上面的介绍，你应该清楚了，页面线程所有执行的任务都来自于消息队列。消息队列是“先进先出”的属性，也就是说放入队列中的任务，需要等待前面的任务被执行完，才会被执行。鉴于这个属性，就有如下两个问题需要解决。</p><p><strong>第一个问题是如何处理高优先级的任务。</strong></p><p>比如一个典型的场景是监控DOM节点的变化情况（节点的插入、修改、删除等动态变化），然后根据这些变化来处理相应的业务逻辑。一个通用的设计的是，利用JavaScript设计一套监听接口，当变化发生时，渲染引擎同步调用这些接口，这是一个典型的观察者模式。</p><p>不过这个模式有个问题，因为DOM变化非常频繁，如果每次发生变化的时候，都直接调用相应的JavaScript接口，那么这个当前的任务执行时间会被拉长，从而导致<strong>执行效率的下降</strong>。</p><p>如果将这些DOM变化做成异步的消息事件，添加到消息队列的尾部，那么又会影响到监控的实时性，因为在添加到消息队列的过程中，可能前面就有很多任务在排队了。</p><p>这也就是说，如果DOM发生变化，采用同步通知的方式，会影响当前任务的<strong>执行效率</strong>；如果采用异步方式，又会影响到<strong>监控的实时性</strong>。</p><p>那该如何权衡<strong>效率</strong>和<strong>实时性</strong>呢？</p><p>针对这种情况，微任务就应用而生了，下面我们来看看微任务是如何权衡效率和实时性的。</p><p>通常我们把消息队列中的任务称为<strong>宏任务</strong>，每个宏任务中都包含了一个<strong>微任务队列</strong>，在执行宏任务的过程中，如果DOM有变化，那么就会将该变化添加到微任务列表中，这样就不会影响到宏任务的继续执行，因此也就解决了执行效率的问题。</p><p>等宏任务中的主要功能都直接完成之后，这时候，渲染引擎并不着急去执行下一个宏任务，而是执行当前宏任务中的微任务，因为DOM变化的事件都保存在这些微任务队列中，这样也就解决了实时性问题。</p><p><strong>第二个是如何解决单个任务执行时长过久的问题。</strong></p><p>因为所有的任务都是在单线程中执行的，所以每次只能执行一个任务，而其他任务就都处于等待状态。如果其中一个任务执行时间过久，那么下一个任务就要等待很长时间。可以参考下图：</p><img src="https://static001.geekbang.org/resource/image/8d/cc/8de4b43fca99b180fdffe6a5af07b5cc.png" alt=""><p>从图中你可以看到，如果在执行动画过程中，其中有个JavaScript任务因执行时间过久，占用了动画单帧的时间，这样会给用户制造了卡顿的感觉，这当然是极不好的用户体验。针对这种情况，JavaScript可以通过回调功能来规避这种问题，也就是让要执行的JavaScript任务滞后执行。至于浏览器是如何实现回调功能的，我们在后面的章节中再详细介绍。</p><h2 id="实践-浏览器页面是如何运行的" tabindex="-1"><a class="header-anchor" href="#实践-浏览器页面是如何运行的"><span>实践：浏览器页面是如何运行的</span></a></h2><p>有了上面的基础知识之后，我们最后来看看浏览器的页面是如何运行的。</p><p>你可以打开开发者工具，点击“Performance”标签，选择左上角的“start porfiling and load page”来记录整个页面加载过程中的事件执行情况，如下图所示：</p><img src="https://static001.geekbang.org/resource/image/c0/1b/c0d59d5b58e387f30cc39ceb4d54f31b.png" alt=""><p>从图中可以看出，我们点击展开了Main这个项目，其记录了主线程执行过程中的所有任务。图中灰色的就是一个个任务，每个任务下面还有子任务，其中的Parse HTML任务，是把HTML解析为DOM的任务。值得注意的是，在执行Parse HTML的时候，如果遇到JavaScript脚本，那么会暂停当前的HTML解析而去执行JavaScript脚本。</p><p>至于Performance工具，在后面的章节中我们还会详细介绍，在这里你只需要建立一个直观的印象就可以了。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>好了，今天就讲到这里，下面我来总结下今天所讲的内容。</p><ul><li>如果有一些确定好的任务，可以使用一个单线程来按照顺序处理这些任务，这是第一版线程模型。</li><li>要在线程执行过程中接收并处理新的任务，就需要引入循环语句和事件系统，这是第二版线程模型。</li><li>如果要接收其他线程发送过来的任务，就需要引入消息队列，这是第三版线程模型。</li><li>如果其他进程想要发送任务给页面主线程，那么先通过IPC把任务发送给渲染进程的IO线程，IO线程再把任务发送给页面主线程。</li><li>消息队列机制并不是太灵活，为了适应效率和实时性，引入了微任务。</li></ul><p>基于消息队列的设计是目前使用最广的消息架构，无论是安卓还是Chrome都采用了类似的任务机制，所以理解了本篇文章的内容后，你再理解其他项目的任务机制也会比较轻松。</p><h2 id="思考时间" tabindex="-1"><a class="header-anchor" href="#思考时间"><span>思考时间</span></a></h2><p>今天给你留的思考题是：结合消息队列和事件循环，你认为微任务是什么？引入微任务能带来什么优势呢？</p><p>欢迎在留言区与我分享你的想法，也欢迎你在留言区记录你的思考过程。感谢阅读，如果你觉得这篇文章对你有帮助的话，也欢迎把它分享给更多的朋友。</p>`,84)]))}const d=a(p,[["render",l]]),o=JSON.parse('{"path":"/posts/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5/%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E7%9A%84%E9%A1%B5%E9%9D%A2%E5%BE%AA%E7%8E%AF%E7%B3%BB%E7%BB%9F/15%20_%20%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E5%92%8C%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%EF%BC%9A%E9%A1%B5%E9%9D%A2%E6%98%AF%E6%80%8E%E4%B9%88%E2%80%9C%E6%B4%BB%E2%80%9D%E8%B5%B7%E6%9D%A5%E7%9A%84%EF%BC%9F.html","title":"15 _ 消息队列和事件循环：页面是怎么“活”起来的？","lang":"zh-CN","frontmatter":{"description":"15 _ 消息队列和事件循环：页面是怎么“活”起来的？ 前面我们讲到了每个渲染进程都有一个主线程，并且主线程非常繁忙，既要处理DOM，又要计算样式，还要处理布局，同时还需要处理JavaScript任务以及各种输入事件。要让这么多不同类型的任务在主线程中有条不紊地执行，这就需要一个系统来统筹调度这些任务，这个统筹调度系统就是我们今天要讲的消息队列和事件循...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/interview/posts/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5/%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E7%9A%84%E9%A1%B5%E9%9D%A2%E5%BE%AA%E7%8E%AF%E7%B3%BB%E7%BB%9F/15%20_%20%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E5%92%8C%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%EF%BC%9A%E9%A1%B5%E9%9D%A2%E6%98%AF%E6%80%8E%E4%B9%88%E2%80%9C%E6%B4%BB%E2%80%9D%E8%B5%B7%E6%9D%A5%E7%9A%84%EF%BC%9F.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"15 _ 消息队列和事件循环：页面是怎么“活”起来的？"}],["meta",{"property":"og:description","content":"15 _ 消息队列和事件循环：页面是怎么“活”起来的？ 前面我们讲到了每个渲染进程都有一个主线程，并且主线程非常繁忙，既要处理DOM，又要计算样式，还要处理布局，同时还需要处理JavaScript任务以及各种输入事件。要让这么多不同类型的任务在主线程中有条不紊地执行，这就需要一个系统来统筹调度这些任务，这个统筹调度系统就是我们今天要讲的消息队列和事件循..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-16T11:19:38.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-16T11:19:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"15 _ 消息队列和事件循环：页面是怎么“活”起来的？\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-08-16T11:19:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755343178000,"updatedTime":1755343178000,"contributors":[{"name":"bbhou","username":"bbhou","email":"1557740299@qq.com","commits":1,"url":"https://github.com/bbhou"}]},"readingTime":{"minutes":13.75,"words":4125},"filePathRelative":"posts/浏览器工作原理与实践/浏览器中的页面循环系统/15 _ 消息队列和事件循环：页面是怎么“活”起来的？.md","localizedDate":"2025年8月16日","excerpt":"\\n<p><audio id=\\"audio\\" title=\\"15 | 消息队列和事件循环：页面是怎么“活”起来的？\\" controls=\\"\\" preload=\\"none\\"><source id=\\"mp3\\" src=\\"https://static001.geekbang.org/resource/audio/39/c2/39407fedc5ad363289679a42aa7203c2.mp3\\"></audio></p>\\n<p>前面我们讲到了每个渲染进程都有一个主线程，并且主线程非常繁忙，既要处理DOM，又要计算样式，还要处理布局，同时还需要处理JavaScript任务以及各种输入事件。要让这么多不同类型的任务在主线程中有条不紊地执行，这就需要一个系统来统筹调度这些任务，这个统筹调度系统就是我们今天要讲的消息队列和事件循环系统。</p>","autoDesc":true}');export{d as comp,o as data};
