import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,a as e,o as i}from"./app-d8EKP-K0.js";const p={};function r(l,a){return i(),n("div",null,a[0]||(a[0]=[e(`<h1 id="_22-如何用仿射变换来移动和旋转3d物体" tabindex="-1"><a class="header-anchor" href="#_22-如何用仿射变换来移动和旋转3d物体"><span>22 _ 如何用仿射变换来移动和旋转3D物体？</span></a></h1><p><audio id="audio" title="22 | 如何用仿射变换来移动和旋转3D物体？" controls="" preload="none"><source id="mp3" src="https://static001.geekbang.org/resource/audio/73/a7/73d1bbb48920fb81221f3d4512def1a7.mp3"></audio></p><p>你好，我是月影。</p><p>在前面的课程里，我们学习过使用仿射变换来移动和旋转二维图形。那在三维世界中，想要移动和旋转物体，我们也需要使用仿射变换。</p><p>但是，仿射变换该怎么从二维扩展到三维几何空间呢？今天，我们就来看一下三维仿射变换的基本方法，以及怎么对它进行优化。</p><p>三维仿射变换和二维仿射变换类似，也包括平移、旋转与缩放等等，而且具体的变换公式也相似。</p><p>比如，对于平移变换来说，如果向量$P(x_{0},y_{0},z_{0})$沿着向量 $Q(x_{1},y_{1},z_{1})$平移，我们只需要让$P$加上$Q$，就能得到变换后的坐标。</p><p>$$<br><br> \\left{\\begin{array}{l}<br><br> x=x_{0}+x_{1} \\&lt;br&gt;<br> y=y_{0}+y_{1} \\&lt;br&gt;<br> z=z_{0}+z_{1}<br><br> \\end{array}\\right.<br><br> $$</p><p>再比如，对于缩放变换来说，我们直接让三维向量乘上标量，就相当于乘上要缩放的倍数就可以了。最后我们得到的三维缩放变换矩阵如下：</p><p>$$<br><br> M=\\left[\\begin{array}{ccc}<br><br> s_{x} &amp; 0 &amp; 0 \\&lt;br&gt;<br> 0 &amp; s_{y} &amp; 0 \\&lt;br&gt;<br> 0 &amp; 0 &amp; s_{z}<br><br> \\end{array}\\right]<br><br> $$</p><p>而且，我们也可以使用齐次矩阵来表示三维仿射变换，通过引入一个新的维度，就可以把仿射变换转换为齐次矩阵的线性变换了。</p><p>$$<br><br> M’=\\left[\\begin{array}{ccc}<br><br> M &amp; 0 \\&lt;br&gt;<br> 0 &amp; 1<br><br> \\end{array}\\right]<br><br> $$</p><p>这个齐次矩阵，是一个4X4的矩阵，其实它就是我们在<a href="https://time.geekbang.org/column/article/269494" target="_blank" rel="noopener noreferrer">第20节课</a>提到的模型矩阵（ModelMatrix）。</p><p>总之，对于三维的仿射变换来说，平移和缩放都只是增加一个$z$分量，这和二维放射变换没有什么不同。但对于物体的旋转变换，三维就要比二维稍微复杂一些了。因为二维旋转只有一个参考轴，就是$z$轴，所以二维图形旋转都是围绕着$z$轴的。但是，三维物体的旋转却可以围绕$x、y、z$，这三个轴其中任意一个轴来旋转。</p><p>因此，这节课，我们就把重点放在处理三维物体的旋转变换上。</p><h2 id="使用欧拉角来旋转几何体" tabindex="-1"><a class="header-anchor" href="#使用欧拉角来旋转几何体"><span>使用欧拉角来旋转几何体</span></a></h2><p>我们先来看一下三维物体的旋转变换矩阵：</p><p>$$绕y轴旋转：R_{y}=\\left[\\begin{array}{ccc}\\cos \\alpha &amp; 0 &amp; \\sin \\alpha \\\\ 0 &amp; 1 &amp; 0 \\\\ -\\sin \\alpha &amp; 0 &amp; \\cos \\alpha\\end{array}\\right]$$</p><p>$$绕x轴旋转：R_{x}=\\left[\\begin{array}{ccc}1 &amp; 0 &amp; 0 \\\\ 0 &amp; \\cos \\beta &amp; -\\sin \\beta \\\\ 0 &amp; \\sin \\beta &amp; \\cos \\beta\\end{array}\\right]$$</p><p>$$绕z轴旋转：R_{z}=\\left[\\begin{array}{ccc}\\cos \\gamma &amp; -\\sin \\gamma &amp; 0 \\\\ \\sin \\gamma &amp; \\cos \\gamma &amp; 0 \\\\ 0 &amp; 0 &amp; 1\\end{array}\\right]$$</p><p>你会看到，我们使用了三个旋转矩阵$Ry、Rx、Rz$来描述三维的旋转变换。这三个旋转矩阵分别表示几何体绕$y$轴、$x$轴、$z$轴转过$α、β、γ$角。而这三个角，就叫做<strong>欧拉角。</strong></p><h3 id="什么是欧拉角" tabindex="-1"><a class="header-anchor" href="#什么是欧拉角"><span>什么是欧拉角？</span></a></h3><p>那什么是欧拉角呢？欧拉角是描述三维物体在空间中取向的标准数学模型，也是航空航天普遍采用的标准。对于在三维空间里的一个<a href="https://baike.baidu.com/item/%E5%8F%82%E7%85%A7%E7%B3%BB/1531482?fromtitle=%E5%8F%82%E8%80%83%E7%B3%BB&amp;fromid=823115&amp;fr=aladdin" target="_blank" rel="noopener noreferrer">参考系</a>，任何坐标系的取向，都可以用三个欧拉角来表示。</p><p>举个例子，下图中这个飞机的飞行姿态，可以由绕$x$轴的旋转角度（翻滚机身）、绕$y$轴的旋转角度（俯仰），以及绕$z$轴的旋转角度（偏航）来表示。</p><img src="https://static001.geekbang.org/resource/image/0e/7d/0e9540f7a6da478eb1a83d38e9d3d17d.jpeg" alt=""><p>也就是说，这个飞机的姿态可以由这三个欧拉角来确定。具体的表示公式就是$Rx、Ry、Rz$，这三个旋转矩阵相乘。</p><p>$$M=R_{y} \\times R_{x} \\times R_{z}$$</p><p>这里，我们是按照$Ry、Rx、Rz$的顺序相乘的。而$y-x-z$顺序有一个专属的名字叫做欧拉角的<strong>顺规</strong>，也就是说，我们现在采用的是$y-x-z$顺规。欧拉角有很多种不同的顺规表示方式，一共可以分两种：一种叫做<strong>Proper Euler angles</strong>，包含六种顺规，分别是$z-x-z、x-y-x、y-z-y、z-y-z、x-z-x、y-x-y$；另一种叫做<strong>Tait–Bryan angles</strong>，也包含六种顺规，分别是$x-y-z、y-z-x、z-x-y、x-z-y、z-y-x、 y-x-z$。</p><img src="https://static001.geekbang.org/resource/image/83/14/8328b6492bf69d900760fb8e9bfbe814.jpeg" alt=""><p>显然，我们采用的 $y-x-z$ 顺规，属于<strong>Tait–Bryan angles。</strong></p><p>不同的欧拉角顺规虽然表示方法不同，但它们本质上还是欧拉角，都可以表示三维几何空间中的任意取向。所以，我们在绘制三维图形的时候，使用任何一种表示法都可以。今天，我就以$y-x-z$顺规为例来接着讲。</p><p>采用$y-x-z$顺规的欧拉角之后，我们能得到如下的旋转矩阵结果：</p><img src="https://static001.geekbang.org/resource/image/fa/20/fa3c632502410545bf68672de376ee20.jpeg" alt=""><h3 id="如何使用欧拉角来旋转几何体" tabindex="-1"><a class="header-anchor" href="#如何使用欧拉角来旋转几何体"><span>如何使用欧拉角来旋转几何体？</span></a></h3><p>接下来，我们通过一个例子来实际体会，使用欧拉角旋转几何体的具体过程。</p><p>这里，我们还是用OGL框架。OGL的几何网格（Mesh）对象直接支持欧拉角，我们直接用对象的rotation属性就可以设置欧拉角，rotation属性是一个三维向量，它的$x、y、z$坐标就对应围绕$x、y、z$旋转的欧拉角。而且OGL框架默认的欧拉角顺规是$y-x-z$。</p><p>为了增加趣味性，我们不用立方体、圆柱体这些一般几何体，而是旋转一个飞机的几何模型。</p><p>在OGL中，我们可以加载JSON文件，来载入预先设计好的几何模型。</p><p>下面就是我先封装好的，一个加载几何模型的函数。这个函数会载入JSON文件的内容，然后根据其中的数据创建Geometry对象，并返回这个对象。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>async function loadModel(src) {</span></span>
<span class="line"><span>  const data = await (await fetch(src)).json();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  const geometry = new Geometry(gl, {</span></span>
<span class="line"><span>    position: {size: 3, data: new Float32Array(data.position)},</span></span>
<span class="line"><span>    uv: {size: 2, data: new Float32Array(data.uv)},</span></span>
<span class="line"><span>    normal: {size: 3, data: new Float32Array(data.normal)},</span></span>
<span class="line"><span>  });</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  return geometry;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，我们通过如下指令，就可以加载飞机几何体模型了。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>const geometry = await loadModel(&#39;../assets/airplane.json&#39;);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这里的assets/airplane.json是一份几何模型文件，内容类似于下面这样：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>{</span></span>
<span class="line"><span>  &amp;quot;position&amp;quot;: [0.752, 1.061, 0.0, 0.767...],</span></span>
<span class="line"><span>  &amp;quot;normal&amp;quot;: [0.975, 0.224, 0.0, 0.975...],</span></span>
<span class="line"><span>  &amp;quot;uv&amp;quot;: [0.745, 0.782, 0.705, 0.769...]</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中position、normal、uv是顶点数据，我们比较熟悉，分别是顶点坐标、法向量和纹理坐标。这样的数据一般是由设计工具直接生成的，不需要我们来计算。</p><p>接下来，我们加载飞机的纹理图片，同样要先封装一个加载图片纹理的函数。在函数里，我们用img元素加载图片，然后将图片赋给对应的纹理对象。函数代码如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>function loadTexture(src) {</span></span>
<span class="line"><span>  const texture = new Texture(gl);</span></span>
<span class="line"><span>  return new Promise((resolve) =&amp;gt; {</span></span>
<span class="line"><span>    const img = new Image();</span></span>
<span class="line"><span>    img.onload = () =&amp;gt; {</span></span>
<span class="line"><span>      texture.image = img;</span></span>
<span class="line"><span>      resolve(texture);</span></span>
<span class="line"><span>    };</span></span>
<span class="line"><span>    img.src = src;</span></span>
<span class="line"><span>  });</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着，我们就可以加载飞机的纹理图片了。具体操作如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>const texture = await loadTexture(&#39;../assets/airplane.jpg&#39;);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>然后，我们在片元着色器中，直接读取纹理图片中的颜色信息：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>precision highp float;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>uniform sampler2D tMap;</span></span>
<span class="line"><span>varying vec2 vUv;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>void main() {</span></span>
<span class="line"><span>  gl_FragColor = texture2D(tMap, vUv);</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，我们就能将元素渲染出来了。渲染指令如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>const program = new Program(gl, {</span></span>
<span class="line"><span>  vertex,</span></span>
<span class="line"><span>  fragment,</span></span>
<span class="line"><span>  uniforms: {</span></span>
<span class="line"><span>    tMap: {value: texture},</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>});</span></span>
<span class="line"><span>const mesh = new Mesh(gl, {geometry, program});</span></span>
<span class="line"><span>mesh.setParent(scene);</span></span>
<span class="line"><span>renderer.render({scene, camera});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最终，我们就能得到可以随意调整欧拉角的飞机模型了，效果如下图所示：</p><img src="https://static001.geekbang.org/resource/image/4b/c7/4b803c9b9b4114faeaaf68f177d952c7.gif" alt=""><h2 id="如何理解万向节锁" tabindex="-1"><a class="header-anchor" href="#如何理解万向节锁"><span>如何理解万向节锁？</span></a></h2><p>使用欧拉角来操作几何体的方向，虽然很简单，但是有一个小缺陷，这个缺陷叫做万向节锁(Gimbal Lock)。那万向节锁是什么呢，我们通过上面的例子来解释。</p><p>你会发现，当我们分别改变飞机的alpha、beta、theta值时，飞机会做出对应的姿态调整，包括偏航（改变alpha）、翻滚（改变beta）和俯仰（改变theta）。</p><p>但是如果我们将beta固定在正负90度，改变alpha和beta，我们会发现一个奇特的现象：</p><img src="https://static001.geekbang.org/resource/image/f6/06/f60deb3ec9096dab9bef78438c660e06.gif" alt=""><p>如上图所示，我们将beta设为90度，不管改变alpha还是改变theta，飞机都绕着$y$轴旋转，始终处于一个平面上。也就是说，本来飞机姿态有$x、y、z$三个自由度，现在$y$轴被固定了，只剩下两个自由度了，这就是万向节锁。</p><p>万向节锁，并不是真的“锁”住。而是在特定的欧拉角情况下，姿态调整的自由度丢失了。而且，只要是欧拉角，不管我们使用哪一种顺规，万向节锁都会存在。这该怎么解决呢？</p><p>要避免万向节锁的产生，我们只能使用其他的数学模型，来代替欧拉角描述几何体的旋转。其中一个比较好的模型是<strong>四元数</strong>（Quaternion）。</p><h2 id="使用四元数来旋转几何体" tabindex="-1"><a class="header-anchor" href="#使用四元数来旋转几何体"><span>使用四元数来旋转几何体</span></a></h2><p>四元数是一种高阶复数，一个四元数可以表示为：$q = w + xi + yj + zk$。其中，$i、j、k$是三个虚数单位，$w$是标量，它们满足$i^{2} = j^{2} = k^{2} = ijk = -1$。如果我们把 $xi + yj + zk$ 看成是一个向量，那么四元数$q$又可以表示为 $q=(v, w)$，其中$v$是一个三维向量。</p><p>我们可以用单位四元数来描述3D旋转。所谓单位四元数，就是其中的参数满足 $x^{2} + y^{2} + z^{2} + w^{2}= 1$。单位四元数对应的旋转矩阵如下：</p><p>$$<br><br> R(q)=\\left[\\begin{array}{ccc}<br><br> 1-2 y^{2}-2 z^{2} &amp; 2 x y-2 z w &amp; 2 x z+2 y w \\&lt;br&gt;<br> 2 x y+2 z w &amp; 1-2 x^{2}-2 z^{2} &amp; 2 y z-2 x w \\&lt;br&gt;<br> 2 x z-2 y w &amp; 2 y z+2 x w &amp; 1-2 x^{2}-2 y^{2}<br><br> \\end{array}\\right]<br><br> $$</p><p>这个旋转矩阵的<a href="https://krasjet.github.io/quaternion/quaternion.pdf" target="_blank" rel="noopener noreferrer">数学推导过程</a>比较复杂，我们只要记住这个公式就行了。</p><p>与欧拉角相比，四元数没有万向节死锁的问题。而且与旋转矩阵相比，四元数只需要四个分量就可以定义，模型上更加简洁。但是，四元数相对来说没有旋转矩阵和欧拉角那么直观。</p><h3 id="四元数与轴角" tabindex="-1"><a class="header-anchor" href="#四元数与轴角"><span>四元数与轴角</span></a></h3><p>四元数有一个常见的用途是用来处理<strong>轴角</strong>。所谓轴角，就是在三维空间中，给定一个由单位向量表示的轴，以及一个旋转角度$⍺$，以此来表示几何体绕该轴旋转$⍺$角。</p><p><a href="https://zinghd.gitee.io/Att-err3/" target="_blank" rel="noopener noreferrer"><img src="https://static001.geekbang.org/resource/image/29/85/29861c395af520f3906c4b7fe20db385.jpeg" alt="" title="轴角"></a></p><p>绕单位向量$u$旋转$⍺$角，对应的四元数可以表示为：$q = (usin(⍺/2), cos(⍺/2))$。接着，我们来看一个四元数处理轴角的例子。</p><p>还是以前面飞机为例，不过，这次我们将欧拉角换成轴角，实现一个updateAxis和updateQuaternion函数，分别更新轴和四元数。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>// 更新轴</span></span>
<span class="line"><span>function updateAxis() {</span></span>
<span class="line"><span>  const {x, y, z} = palette;</span></span>
<span class="line"><span>  const v = new Vec3(x, y, z).normalize().scale(10);</span></span>
<span class="line"><span>  points[1].copy(v);</span></span>
<span class="line"><span>  axis.updateGeometry();</span></span>
<span class="line"><span>  renderer.render({scene, camera});</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 更新四元数</span></span>
<span class="line"><span>function updateQuaternion(val) {</span></span>
<span class="line"><span>  const theta = 0.5 * val / 180 * Math.PI;</span></span>
<span class="line"><span>  const c = Math.cos(theta);</span></span>
<span class="line"><span>  const s = Math.sin(theta);</span></span>
<span class="line"><span>  const p = new Vec3().copy(points[1]).normalize();</span></span>
<span class="line"><span>  const q = new Quat(p.x * s, p.y * s, p.z * s, c);</span></span>
<span class="line"><span>  mesh.quaternion = q;</span></span>
<span class="line"><span>  renderer.render({scene, camera});</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，我们定义轴， 再把它显示出来。在OGL里面，我们可以通过Polyline对象来绘制轴。代码如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>const points = [</span></span>
<span class="line"><span>  new Vec3(0, 0, 0),</span></span>
<span class="line"><span>  new Vec3(0, 10, 0),</span></span>
<span class="line"><span>];</span></span>
<span class="line"><span></span></span>
<span class="line"><span>const axis = new Polyline(gl, {</span></span>
<span class="line"><span>  points,</span></span>
<span class="line"><span>  uniforms: {</span></span>
<span class="line"><span>    uColor: {value: new Color(&#39;#f00&#39;)},</span></span>
<span class="line"><span>    uThickness: {value: 3},</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>});</span></span>
<span class="line"><span>axis.mesh.setParent(scene);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么，随着我们修改轴或者修改旋转角，物体就会绕着轴旋转。效果如下图所示：</p><img src="https://static001.geekbang.org/resource/image/5f/7b/5fa4f4629db4aa3e0ec974c974a9637b.gif" alt=""><p>这样，我们就实现了用四元数让飞机沿着某个轴旋转的效果了。这其中最重要的一步，是要你理解怎么根据旋转轴和轴角来计算对应的四元数，也就是updateQuaternion函数里面做的事情。然后我们将这个更新后的四元数赋给飞机的mesh对象，就可以更新飞机的位置，实现飞机绕轴的旋转。我只在课程中给出了关键部分的代码，你可以去GitHub仓库里找到对应例子的完整代码。</p><h2 id="要点总结" tabindex="-1"><a class="header-anchor" href="#要点总结"><span>要点总结</span></a></h2><p>今天，我们学习了使用三维仿射变换，来移动和旋转3D物体。三维仿射变换在平移和缩放变换上的绘制方法，与二维仿射变换类似，只不过增加了一个z维度。但是对于旋转变换，三维放射变换就要复杂一些了，因为3D物体可以绕$x、y、z$轴中任意一个方向旋转。</p><p>那想要旋转三维几何体，我们可以使用欧拉角。欧拉角实际上就等于，绕$x、y、z$三个轴方向的旋转矩阵相乘，相乘的顺序就是欧拉角的顺规。</p><p>虽然顺规有很多种，但是选择不同的顺规，只是表达方式不一样，最终结果是等价的，都是欧拉角。那在这节课中，我们采用$y-x-z$顺规，它也是OGL库默认采用的。</p><p>但是欧拉角有一个万向节锁的问题，就是当$β$角旋转到正负90度的时候，我们无论怎么改变$α、γ$角，都只能让物体在一个水平面上运动。而且，只要我们使用欧拉角，就无法避免万向节锁的出现。</p><p>为了避免万向节锁，我们可以用四元数来旋转几何体。除此之外，四元数还有一个作用是可以用来构造轴角，让物体沿着某个具体的轴旋转。你可以回想一下我们刚刚实现的绕轴飞行的飞机。</p><h2 id="小试牛刀" tabindex="-1"><a class="header-anchor" href="#小试牛刀"><span>小试牛刀</span></a></h2><p>你可以试着利用放射变换，来实现一个旋转的3D陀螺效果。陀螺的形状可以用一个简单的圆锥体来表示。旋转的过程中，你可以让陀螺绕自身的中间轴旋转，也可以让它绕着三维空间某个固定的轴旋转。快来动手试一试吧。效果如下：</p><img src="https://static001.geekbang.org/resource/image/00/37/00bcb30bc90yy33a18640fdcf68d4a37.gif" alt=""><p>除了旋转的飞机和旋转的陀螺，你还能实现哪些旋转的物体呢？不如也把这篇文章分享给你的朋友们，一起来实现一下吧！</p><h2 id="源码" tabindex="-1"><a class="header-anchor" href="#源码"><span>源码</span></a></h2><p>课程中详细示例代码<a href="https://github.com/akira-cn/graphics/tree/master/3d-model" target="_blank" rel="noopener noreferrer">GitHub仓库</a></p><h2 id="推荐阅读" tabindex="-1"><a class="header-anchor" href="#推荐阅读"><span>推荐阅读</span></a></h2><p>[1] <a href="https://en.wikipedia.org/wiki/Euler_angles" target="_blank" rel="noopener noreferrer">进一步理解欧拉角</a><br><br> [2] <a href="https://en.wikipedia.org/wiki/Euler_angles" target="_blank" rel="noopener noreferrer">欧拉角的不同表示方法参考文档</a><br><br> [3] <a href="https://krasjet.github.io/quaternion/quaternion.pdf" target="_blank" rel="noopener noreferrer">四元数与三维旋转</a><br><br> [4] <a href="https://zhuanlan.zhihu.com/p/45404840" target="_blank" rel="noopener noreferrer">三维旋转：欧拉角、四元数、旋转矩阵、轴角之间的转换</a></p>`,94)]))}const c=s(p,[["render",r]]),o=JSON.parse('{"path":"/posts/%E8%B7%9F%E6%9C%88%E5%BD%B1%E5%AD%A6%E5%8F%AF%E8%A7%86%E5%8C%96/%E8%A7%86%E8%A7%89%E9%AB%98%E7%BA%A7%E7%AF%87/22%20_%20%E5%A6%82%E4%BD%95%E7%94%A8%E4%BB%BF%E5%B0%84%E5%8F%98%E6%8D%A2%E6%9D%A5%E7%A7%BB%E5%8A%A8%E5%92%8C%E6%97%8B%E8%BD%AC3D%E7%89%A9%E4%BD%93%EF%BC%9F.html","title":"22 _ 如何用仿射变换来移动和旋转3D物体？","lang":"zh-CN","frontmatter":{"description":"22 _ 如何用仿射变换来移动和旋转3D物体？ 你好，我是月影。 在前面的课程里，我们学习过使用仿射变换来移动和旋转二维图形。那在三维世界中，想要移动和旋转物体，我们也需要使用仿射变换。 但是，仿射变换该怎么从二维扩展到三维几何空间呢？今天，我们就来看一下三维仿射变换的基本方法，以及怎么对它进行优化。 三维仿射变换和二维仿射变换类似，也包括平移、旋转与...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/interview/posts/%E8%B7%9F%E6%9C%88%E5%BD%B1%E5%AD%A6%E5%8F%AF%E8%A7%86%E5%8C%96/%E8%A7%86%E8%A7%89%E9%AB%98%E7%BA%A7%E7%AF%87/22%20_%20%E5%A6%82%E4%BD%95%E7%94%A8%E4%BB%BF%E5%B0%84%E5%8F%98%E6%8D%A2%E6%9D%A5%E7%A7%BB%E5%8A%A8%E5%92%8C%E6%97%8B%E8%BD%AC3D%E7%89%A9%E4%BD%93%EF%BC%9F.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"22 _ 如何用仿射变换来移动和旋转3D物体？"}],["meta",{"property":"og:description","content":"22 _ 如何用仿射变换来移动和旋转3D物体？ 你好，我是月影。 在前面的课程里，我们学习过使用仿射变换来移动和旋转二维图形。那在三维世界中，想要移动和旋转物体，我们也需要使用仿射变换。 但是，仿射变换该怎么从二维扩展到三维几何空间呢？今天，我们就来看一下三维仿射变换的基本方法，以及怎么对它进行优化。 三维仿射变换和二维仿射变换类似，也包括平移、旋转与..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-16T11:19:38.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-16T11:19:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"22 _ 如何用仿射变换来移动和旋转3D物体？\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-08-16T11:19:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755343178000,"updatedTime":1755343178000,"contributors":[{"name":"bbhou","username":"bbhou","email":"1557740299@qq.com","commits":1,"url":"https://github.com/bbhou"}]},"readingTime":{"minutes":12.71,"words":3813},"filePathRelative":"posts/跟月影学可视化/视觉高级篇/22 _ 如何用仿射变换来移动和旋转3D物体？.md","localizedDate":"2025年8月16日","excerpt":"\\n<p><audio id=\\"audio\\" title=\\"22 | 如何用仿射变换来移动和旋转3D物体？\\" controls=\\"\\" preload=\\"none\\"><source id=\\"mp3\\" src=\\"https://static001.geekbang.org/resource/audio/73/a7/73d1bbb48920fb81221f3d4512def1a7.mp3\\"></audio></p>\\n<p>你好，我是月影。</p>\\n<p>在前面的课程里，我们学习过使用仿射变换来移动和旋转二维图形。那在三维世界中，想要移动和旋转物体，我们也需要使用仿射变换。</p>\\n<p>但是，仿射变换该怎么从二维扩展到三维几何空间呢？今天，我们就来看一下三维仿射变换的基本方法，以及怎么对它进行优化。</p>","autoDesc":true}');export{c as comp,o as data};
