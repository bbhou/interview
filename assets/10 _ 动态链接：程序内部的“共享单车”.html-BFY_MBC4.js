import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as e,o as i}from"./app-d8EKP-K0.js";const p={};function l(t,s){return i(),a("div",null,s[0]||(s[0]=[e(`<h1 id="_10-动态链接-程序内部的-共享单车" tabindex="-1"><a class="header-anchor" href="#_10-动态链接-程序内部的-共享单车"><span>10 _ 动态链接：程序内部的“共享单车”</span></a></h1><p><audio id="audio" title="10 | 动态链接：程序内部的“共享单车”" controls="" preload="none"><source id="mp3" src="https://static001.geekbang.org/resource/audio/4c/f7/4cbe011e6435ea6f292bbd963e9bd6f7.mp3"></audio></p><p>我们之前讲过，程序的链接，是把对应的不同文件内的代码段，合并到一起，成为最后的可执行文件。这个链接的方式，让我们在写代码的时候做到了“复用”。同样的功能代码只要写一次，然后提供给很多不同的程序进行链接就行了。</p><p>这么说来，“链接”其实有点儿像我们日常生活中的<strong>标准化、模块化</strong>生产。我们有一个可以生产标准螺帽的生产线，就可以生产很多个不同的螺帽。只要需要螺帽，我们都可以通过<strong>链接</strong>的方式，去<strong>复制</strong>一个出来，放到需要的地方去，大到汽车，小到信箱。</p><p>但是，如果我们有很多个程序都要通过装载器装载到内存里面，那里面链接好的同样的功能代码，也都需要再装载一遍，再占一遍内存空间。这就好比，假设每个人都有骑自行车的需要，那我们给每个人都生产一辆自行车带在身边，固然大家都有自行车用了，但是马路上肯定会特别拥挤。</p><img src="https://static001.geekbang.org/resource/image/09/51/092dfd81e3cc45ea237bb85557bbfa51.jpg" alt=""><h2 id="链接可以分动、静-共享运行省内存" tabindex="-1"><a class="header-anchor" href="#链接可以分动、静-共享运行省内存"><span>链接可以分动、静，共享运行省内存</span></a></h2><p>我们上一节解决程序装载到内存的时候，讲了很多方法。说起来，最根本的问题其实就是<strong>内存空间不够用</strong>。如果我们能够让同样功能的代码，在不同的程序里面，不需要各占一份内存空间，那该有多好啊！就好比，现在马路上的共享单车，我们并不需要给每个人都造一辆自行车，只要马路上有这些单车，谁需要的时候，直接通过手机扫码，都可以解锁骑行。</p><p>这个思路就引入一种新的链接方法，叫作<strong>动态链接</strong>（Dynamic Link）。相应的，我们之前说的合并代码段的方法，就是<strong>静态链接</strong>（Static Link）。</p><p>在动态链接的过程中，我们想要“链接”的，不是存储在硬盘上的目标文件代码，而是加载到内存中的<strong>共享库</strong>（Shared Libraries）。顾名思义，这里的共享库重在“共享“这两个字。</p><p>这个加载到内存中的共享库会被很多个程序的指令调用到。在Windows下，这些共享库文件就是.dll文件，也就是Dynamic-Link Libary（DLL，动态链接库）。在Linux下，这些共享库文件就是.so文件，也就是Shared Object（一般我们也称之为动态链接库）。这两大操作系统下的文件名后缀，一个用了“动态链接”的意思，另一个用了“共享”的意思，正好覆盖了两方面的含义。</p><img src="https://static001.geekbang.org/resource/image/29/60/2980d241d3c7cbfa3724cb79b801d160.jpg" alt=""><h2 id="地址无关很重要-相对地址解烦恼" tabindex="-1"><a class="header-anchor" href="#地址无关很重要-相对地址解烦恼"><span>地址无关很重要，相对地址解烦恼</span></a></h2><p>不过，要想要在程序运行的时候共享代码，也有一定的要求，就是这些机器码必须是“<strong>地址无关</strong>”的。也就是说，我们编译出来的共享库文件的指令代码，是地址无关码（Position-Independent Code）。换句话说就是，这段代码，无论加载在哪个内存地址，都能够正常执行。如果不是这样的代码，就是地址相关的代码。</p><p>如果还不明白，我给你举一个生活中的例子。如果我们有一个骑自行车的程序，要“前进500米，左转进入天安门广场，再前进500米”。它在500米之后要到天安门广场了，这就是地址相关的。如果程序是“前进500米，左转，再前进500米”，无论你在哪里都可以骑车走这1000米，没有具体地点的限制，这就是地址无关的。</p><p>你可以想想，大部分函数库其实都可以做到地址无关，因为它们都接受特定的输入，进行确定的操作，然后给出返回结果就好了。无论是实现一个向量加法，还是实现一个打印的函数，这些代码逻辑和输入的数据在内存里面的位置并不重要。</p><p>而常见的地址相关的代码，比如绝对地址代码（Absolute Code）、利用重定位表的代码等等，都是地址相关的代码。你回想一下我们之前讲过的重定位表。在程序链接的时候，我们就把函数调用后要跳转访问的地址确定下来了，这意味着，如果这个函数加载到一个不同的内存地址，跳转就会失败。</p><img src="https://static001.geekbang.org/resource/image/8c/4a/8cab516a92fd3d7e951887808597094a.jpg" alt=""><p>对于所有动态链接共享库的程序来讲，虽然我们的共享库用的都是同一段物理内存地址，但是在不同的应用程序里，它所在的虚拟内存地址是不同的。我们没办法、也不应该要求动态链接同一个共享库的不同程序，必须把这个共享库所使用的虚拟内存地址变成一致。如果这样的话，我们写的程序就必须明确地知道内部的内存地址分配。</p><p>那么问题来了，我们要怎么样才能做到，动态共享库编译出来的代码指令，都是地址无关码呢？</p><p>动态代码库内部的变量和函数调用都很容易解决，我们只需要使用<strong>相对地址</strong>（Relative Address）就好了。各种指令中使用到的内存地址，给出的不是一个绝对的地址空间，而是一个相对于当前指令偏移量的内存地址。因为整个共享库是放在一段连续的虚拟内存地址中的，无论装载到哪一段地址，不同指令之间的相对地址都是不变的。</p><h2 id="plt和got-动态链接的解决方案" tabindex="-1"><a class="header-anchor" href="#plt和got-动态链接的解决方案"><span>PLT和GOT，动态链接的解决方案</span></a></h2><p>要实现动态链接共享库，也并不困难，和前面的静态链接里的符号表和重定向表类似，还是和前面一样，我们还是拿出一小段代码来看一看。</p><p>首先，lib.h 定义了动态链接库的一个函数 show_me_the_money。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>// lib.h</span></span>
<span class="line"><span>#ifndef LIB_H</span></span>
<span class="line"><span>#define LIB_H</span></span>
<span class="line"><span></span></span>
<span class="line"><span>void show_me_the_money(int money);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>#endif</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>lib.c包含了lib.h的实际实现。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>// lib.c</span></span>
<span class="line"><span>#include &amp;lt;stdio.h&amp;gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>void show_me_the_money(int money)</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>    printf(&amp;quot;Show me USD %d from lib.c \\n&amp;quot;, money);</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，show_me_poor.c 调用了 lib 里面的函数。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>// show_me_poor.c</span></span>
<span class="line"><span>#include &amp;quot;lib.h&amp;quot;</span></span>
<span class="line"><span>int main()</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>    int money = 5;</span></span>
<span class="line"><span>    show_me_the_money(money);</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，我们把 lib.c 编译成了一个动态链接库，也就是 .so 文件。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>$ gcc lib.c -fPIC -shared -o lib.so</span></span>
<span class="line"><span>$ gcc -o show_me_poor show_me_poor.c ./lib.so</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>你可以看到，在编译的过程中，我们指定了一个 <strong>-fPIC</strong> 的参数。这个参数其实就是Position Independent Code的意思，也就是我们要把这个编译成一个地址无关代码。</p><p>然后，我们再通过gcc编译show_me_poor 动态链接了lib.so的可执行文件。在这些操作都完成了之后，我们把show_me_poor这个文件通过objdump出来看一下。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>$ objdump -d -M intel -S show_me_poor</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>……</span></span>
<span class="line"><span>0000000000400540 &amp;lt;show_me_the_money@plt-0x10&amp;gt;:</span></span>
<span class="line"><span>  400540:       ff 35 12 05 20 00       push   QWORD PTR [rip+0x200512]        # 600a58 &amp;lt;_GLOBAL_OFFSET_TABLE_+0x8&amp;gt;</span></span>
<span class="line"><span>  400546:       ff 25 14 05 20 00       jmp    QWORD PTR [rip+0x200514]        # 600a60 &amp;lt;_GLOBAL_OFFSET_TABLE_+0x10&amp;gt;</span></span>
<span class="line"><span>  40054c:       0f 1f 40 00             nop    DWORD PTR [rax+0x0]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>0000000000400550 &amp;lt;show_me_the_money@plt&amp;gt;:</span></span>
<span class="line"><span>  400550:       ff 25 12 05 20 00       jmp    QWORD PTR [rip+0x200512]        # 600a68 &amp;lt;_GLOBAL_OFFSET_TABLE_+0x18&amp;gt;</span></span>
<span class="line"><span>  400556:       68 00 00 00 00          push   0x0</span></span>
<span class="line"><span>  40055b:       e9 e0 ff ff ff          jmp    400540 &amp;lt;_init+0x28&amp;gt;</span></span>
<span class="line"><span>……</span></span>
<span class="line"><span>0000000000400676 &amp;lt;main&amp;gt;:</span></span>
<span class="line"><span>  400676:       55                      push   rbp</span></span>
<span class="line"><span>  400677:       48 89 e5                mov    rbp,rsp</span></span>
<span class="line"><span>  40067a:       48 83 ec 10             sub    rsp,0x10</span></span>
<span class="line"><span>  40067e:       c7 45 fc 05 00 00 00    mov    DWORD PTR [rbp-0x4],0x5</span></span>
<span class="line"><span>  400685:       8b 45 fc                mov    eax,DWORD PTR [rbp-0x4]</span></span>
<span class="line"><span>  400688:       89 c7                   mov    edi,eax</span></span>
<span class="line"><span>  40068a:       e8 c1 fe ff ff          call   400550 &amp;lt;show_me_the_money@plt&amp;gt;</span></span>
<span class="line"><span>  40068f:       c9                      leave  </span></span>
<span class="line"><span>  400690:       c3                      ret    </span></span>
<span class="line"><span>  400691:       66 2e 0f 1f 84 00 00    nop    WORD PTR cs:[rax+rax*1+0x0]</span></span>
<span class="line"><span>  400698:       00 00 00 </span></span>
<span class="line"><span>  40069b:       0f 1f 44 00 00          nop    DWORD PTR [rax+rax*1+0x0]</span></span>
<span class="line"><span>……</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们还是只关心整个可执行文件中的一小部分内容。你应该可以看到，在main函数调用show_me_the_money的函数的时候，对应的代码是这样的：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>call   400550 &amp;lt;show_me_the_money@plt&amp;gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这里后面有一个@plt的关键字，代表了我们需要从PLT，也就是<strong>程序链接表</strong>（Procedure Link Table）里面找要调用的函数。对应的地址呢，则是400550这个地址。</p><p>那当我们把目光挪到上面的 400550 这个地址，你又会看到里面进行了一次跳转，这个跳转指定的跳转地址，你可以在后面的注释里面可以看到，GLOBAL_OFFSET_TABLE+0x18。这里的GLOBAL_OFFSET_TABLE，就是我接下来要说的全局偏移表。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>  400550:       ff 25 12 05 20 00       jmp    QWORD PTR [rip+0x200512]        # 600a68 &amp;lt;_GLOBAL_OFFSET_TABLE_+0x18&amp;gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在动态链接对应的共享库，我们在共享库的data section里面，保存了一张<strong>全局偏移表</strong>（GOT，Global Offset Table）。**虽然共享库的代码部分的物理内存是共享的，但是数据部分是各个动态链接它的应用程序里面各加载一份的。**所有需要引用当前共享库外部的地址的指令，都会查询GOT，来找到当前运行程序的虚拟内存里的对应位置。而GOT表里的数据，则是在我们加载一个个共享库的时候写进去的。</p><p>不同的进程，<a href="http://xn--lib-m33e153g5grxfcz72e.so" target="_blank" rel="noopener noreferrer">调用同样的lib.so</a>，各自GOT里面指向最终加载的动态链接库里面的虚拟内存地址是不同的。</p><p>这样，虽然不同的程序调用的同样的动态库，各自的内存地址是独立的，调用的又都是同一个动态库，但是不需要去修改动态库里面的代码所使用的地址，而是各个程序各自维护好自己的GOT，能够找到对应的动态库就好了。</p><img src="https://static001.geekbang.org/resource/image/11/c8/1144d3a2d4f3f4f87c349a93429805c8.jpg" alt=""><p>我们的GOT表位于共享库自己的数据段里。GOT表在内存里和对应的代码段位置之间的偏移量，始终是确定的。这样，我们的共享库就是地址无关的代码，对应的各个程序只需要在物理内存里面加载同一份代码。而我们又要通过各个可执行程序在加载时，生成的各不相同的GOT表，来找到它需要调用到的外部变量和函数的地址。</p><p>这是一个典型的、不修改代码，而是通过修改“<strong>地址数据</strong>”来进行关联的办法。它有点像我们在C语言里面用函数指针来调用对应的函数，并不是通过预先已经确定好的函数名称来调用，而是利用当时它在内存里面的动态地址来调用。</p><h2 id="总结延伸" tabindex="-1"><a class="header-anchor" href="#总结延伸"><span>总结延伸</span></a></h2><p>这一讲，我们终于在静态链接和程序装载之后，利用动态链接把我们的内存利用到了极致。同样功能的代码生成的共享库，我们只要在内存里面保留一份就好了。这样，我们不仅能够做到代码在开发阶段的复用，也能做到代码在运行阶段的复用。</p><p>实际上，在进行Linux下的程序开发的时候，我们一直会用到各种各样的动态链接库。C语言的标准库就在1MB以上。我们撰写任何一个程序可能都需要用到这个库，常见的Linux服务器里，/usr/bin下面就有上千个可执行文件。如果每一个都把标准库静态链接进来的，几GB乃至几十GB的磁盘空间一下子就用出去了。如果我们服务端的多进程应用要开上千个进程，几GB的内存空间也会一下子就用出去了。这个问题在过去计算机的内存较少的时候更加显著。</p><p>通过动态链接这个方式，可以说彻底解决了这个问题。就像共享单车一样，如果仔细经营，是一个很有社会价值的事情，但是如果粗暴地把它变成无限制地复制生产，给每个人造一辆，只会在系统内制造大量无用的垃圾。</p><p>过去的05～09这五讲里，我们已经把程序怎么从源代码变成指令、数据，并装载到内存里面，由CPU一条条执行下去的过程讲完了。希望你能有所收获，对于一个程序是怎么跑起来的，有了一个初步的认识。</p><h2 id="推荐阅读" tabindex="-1"><a class="header-anchor" href="#推荐阅读"><span>推荐阅读</span></a></h2><p>想要更加深入地了解动态链接，我推荐你可以读一读《程序员的自我修养：链接、装载和库》的第7章，里面深入地讲解了，动态链接里程序内的数据布局和对应数据的加载关系。</p><h2 id="课后思考" tabindex="-1"><a class="header-anchor" href="#课后思考"><span>课后思考</span></a></h2><p>像动态链接这样通过修改“地址数据”来进行间接跳转，去调用一开始不能确定位置代码的思路，你在应用开发中使用过吗？</p><p>欢迎你在留言区写下你的思考和疑问，和大家一起探讨。你也可以把今天的文章分享给你朋友，和他一起学习和进步。</p>`,56)]))}const c=n(p,[["render",l]]),o=JSON.parse('{"path":"/posts/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E5%8E%9F%E7%90%86%E7%AF%87%EF%BC%9A%E6%8C%87%E4%BB%A4%E5%92%8C%E8%BF%90%E7%AE%97/10%20_%20%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%EF%BC%9A%E7%A8%8B%E5%BA%8F%E5%86%85%E9%83%A8%E7%9A%84%E2%80%9C%E5%85%B1%E4%BA%AB%E5%8D%95%E8%BD%A6%E2%80%9D.html","title":"10 _ 动态链接：程序内部的“共享单车”","lang":"zh-CN","frontmatter":{"description":"10 _ 动态链接：程序内部的“共享单车” 我们之前讲过，程序的链接，是把对应的不同文件内的代码段，合并到一起，成为最后的可执行文件。这个链接的方式，让我们在写代码的时候做到了“复用”。同样的功能代码只要写一次，然后提供给很多不同的程序进行链接就行了。 这么说来，“链接”其实有点儿像我们日常生活中的标准化、模块化生产。我们有一个可以生产标准螺帽的生产线...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/interview/posts/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E5%8E%9F%E7%90%86%E7%AF%87%EF%BC%9A%E6%8C%87%E4%BB%A4%E5%92%8C%E8%BF%90%E7%AE%97/10%20_%20%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%EF%BC%9A%E7%A8%8B%E5%BA%8F%E5%86%85%E9%83%A8%E7%9A%84%E2%80%9C%E5%85%B1%E4%BA%AB%E5%8D%95%E8%BD%A6%E2%80%9D.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"10 _ 动态链接：程序内部的“共享单车”"}],["meta",{"property":"og:description","content":"10 _ 动态链接：程序内部的“共享单车” 我们之前讲过，程序的链接，是把对应的不同文件内的代码段，合并到一起，成为最后的可执行文件。这个链接的方式，让我们在写代码的时候做到了“复用”。同样的功能代码只要写一次，然后提供给很多不同的程序进行链接就行了。 这么说来，“链接”其实有点儿像我们日常生活中的标准化、模块化生产。我们有一个可以生产标准螺帽的生产线..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-16T11:19:38.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-16T11:19:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"10 _ 动态链接：程序内部的“共享单车”\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-08-16T11:19:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755343178000,"updatedTime":1755343178000,"contributors":[{"name":"bbhou","username":"bbhou","email":"1557740299@qq.com","commits":1,"url":"https://github.com/bbhou"}]},"readingTime":{"minutes":11.29,"words":3386},"filePathRelative":"posts/深入浅出计算机组成原理/原理篇：指令和运算/10 _ 动态链接：程序内部的“共享单车”.md","localizedDate":"2025年8月16日","excerpt":"\\n<p><audio id=\\"audio\\" title=\\"10 | 动态链接：程序内部的“共享单车”\\" controls=\\"\\" preload=\\"none\\"><source id=\\"mp3\\" src=\\"https://static001.geekbang.org/resource/audio/4c/f7/4cbe011e6435ea6f292bbd963e9bd6f7.mp3\\"></audio></p>\\n<p>我们之前讲过，程序的链接，是把对应的不同文件内的代码段，合并到一起，成为最后的可执行文件。这个链接的方式，让我们在写代码的时候做到了“复用”。同样的功能代码只要写一次，然后提供给很多不同的程序进行链接就行了。</p>","autoDesc":true}');export{c as comp,o as data};
