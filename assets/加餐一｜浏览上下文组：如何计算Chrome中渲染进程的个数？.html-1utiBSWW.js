import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,a as r,o as p}from"./app-d8EKP-K0.js";const t={};function s(i,e){return p(),n("div",null,e[0]||(e[0]=[r(`<h1 id="加餐一-浏览上下文组-如何计算chrome中渲染进程的个数" tabindex="-1"><a class="header-anchor" href="#加餐一-浏览上下文组-如何计算chrome中渲染进程的个数"><span>加餐一｜浏览上下文组：如何计算Chrome中渲染进程的个数？</span></a></h1><p><audio id="audio" title="加餐一｜浏览上下文组：如何计算Chrome中渲染进程的个数？" controls="" preload="none"><source id="mp3" src="https://static001.geekbang.org/resource/audio/cd/59/cda88e0850cd772520441adf9264e159.mp3"></audio></p><p>你好，我是李兵。</p><p>在留言区，经常有朋友问到如何计算Chrome中渲染进程个数的问题，那么今天我就来完整地解答这个问题。</p><p>在前面“<a href="https://time.geekbang.org/column/article/117637" target="_blank" rel="noopener noreferrer">04 | 导航流程</a>”这一讲中我们介绍过了，在默认情况下，如果打开一个标签页，那么浏览器会默认为其创建一个渲染进程。不过我们在“<a href="https://time.geekbang.org/column/article/117637" target="_blank" rel="noopener noreferrer">04 | 导航流程</a>”中还介绍了同一站点的概念，如果从一个标签页中打开了另一个新标签页，当新标签页和当前标签页属于同一站点的话，那么新标签页会复用当前标签页的渲染进程。</p><p>具体地讲，如果我从极客邦(<a href="http://www.geekbang.org" target="_blank" rel="noopener noreferrer">www.geekbang.org</a>) 的标签页中打开新的极客时间(<a href="http://time.geekbang.org" target="_blank" rel="noopener noreferrer">time.geekbang.org</a>) 标签页，由于这两个标签页属于同一站点(相同协议、相同根域名)，所以他们会共用同一个渲染进程。你可以看下面这张Chrome的任务管理器截图：</p><img src="https://static001.geekbang.org/resource/image/f8/5c/f87168a79df0b87a08b243937f53545c.png" alt=""><p>观察上图，我们可以看到，极客邦官网和极客时间标签页都共用同一个渲染进程，该进程ID是84748。</p><p>不过如果我们分别打开这两个标签页，比如先打开极客邦的标签页，然后再新建一个标签页，再在这个新标签页中打开极客时间，这时候我们可以看到这两个标签页分别使用了两个不同的渲染进程。你可以参看下图：</p><img src="https://static001.geekbang.org/resource/image/34/f9/34815ee3a8d5057d39ebb6f871fbf0f9.jpg" alt=""><p>那么到了这里，你一定会很好奇，既然都是同一站点，为什么从A标签页中打开B标签页，就会使用同一个渲染进程，而分别打开这两个标签页，又会分别使用不同的渲染进程？</p><h2 id="标签页之间的连接" tabindex="-1"><a class="header-anchor" href="#标签页之间的连接"><span>标签页之间的连接</span></a></h2><p>要搞清楚这个问题，我们要先来分析下浏览器标签页之间的连接关系。</p><p>我们知道，浏览器标签页之间是可以通过JavaScript脚本来连接的，通常情况下有如下几种连接方式：</p><p><strong>第一种是通过<code>&amp;lt;a&amp;gt;</code>标签来和新标签建立连接</strong>，这种方式我们最熟悉，比如下面这行代码是从极客邦标签页里面拷贝过来的：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&amp;lt;a  href=&amp;quot;https://time.geekbang.org/&amp;quot; target=&amp;quot;_blank&amp;quot; class=&amp;quot;&amp;quot;&amp;gt;极客时间&amp;lt;/a&amp;gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这是从极客邦官网中打开极客时间的链接，点击该链接会打开新的极客时间标签页，新标签页中的window.opener的值就是指向极客邦标签页中的window，这样就可以在新的极客时间标签页中通过opener来操作上个极客邦的标签页了。这样我们可以说，这两个标签页是有连接的。</p><p>另外，<strong>还可以通过JavaScript中的window.open方法来和新标签页建立连接</strong>，演示代码如下所示：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>new_window = window.open(&amp;quot;http://time.geekbang.org&amp;quot;)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>通过上面这种方式，可以在当前标签页中通过new_window来控制新标签页，还可以在新标签页中通过window.opener来控制当前标签页。所以我们也可以说，如果从A标签页中通过window.open的方式打开B标签页，那么A和B标签页也是有连接的。</p><p>其实通过上述两种方式打开的新标签页，不论这两个标签页是否属于同一站点，他们之间都能通过opener来建立连接，所以他们之间是有联系的。在WhatWG规范中，把这一类具有相互连接关系的标签页称为<strong>浏览上下文组( browsing context group)。</strong></p><p>既然提到浏览上下文组，就有必要提下浏览上下文，通常情况下，我们把一个标签页所包含的内容，诸如window对象，历史记录，滚动条位置等信息称为浏览上下文。这些通过脚本相互连接起来的浏览上下文就是浏览上下文组。如果你有兴趣，可以参开下<a href="https://html.spec.whatwg.org/multipage/browsers.html#groupings-of-browsing-contexts" target="_blank" rel="noopener noreferrer">规范文档</a>。</p><p>也就是说，如果在极客邦的标签页中，通过链接打开了多个新的标签页，不管这几个新的标签页是否是同一站点，他们都和极客邦的标签页构成了浏览上下文组，因为这些标签页中的opener都指向了极客邦标签页。</p><p><strong>Chrome浏览器会将浏览上下文组中属于同一站点的标签分配到同一个渲染进程中</strong>，这是因为如果一组标签页，既在同一个浏览上下文组中，又属于同一站点，那么它们可能需要在对方的标签页中执行脚本。因此，它们必须运行在同一渲染进程中。</p><p>现在我们清楚了浏览器是怎么分配渲染进程的了，接下来我们就可以来分析文章开头提的那个问题了：</p><blockquote></blockquote><p>既然都是同一站点，为什么从A标签页中打开B标签页，就会使用同一个渲染进程？ 而分别打开这两个标签页，又会分别使用不同的渲染进程？</p><p>首先来看第一种，在极客邦标签页内部通过链接打开极客时间标签页，那么极客时间标签页和极客邦标签页属于同一个浏览上下文组，且它们属于同一站点，所以浏览器会将它们分配到同一个渲染进程之中。</p><p>而第二种情况就简单多了，因为第二个标签页中并没有第一个标签页中的任何信息，第一个标签页也不包含任何第二个标签页中的信息，所以他们不属于同一个浏览上下文组，因此即便他们属于同一站点，也不会运行在同一个渲染进程之中。下面是我画的计算标签页的流程图，你可以参考下：</p><img src="https://static001.geekbang.org/resource/image/cb/b6/cbc89902f5ce12420101246c4a227cb6.jpg" alt=""><h2 id="一个-例外" tabindex="-1"><a class="header-anchor" href="#一个-例外"><span>一个“例外”</span></a></h2><p>好了，现在我们清楚了Chrome浏览器为标签页分配渲染进程的策略了：</p><ol><li><strong>如果两个标签页都位于同一个浏览上下文组，且属于同一站点，那么这两个标签页会被浏览器分配到同一个渲染进程中。</strong></li><li><strong>如果这两个条件不能同时满足，那么这两个标签页会分别使用不同的渲染进程来渲染。</strong></li></ol><p>现在你可以想一下，如果从A标签页中打开B标签页，那我们能肯定A标签页和B标签页属于同一浏览上下文组吗？</p><p>答案是“不能”，下面我们就来看个例子，在“<a href="https://time.geekbang.org/column/article/117637" target="_blank" rel="noopener noreferrer">04 | 导航流程</a>”的留言区中，ID为“芳华年月”的朋友就提出了这样的一个问题：</p><blockquote></blockquote><p>请问老师，<a href="https://linkmarket.aliyun.com" target="_blank" rel="noopener noreferrer">https://linkmarket.aliyun.com</a> 内新开的标签页都是新开一个渲染进程，能帮忙解释下吗?</p><p>我们先来复现下“芳华年月”所描述的现象，首先打开linkmarket.aliyun.com这个标签页，再在这个标签页中随便点击两个链接，然后就打开了两个新的标签页了，如下图所示：</p><img src="https://static001.geekbang.org/resource/image/87/44/8727a2cef7bc8bc2023a37d6368bb344.png" alt=""><p>我通过A标签页中的链接打开了两个新标签页，B和C，而且我们也可以看出来，A、B、C三个标签页都属于同一站点，正常情况下，它们应该共用同一个渲染进程，不过通过上图我们可以看出来，A、B、C三个标签页分别使用了三个不同的渲染进程。</p><p>既然属于同一站点，又不在同一个渲染进程中，所以可以推断这三个标签页不属于同一个浏览上下文组，那么我们接下来的分析思路就很清晰了：</p><ol><li>首先验证这三个标签页是不是真的不在同一个浏览上下文组中；</li><li>然后再分析它们为什么不在同一浏览上下文组。</li></ol><p>为了验证猜测，我们可以通过控制台，来看看B标签页和C标签标签页的opener的值，结果发现这两个标签页中的opener的值都是null，这就确定了B、C标签页和A标签页没有连接关系，当然也就不属于同一浏览上下文组了。</p><p>验证了猜测，接下来的我们就是来查查，阿里的这个站点是不是采用了什么特别的手段，移除了这两个标签页之间的连接关系。</p><p>我们可以看看实现链接的HTML文件，如下图所示：<br><br><img src="https://static001.geekbang.org/resource/image/ec/7e/ec3c6414a0e6eff3a04cfa7ec9486f7e.jpg" alt=""></p><p>通过上图，我们可以发现，a链接的rel属性值都使用了noopener 和 noreferrer，通过noopener，我们能猜测得到这两个值是让被链接的标签页和当前标签页不要产生连接关系。</p><p>通常，将noopener的值引入rel属性中，就是告诉浏览器通过这个链接打开的标签页中的opener值设置为null，引入noreferrer是告诉浏览器，新打开的标签页不要有引用关系。</p><p>好了，到了这里我们就知道了，通过linkmarket.aliyun.com标签页打开新的标签页要使用单独的一个进程，是因为使用了rel= noopener的属性，所以新打开的标签页和现在的标签页就没有了引用关系，当然它们也就不属于同一浏览上下文组了。这也同时解答了“芳华年月”所提出的问题。</p><h2 id="站点隔离" tabindex="-1"><a class="header-anchor" href="#站点隔离"><span>站点隔离</span></a></h2><p>上面我们都是基于标签页来分析渲染进程的，不过我在“<a href="https://time.geekbang.org/column/article/155183" target="_blank" rel="noopener noreferrer">35｜安全沙箱</a>”中介绍过了，目前Chrome浏览器已经默认实现了站点隔离的功能，这意味着标签页中的iframe也会遵守同一站点的分配原则，如果标签页中的iframe和标签页是同一站点，并且有连接关系，那么标签页依然会和当前标签页运行在同一个渲染进程中，如果iframe和标签页不属于同一站点，那么iframe会运行在单独的渲染进程中。</p><p>我们先来看下面这个具体的例子吧：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&amp;lt;head&amp;gt;</span></span>
<span class="line"><span>    &amp;lt;title&amp;gt;站点隔离:demo&amp;lt;/title&amp;gt;</span></span>
<span class="line"><span>    &amp;lt;style&amp;gt;</span></span>
<span class="line"><span>        iframe {</span></span>
<span class="line"><span>            width: 800px;</span></span>
<span class="line"><span>            height: 300px;</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    &amp;lt;/style&amp;gt;</span></span>
<span class="line"><span>&amp;lt;/head&amp;gt;</span></span>
<span class="line"><span>&amp;lt;body&amp;gt;</span></span>
<span class="line"><span>    &amp;lt;div&amp;gt;&amp;lt;iframe src=&amp;quot;iframe.html&amp;quot;&amp;gt;&amp;lt;/iframe&amp;gt;&amp;lt;/div&amp;gt;</span></span>
<span class="line"><span>    &amp;lt;div&amp;gt;&amp;lt;iframe src=&amp;quot;https://www.infoq.cn/&amp;quot;&amp;gt;&amp;lt;/iframe&amp;gt;&amp;lt;/div&amp;gt;</span></span>
<span class="line"><span>    &amp;lt;div&amp;gt;&amp;lt;iframe src=&amp;quot;https://time.geekbang.org/&amp;quot;&amp;gt;&amp;lt;/iframe&amp;gt;&amp;lt;/div&amp;gt;</span></span>
<span class="line"><span>    &amp;lt;div&amp;gt;&amp;lt;iframe src=&amp;quot;https://www.geekbang.org/&amp;quot;&amp;gt;&amp;lt;/iframe&amp;gt;&amp;lt;/div&amp;gt;</span></span>
<span class="line"><span>&amp;lt;/body&amp;gt;</span></span>
<span class="line"><span>&amp;lt;/html&amp;gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在Chrome浏览器中打开上面这个标签页，然后观察Chrome的任务管理，我们会发现这个标签页使用了四个渲染进程，如下图所示：</p><img src="https://static001.geekbang.org/resource/image/47/1d/4762ab5be219271ff3e26c1f4c4f521d.png" alt=""><p>结合上图和HTML代码，我们可以发现，由于InfoQ、极客邦两个iframe与父标签页不属于同一站点，所以它们会被分配到不同的渲染进程中，而iframe.html和源标签页属于同一站点，所以它会和源标签页运行在同一个渲染进程中。下面是我画的计算iframe使用渲染进程数目的流程图，你可以对照着参考下：</p><img src="https://static001.geekbang.org/resource/image/a1/0e/a13f917f227e85102998b3bfe38b4e0e.jpg" alt=""><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>好了，本节的内容就介绍到这里，下面我来总结下本文的主要内容：</p><p>首先我们使用了两种不同的方式打开两个标签页，第一种是从A标签页中通过链接打开了B标签页，第二种是分别打开A和B标签页，这两种情况下的A和B都属于同一站点。</p><p>通过Chrome的任务管理器我们发现，虽然A标签页和B标签页都属于同一站点，不过通过第一种方式打开的A标签页和B标签页会共用同一个渲染进程，而通过第二种方式打开的两个标签页却分别使用了两个不同的渲染进程。</p><p>这是因为，使用同一个渲染进程需要满足两个条件：首先A标签页和B标签页属于同一站点，其次A标签页和B标签页需要有连接关系。</p><p>接着，我们分析了一个“例外”，如果在链接中加入了rel=noopener属性，那么通过链接打开的新标签页和源标签页之间就不会建立连接关系了。</p><p>最后我们还分析了站点隔离对渲染进程个数的影响，如果A标签页中的iframe和A标签页属于同一站点，那么该iframe和A标签页会共用同一个渲染进程，如果不是，则该iframe会使用单独的渲染进程。</p><p>好了，到了这里相信你已经会计算渲染进程的个数了。</p><p>在最后我们还要补充下同源策略对同一站点的限制，虽然Chrome会让有连接且属于同一站点的标签页运行在同一个渲染进程中，不过如果A标签页和B标签页属于同一站点，却不属于同源站点，那么你依然无法通过opener来操作父标签页中的DOM，这依然会受到同源策略的限制。</p><p>简单地讲，极客邦和极客时间属于同一站点，但是他们并不是同源的，因为同源是需要相同域名的，虽然根域名geekbang.org相同，但是域名却是不相同的，<a href="http://xn--time-k84fui905m.geekbang.org" target="_blank" rel="noopener noreferrer">一个是time.geekbang.org</a>，<a href="http://xn--www-p18dohm08k.geekbang.org" target="_blank" rel="noopener noreferrer">一个是www.geekbang.org</a>， 因此浏览器判断它们不是同源的，所以依然无法通过time.geekbang.org标签页中的opener来操作www.geekbang.org中的DOM。</p><h2 id="思考题" tabindex="-1"><a class="header-anchor" href="#思考题"><span>思考题</span></a></h2><p>那么今天留给你的思考题是，你认为Chrome为什么使用同一站点划分渲染进程，而不是使用同源策略来划分渲染进程？</p><p>欢迎在留言区与我分享你的想法，也欢迎你在留言区记录你的思考过程。感谢阅读，如果你觉得这篇文章对你有帮助的话，也欢迎把它分享给更多的朋友。</p>`,69)]))}const m=a(t,[["render",s]]),g=JSON.parse('{"path":"/posts/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5/%E8%AF%BE%E5%A4%96%E5%8A%A0%E9%A4%90/%E5%8A%A0%E9%A4%90%E4%B8%80%EF%BD%9C%E6%B5%8F%E8%A7%88%E4%B8%8A%E4%B8%8B%E6%96%87%E7%BB%84%EF%BC%9A%E5%A6%82%E4%BD%95%E8%AE%A1%E7%AE%97Chrome%E4%B8%AD%E6%B8%B2%E6%9F%93%E8%BF%9B%E7%A8%8B%E7%9A%84%E4%B8%AA%E6%95%B0%EF%BC%9F.html","title":"加餐一｜浏览上下文组：如何计算Chrome中渲染进程的个数？","lang":"zh-CN","frontmatter":{"description":"加餐一｜浏览上下文组：如何计算Chrome中渲染进程的个数？ 你好，我是李兵。 在留言区，经常有朋友问到如何计算Chrome中渲染进程个数的问题，那么今天我就来完整地解答这个问题。 在前面“04 | 导航流程”这一讲中我们介绍过了，在默认情况下，如果打开一个标签页，那么浏览器会默认为其创建一个渲染进程。不过我们在“04 | 导航流程”中还介绍了同一站点...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/interview/posts/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5/%E8%AF%BE%E5%A4%96%E5%8A%A0%E9%A4%90/%E5%8A%A0%E9%A4%90%E4%B8%80%EF%BD%9C%E6%B5%8F%E8%A7%88%E4%B8%8A%E4%B8%8B%E6%96%87%E7%BB%84%EF%BC%9A%E5%A6%82%E4%BD%95%E8%AE%A1%E7%AE%97Chrome%E4%B8%AD%E6%B8%B2%E6%9F%93%E8%BF%9B%E7%A8%8B%E7%9A%84%E4%B8%AA%E6%95%B0%EF%BC%9F.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"加餐一｜浏览上下文组：如何计算Chrome中渲染进程的个数？"}],["meta",{"property":"og:description","content":"加餐一｜浏览上下文组：如何计算Chrome中渲染进程的个数？ 你好，我是李兵。 在留言区，经常有朋友问到如何计算Chrome中渲染进程个数的问题，那么今天我就来完整地解答这个问题。 在前面“04 | 导航流程”这一讲中我们介绍过了，在默认情况下，如果打开一个标签页，那么浏览器会默认为其创建一个渲染进程。不过我们在“04 | 导航流程”中还介绍了同一站点..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-16T11:19:38.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-16T11:19:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"加餐一｜浏览上下文组：如何计算Chrome中渲染进程的个数？\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-08-16T11:19:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755343178000,"updatedTime":1755343178000,"contributors":[{"name":"bbhou","username":"bbhou","email":"1557740299@qq.com","commits":1,"url":"https://github.com/bbhou"}]},"readingTime":{"minutes":12.39,"words":3716},"filePathRelative":"posts/浏览器工作原理与实践/课外加餐/加餐一｜浏览上下文组：如何计算Chrome中渲染进程的个数？.md","localizedDate":"2025年8月16日","excerpt":"\\n<p><audio id=\\"audio\\" title=\\"加餐一｜浏览上下文组：如何计算Chrome中渲染进程的个数？\\" controls=\\"\\" preload=\\"none\\"><source id=\\"mp3\\" src=\\"https://static001.geekbang.org/resource/audio/cd/59/cda88e0850cd772520441adf9264e159.mp3\\"></audio></p>\\n<p>你好，我是李兵。</p>\\n<p>在留言区，经常有朋友问到如何计算Chrome中渲染进程个数的问题，那么今天我就来完整地解答这个问题。</p>\\n<p>在前面“<a href=\\"https://time.geekbang.org/column/article/117637\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">04 | 导航流程</a>”这一讲中我们介绍过了，在默认情况下，如果打开一个标签页，那么浏览器会默认为其创建一个渲染进程。不过我们在“<a href=\\"https://time.geekbang.org/column/article/117637\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">04 | 导航流程</a>”中还介绍了同一站点的概念，如果从一个标签页中打开了另一个新标签页，当新标签页和当前标签页属于同一站点的话，那么新标签页会复用当前标签页的渲染进程。</p>","autoDesc":true}');export{m as comp,g as data};
