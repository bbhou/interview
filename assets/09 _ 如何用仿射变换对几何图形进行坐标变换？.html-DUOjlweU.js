import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as i,o as e}from"./app-d8EKP-K0.js";const l={};function p(r,s){return e(),a("div",null,s[0]||(s[0]=[i(`<h1 id="_09-如何用仿射变换对几何图形进行坐标变换" tabindex="-1"><a class="header-anchor" href="#_09-如何用仿射变换对几何图形进行坐标变换"><span>09 _ 如何用仿射变换对几何图形进行坐标变换？</span></a></h1><p><audio id="audio" title="09 | 如何用仿射变换对几何图形进行坐标变换？" controls="" preload="none"><source id="mp3" src="https://static001.geekbang.org/resource/audio/e4/55/e40ab19a83e1783031be21ee91e9cc55.mp3"></audio></p><p>你好，我是月影。</p><p>前面两节课，我们学习了用向量表示的顶点，来描述曲线和多边形的方法。但是在实际绘制的时候，我们经常需要在画布上绘制许多轮廓相同的图形，难道这也需要我们重复地去计算每个图形的顶点吗？当然不需要。我们只需要创建一个基本的几何轮廓，然后通过<strong>仿射变换</strong>来改变几何图形的位置、形状、大小和角度。</p><p>仿射变换是拓扑学和图形学中一个非常重要的基础概念。利用它，我们才能在可视化应用中快速绘制出形态、位置、大小各异的众多几何图形。所以，这一节课，我们就来说一说仿射变换的数学基础和基本操作，它几乎会被应用到我们后面讲到的所有视觉呈现的案例中，所以你一定要掌握。</p><h2 id="什么是仿射变换" tabindex="-1"><a class="header-anchor" href="#什么是仿射变换"><span>什么是仿射变换？</span></a></h2><p>仿射变换简单来说就是“线性变换+平移”。实际上在平常的Web开发中，我们也经常会用到仿射变换，比如，对元素设置CSS的transform属性就是对元素应用仿射变换。</p><p>再说回到几何图形，针对它的仿射变换具有以下2个性质：</p><ol><li>仿射变换前是直线段的，仿射变换后依然是直线段</li><li>对两条直线段a和b应用同样的仿射变换，变换前后线段长度比例保持不变</li></ol><p>由于仿射变换具有这两个性质，因此对线性空间中的几何图形进行仿射变换，就相当于对它的每个顶点向量进行仿射变换。</p><p>那具体怎么操作呢？下面，我们就来详细说说。</p><h2 id="向量的平移、旋转与缩放" tabindex="-1"><a class="header-anchor" href="#向量的平移、旋转与缩放"><span>向量的平移、旋转与缩放</span></a></h2><p>常见的仿射变换形式包括<strong>平移、旋转、缩放</strong>以及它们的组合。其中，平移变换是最简单的仿射变换。如果我们想让向量P(x<sub>0</sub>, y<sub>0</sub>)沿着向量Q(x<sub>1</sub>, y<sub>1</sub>)平移，只要将P和Q相加就可以了。</p><img src="https://static001.geekbang.org/resource/image/3b/b5/3b1afc9f056d4840cb111252bcc179b5.jpeg" alt="" title="平移后的向量p的坐标"><p><strong>接着是旋转变换</strong>。实际上，旋转变换我们在第5课接触过，当时我们把向量的旋转定义成了如下的函数：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>class Vector2D {</span></span>
<span class="line"><span>  ...  </span></span>
<span class="line"><span>  rotate(rad) {</span></span>
<span class="line"><span>    const c = Math.cos(rad),</span></span>
<span class="line"><span>      s = Math.sin(rad);</span></span>
<span class="line"><span>    const [x, y] = this;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    this.x = x * c + y * -s;</span></span>
<span class="line"><span>    this.y = x * s + y * c;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    return this;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是，我们并没有讨论这个函数是怎么来的，那在这里我们通过三角函数来简单推导一下。</p><img src="https://static001.geekbang.org/resource/image/91/18/914yy44e969c9f75f5413295eef29718.jpg" alt=""><p>假设向量P的长度为r，角度是⍺，现在我们要将它逆时针旋转⍬角，此时新的向量P’的参数方程为：</p><img src="https://static001.geekbang.org/resource/image/73/1b/7383bf5a2529bc6b1687617769b6da1b.jpeg" alt=""><p>然后，因为rcos⍺、rsin⍺是向量P原始的坐标x<sub>0</sub>、y<sub>0</sub>，所以，我们可以把坐标代入到上面的公式中，就会得到如下的公式：</p><img src="https://static001.geekbang.org/resource/image/88/f4/88aea77872789dfb0322db466315f5f4.jpeg" alt=""><p>最后，我们再将它写成矩阵形式，就会得到一个旋转矩阵。至于为什么要写成矩阵形式，我后面会讲，这里你先记住这个旋转矩阵的公式就可以了。</p><img src="https://static001.geekbang.org/resource/image/e5/a2/e52cae6173e2b4056e9aa752a93076a2.jpeg" alt=""><p><strong>然后是缩放变换</strong>。缩放变换也很简单，我们可以直接让向量与标量（标量只有大小、没有方向）相乘。</p><img src="https://static001.geekbang.org/resource/image/46/72/46d1bb8b507b1f1c9bc14dd6715a4372.jpeg" alt=""><p>对于得到的这个公式，我们也可以把它写成矩阵形式。结果如下：</p><img src="https://static001.geekbang.org/resource/image/2b/a4/2b15e082213c56756686771526afbda4.jpg" alt=""><p>现在，我们就得到了三个基本的仿射变换公式，其中旋转和缩放都可以写成矩阵与向量相乘的形式。这种能写成矩阵与向量相乘形式的变换，就叫做<strong>线性变换</strong>。线性变换除了可以满足仿射变换的2个性质之外，还有2个额外的性质：</p><ol><li>线性变换不改变坐标原点（因为如果x<sub>0</sub>、y<sub>0</sub>等于零，那么x、y肯定等于0）；</li><li>线性变换可以叠加，多个线性变换的叠加结果就是将线性变换的矩阵依次相乘，再与原始向量相乘。</li></ol><p>那根据线性变换的第2条性质，我们就能总结出一个通用的线性变换公式，即一个原始向量P<sub>0</sub>经过M<sub>1</sub>、M<sub>2</sub>、…M<sub>n </sub>次的线性变换之后得到最终的坐标P。线性变化的叠加是一个非常重要的性质，它是我们对图形进行变换的基础，所以你一定要牢记线性变化的叠加性质。</p><img src="https://static001.geekbang.org/resource/image/de/c7/deca8b0bce015f249a48a5c6e7dcdfc7.jpeg" alt=""><p>好了，常见的仿射变换形式我们说完了。总的来说，向量的基本仿射变换分为平移、旋转与缩放，其中旋转与缩放属于线性变换，而平移不属于线性变换。基于此，我们可以得到仿射变换的一般表达式，如下图所示：</p><img src="https://static001.geekbang.org/resource/image/c2/57/c275c765a311e4faa2845435f9d54e57.jpg" alt=""><h2 id="仿射变换的公式优化" tabindex="-1"><a class="header-anchor" href="#仿射变换的公式优化"><span>仿射变换的公式优化</span></a></h2><p>上面这个公式我们还可以改写成矩阵的形式，在改写的公式里，我们实际上是给线性空间增加了一个维度。换句话说，我们用高维度的线性变换表示了低维度的仿射变换！</p><img src="https://static001.geekbang.org/resource/image/53/27/53e134cae1bfced9e5a1bd60df0aed27.jpeg" alt=""><p>这样，我们就将原本n维的坐标转换为了n+1维的坐标。这种n+1维坐标被称为<strong>齐次坐标</strong>，对应的矩阵就被称为<strong>齐次矩阵</strong>。</p><p>齐次坐标和齐次矩阵是可视化中非常常用的数学工具，它能让我们用线性变换来表示仿射变换。这样一来，我们就能利用线性变换的叠加性质，来非常方便地进行各种复杂的仿射变换了。落实到共识上，就是把这些变换的矩阵相乘得到一个新的矩阵，再把它乘以原向量。我们在绘制几何图形的时候会经常用到它，所以你要记住这个公式。</p><h2 id="仿射变换的应用-实现粒子动画" tabindex="-1"><a class="header-anchor" href="#仿射变换的应用-实现粒子动画"><span>仿射变换的应用：实现粒子动画</span></a></h2><p>好了，现在你已经知道了仿射变换的数学基础。那它该怎么应用呢？一个很常见的应用，就是利用它来实现粒子动画。</p><p>你可能还不熟悉粒子动画，我们先来快速认识一下它。它能在一定时间内生成许多随机运动的小图形，这类动画通常是通过给人以视觉上的震撼，来达到获取用户关注的效果。在可视化中，粒子动画可以用来表达数据信息本身（比如数量、大小等等），也可以用来修饰界面、吸引用户的关注，它是我们在可视化中经常会用到的一种视觉效果。</p><p>在粒子动画的实现过程中，我们通常需要在界面上快速改变一大批图形的大小、形状和位置，所以用图形的仿射变换来实现是一个很好的方法。</p><p>为了方便你理解，我们今天只讲一个简单的粒子动画。这个粒子动画的运行效果，是从一个点开始发射出许多颜色、大小、角度各异的三角形，并且通过不断变化它们的位置，产生一种撒花般的视觉效果。</p><h3 id="_1-创建三角形" tabindex="-1"><a class="header-anchor" href="#_1-创建三角形"><span>1. 创建三角形</span></a></h3><p>因为这个粒子动画中主要用到了三角形，所以我们第一步就要创建三角形。**创建三角形一共可以分为两步，第一步，**<strong>我们定义三角形的顶点并将数据送到缓冲区</strong>。这一步，你直接看下面创建WebGLProgram的步骤就能理解。如果你还不是很熟悉，我建议你复习一下第4节课的内容。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>const position = new Float32Array([</span></span>
<span class="line"><span>  -1, -1,</span></span>
<span class="line"><span>  0, 1,</span></span>
<span class="line"><span>  1, -1,</span></span>
<span class="line"><span>]);</span></span>
<span class="line"><span>const bufferId = gl.createBuffer();</span></span>
<span class="line"><span>gl.bindBuffer(gl.ARRAY_BUFFER, bufferId);</span></span>
<span class="line"><span>gl.bufferData(gl.ARRAY_BUFFER, position, gl.STATIC_DRAW);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>const vPosition = gl.getAttribLocation(program, &#39;position&#39;);</span></span>
<span class="line"><span>gl.vertexAttribPointer(vPosition, 2, gl.FLOAT, false, 0, 0);</span></span>
<span class="line"><span>gl.enableVertexAttribArray(vPosition);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>第二步，我们实现一个创建随机三角形属性的函数</strong>。具体来说就是，利用randomTriangles随机创建一个三角形的信息，其中的参数包括颜色u_color、初始旋转角度u_rotation、初始大小u_scale、初始时间u_time、动画持续时间u_diration、运动方向u_dir和创建时间startTime。除了startTime之外的数据，我们都需要传给shader去处理。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>function randomTriangles() {</span></span>
<span class="line"><span>  const u_color = [Math.random(), Math.random(), Math.random(), 1.0]; // 随机颜色</span></span>
<span class="line"><span>  const u_rotation = Math.random() * Math.PI; // 初始旋转角度</span></span>
<span class="line"><span>  const u_scale = Math.random() * 0.05 + 0.03; // 初始大小</span></span>
<span class="line"><span>  const u_time = 0;</span></span>
<span class="line"><span>  const u_duration = 3.0; // 持续3秒钟</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  const rad = Math.random() * Math.PI * 2;</span></span>
<span class="line"><span>  const u_dir = [Math.cos(rad), Math.sin(rad)]; // 运动方向</span></span>
<span class="line"><span>  const startTime = performance.now();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  return {u_color, u_rotation, u_scale, u_time, u_duration, u_dir, startTime};</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-设置uniform变量" tabindex="-1"><a class="header-anchor" href="#_2-设置uniform变量"><span>2. 设置uniform变量</span></a></h3><p>通过前面的代码，我们已经将三角形顶点信息传入缓冲区。我们知道，在WebGL的shader中，顶点相关的变量可以用attribute声明。但是，我们现在要把u_color、u_rotation等一系列变量也传到shader中，这些变量与三角形具体顶点无关，它们是一些固定的值。这时候，我们就要用到shader的另一种变量声明，也就是uniform来声明。</p><p>那它们有什么区别呢？首先，attribute变量是对应于顶点的。也就是说，几何图形有几个顶点就要提供几份attribute数据。并且，attribute变量只能在顶点着色器中使用，如果要在片元着色器中使用，需要我们通过varying变量将它传给片元着色器才行。这样一来，片元着色器中获取的实际值，就是经过顶点线性插值的。</p><p>而uniform声明的变量不同，uniform声明的变量和其他语言中的常量一样，我们赋给unform变量的值在shader执行的过程中不可改变。而且一个变量的值是唯一的，不随顶点变化。<strong>uniform变量既可以在顶点着色器中使用，也可以在片元着色器中使用。</strong></p><p>在WebGL中，我们可以通过 gl.uniformXXX(loc, u_color); 的方法将数据传给shader的uniform变量。其中，XXX是我们随着数据类型不同取得不同的名字。我在下面列举了一些比较常用的，你可以看看：</p><ul><li>gl.uniform1f传入一个浮点数，对应的uniform变量的类型为float</li><li>gl.uniform4f传入四个浮点数，对应的uniform变量类型为float[4]</li><li>gl.uniform3fv传入一个三维向量，对应的uniform变量类型为vec3</li><li>gl.uniformMatrix4fv传入一个4x4的矩阵，对应的uniform变量类型为mat4</li></ul><p>今天，关于WebGL的uniform的设置，我们只需要知道这个最常用的方法就可以了，更详细的设置信息，你可以参考<a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/uniform" target="_blank" rel="noopener noreferrer">MDN官方文档</a>。</p><p>接下来，我们实现这个函数，将随机三角形信息传给shader里的uniform变量。代码如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>function setUniforms(gl, {u_color, u_rotation, u_scale, u_time, u_duration, u_dir}) {</span></span>
<span class="line"><span>  // gl.getUniformLocation 拿到uniform变量的指针</span></span>
<span class="line"><span>  let loc = gl.getUniformLocation(program, &#39;u_color&#39;);</span></span>
<span class="line"><span>  // 将数据传给 unfirom 变量的地址</span></span>
<span class="line"><span>  gl.uniform4fv(loc, u_color);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  loc = gl.getUniformLocation(program, &#39;u_rotation&#39;);</span></span>
<span class="line"><span>  gl.uniform1f(loc, u_rotation);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  loc = gl.getUniformLocation(program, &#39;u_scale&#39;);</span></span>
<span class="line"><span>  gl.uniform1f(loc, u_scale);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  loc = gl.getUniformLocation(program, &#39;u_time&#39;);</span></span>
<span class="line"><span>  gl.uniform1f(loc, u_time);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  loc = gl.getUniformLocation(program, &#39;u_duration&#39;);</span></span>
<span class="line"><span>  gl.uniform1f(loc, u_duration);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  loc = gl.getUniformLocation(program, &#39;u_dir&#39;);</span></span>
<span class="line"><span>  gl.uniform2fv(loc, u_dir);</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-用requestanimationframe实现动画" tabindex="-1"><a class="header-anchor" href="#_3-用requestanimationframe实现动画"><span>3. 用requestAnimationFrame实现动画</span></a></h3><p>然后，我们使用requestAnimationFrame实现动画。具体的方法就是，我们在update方法中每次新建数个随机三角形，然后依次修改所有三角形的u_time属性，通过setUniforms方法将修改的属性更新到shader变量中。这样，我们就可以在shader中读取变量的值进行处理了。代码如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>let triangles = [];</span></span>
<span class="line"><span></span></span>
<span class="line"><span>function update() {</span></span>
<span class="line"><span>  for(let i = 0; i &amp;lt; 5 * Math.random(); i++) {</span></span>
<span class="line"><span>    triangles.push(randomTriangles());</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>  gl.clear(gl.COLOR_BUFFER_BIT);</span></span>
<span class="line"><span>  // 对每个三角形重新设置u_time</span></span>
<span class="line"><span>  triangles.forEach((triangle) =&amp;gt; {</span></span>
<span class="line"><span>    triangle.u_time = (performance.now() - triangle.startTime) / 1000;</span></span>
<span class="line"><span>    setUniforms(gl, triangle);</span></span>
<span class="line"><span>    gl.drawArrays(gl.TRIANGLES, 0, position.length / 2);</span></span>
<span class="line"><span>  });</span></span>
<span class="line"><span>  // 移除已经结束动画的三角形</span></span>
<span class="line"><span>  triangles = triangles.filter((triangle) =&amp;gt; {</span></span>
<span class="line"><span>    return triangle.u_time &amp;lt;= triangle.u_duration;</span></span>
<span class="line"><span>  });</span></span>
<span class="line"><span>  requestAnimationFrame(update);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>requestAnimationFrame(update);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们再回过头来看最终要实现的效果。你会发现，所有的三角形，都是由小变大朝着特定的方向旋转。那想要实现这个效果，我们就需要用到前面讲过的仿射变换，在顶点着色器中进行矩阵运算。</p><p>在这一步中，顶点着色器中的glsl代码最关键，我们先来看一下这个代码是怎么写的。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>attribute vec2 position;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>uniform float u_rotation;</span></span>
<span class="line"><span>uniform float u_time;</span></span>
<span class="line"><span>uniform float u_duration;</span></span>
<span class="line"><span>uniform float u_scale;</span></span>
<span class="line"><span>uniform vec2 u_dir;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>varying float vP;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>void main() {</span></span>
<span class="line"><span>  float p = min(1.0, u_time / u_duration);</span></span>
<span class="line"><span>  float rad = u_rotation + 3.14 * 10.0 * p;</span></span>
<span class="line"><span>  float scale = u_scale * p * (2.0 - p);</span></span>
<span class="line"><span>  vec2 offset = 2.0 * u_dir * p * p;</span></span>
<span class="line"><span>  mat3 translateMatrix = mat3(</span></span>
<span class="line"><span>    1.0, 0.0, 0.0,</span></span>
<span class="line"><span>    0.0, 1.0, 0.0,</span></span>
<span class="line"><span>    offset.x, offset.y, 1.0</span></span>
<span class="line"><span>  );</span></span>
<span class="line"><span>  mat3 rotateMatrix = mat3(</span></span>
<span class="line"><span>    cos(rad), sin(rad), 0.0,</span></span>
<span class="line"><span>    -sin(rad), cos(rad), 0.0,</span></span>
<span class="line"><span>    0.0, 0.0, 1.0</span></span>
<span class="line"><span>  );</span></span>
<span class="line"><span>  mat3 scaleMatrix = mat3(</span></span>
<span class="line"><span>    scale, 0.0, 0.0,</span></span>
<span class="line"><span>    0.0, scale, 0.0,</span></span>
<span class="line"><span>    0.0, 0.0, 1.0</span></span>
<span class="line"><span>  );</span></span>
<span class="line"><span>  gl_PointSize = 1.0;</span></span>
<span class="line"><span>  vec3 pos = translateMatrix * rotateMatrix * scaleMatrix * vec3(position, 1.0);</span></span>
<span class="line"><span>  gl_Position = vec4(pos, 1.0);</span></span>
<span class="line"><span>  vP = p;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中有几个关键参数，你可能还比较陌生，我来分别介绍一下。</p><p>首先，我们定义的p是当前动画进度，它的值是u_time / u_duration，取值区间从0到1。rad是旋转角度，它的值是初始角度u_rotation加上10π，表示在动画过程中它会绕自身旋转5周。</p><p>其次，scale是缩放比例，它的值是初始缩放比例乘以一个系数，这个系数是p * (2.0 - p)，在我们后面讨论动画的时候你会知道，p * (2.0 - p)是一个缓动函数，在这里我们只需要知道，它的作用是让scale的变化量随着时间推移逐渐减小就可以了。</p><p>最后，offset是一个二维向量，它是初始值u_dir与 2.0 * p * p 的乘积，因为u_dir是个单位向量，这里的2.0表示它的最大移动距离为 2，p * p也是一个缓动函数，作用是让位移的变化量随着时间增加而增大。</p><p>定义完这些参数以后，我们得到三个齐次矩阵：translateMatrix是偏移矩阵，rotateMatrix是旋转矩阵，scaleMatrix是缩放矩阵。我们将pos的值设置为这三个矩阵与position的乘积，这样就完成对顶点的线性变换，呈现出来的效果也就是三角形会向着特定的方向旋转、移动和缩放。</p><h3 id="_4-在片元着色器中着色" tabindex="-1"><a class="header-anchor" href="#_4-在片元着色器中着色"><span>4. 在片元着色器中着色</span></a></h3><p>最后，我们在片元着色器中对这些三角形着色。我们将p也就是动画进度，从顶点着色器通过变量varying vP传给片元着色器，然后在片元着色器中让alpha值随着vP值变化，这样就能同时实现粒子的淡出效果了。</p><p>片元着色器中的代码如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span> precision mediump float;</span></span>
<span class="line"><span>  uniform vec4 u_color;</span></span>
<span class="line"><span>  varying float vP;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  void main()</span></span>
<span class="line"><span>  {</span></span>
<span class="line"><span>    gl_FragColor.xyz = u_color.xyz;</span></span>
<span class="line"><span>    gl_FragColor.a = (1.0 - vP) * u_color.a;</span></span>
<span class="line"><span>  }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>到这里，我们就用仿射变换实现了一个有趣的粒子动画。</p><h2 id="css的仿射变换" tabindex="-1"><a class="header-anchor" href="#css的仿射变换"><span>CSS的仿射变换</span></a></h2><p>既然我们讲了仿射变换，这里还是要再提一下CSS中我们常用的属性transform。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>div.block {</span></span>
<span class="line"><span>  transform: rotate(30deg) translate(100px,50px) scale(1.5);</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>CSS中的transform是一个很强大的属性，它的作用其实也是对元素进行仿射变换。</p><p>它不仅支持translate、rotate、scale等值，还支持matrix。CSS的matrix是一个简写的齐次矩阵，因为它省略了3阶齐次矩阵第三行的0, 0, 1值，所以它 只有6个值。</p><p>transform在CSS中变换元素的方法，我们作为前端工程师都比较熟悉了。但你知道怎么优化它来提高性能吗？下面，我就重点来说说这一点。</p><p>结合上面介绍的齐次矩阵变换的原理，我们可以对CSS的transform属性进行压缩。举个例子，我们可以这么定义CSS transform，代码如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>div.block {</span></span>
<span class="line"><span>  transform: rotate(30deg) translate(100px,50px) scale(1.5);</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也就是我们先旋转30度，然后平移100px、50px，最后再放大1.5倍。实际上相当于我们做了如下变换：</p><img src="https://static001.geekbang.org/resource/image/5e/98/5e18daef0ff059498804419b704c6a98.jpeg" alt=""><p>这里我就不再自己写矩阵乘法的库了，我们用一个向量矩阵运算的数学库math，它几乎包含了所有图形学需要用到的数学方法，我们在后面课程中也会经常用到它，你可以参考<a href="https://github.com/akira-cn/graphics/tree/master/common/lib/math" target="_blank" rel="noopener noreferrer">GitHub仓库</a>先了解一下它。</p><p>我们简单算一下三个矩阵相乘，代码如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>import {multiply} from &#39;common/lib/math/functions/mat3fun.js&#39;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>const rad = Math.PI / 6;</span></span>
<span class="line"><span>const a = [</span></span>
<span class="line"><span>  Math.cos(rad), -Math.sin(rad), 0,</span></span>
<span class="line"><span>  Math.sin(rad), Math.cos(rad), 0,</span></span>
<span class="line"><span>  0, 0, 1</span></span>
<span class="line"><span>];</span></span>
<span class="line"><span></span></span>
<span class="line"><span>const b = [</span></span>
<span class="line"><span>  1, 0, 100,</span></span>
<span class="line"><span>  0, 1, 50,</span></span>
<span class="line"><span>  0, 0, 1</span></span>
<span class="line"><span>];</span></span>
<span class="line"><span></span></span>
<span class="line"><span>const c = [</span></span>
<span class="line"><span>  1.5, 0, 0,</span></span>
<span class="line"><span>  0, 1.5, 0,</span></span>
<span class="line"><span>  0, 0, 1</span></span>
<span class="line"><span>];</span></span>
<span class="line"><span></span></span>
<span class="line"><span>const res = [a, b, c].reduce((a, b) =&amp;gt; {</span></span>
<span class="line"><span>  return multiply([], b, a);</span></span>
<span class="line"><span>});</span></span>
<span class="line"><span></span></span>
<span class="line"><span>console.log(res);</span></span>
<span class="line"><span>/*</span></span>
<span class="line"><span>[1.299038105676658, -0.7499999999999999, 61.60254037844388, </span></span>
<span class="line"><span>  0.7499999999999999, 1.299038105676658, 93.30127018922192,</span></span>
<span class="line"><span>  0, 0, 1]</span></span>
<span class="line"><span>*/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以呢，我们最终就可以将上面的transform用一个矩阵表示：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>div.block {</span></span>
<span class="line"><span>  transform: matrix(1.3,0.75,-0.75,1.3,61.6,93.3)；</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样的transform效果和之前rotate、translate和scale分开写的效果是一样的，但是字符数更少，所以能减小CSS文件的大小。</p><p>那在我们介绍完仿射变换之后，你是不是对CSS transform的理解也更深了呢？没错，不光是transform，在我们之后的学习中，你也可以多想想，还有哪些内容在CSS中也有相似的作用，是不是也能利用在可视化中学到的知识来优化性能。</p><h2 id="要点总结" tabindex="-1"><a class="header-anchor" href="#要点总结"><span>要点总结</span></a></h2><p>这一节课我们介绍了用向量和矩阵运算来改变几何图形的形状、大小和位置。其中，向量的平移、旋转和缩放都属于仿射变换，而仿射变换具有2个性质：</p><ol><li>变换前是直线段的，变换后依然是直线段</li><li>对两条直线段a和b应用同样的仿射变换，变换前后线段长度比例保持不变</li></ol><p>那仿射变换中的旋转和缩放又属于线性变换，而线性变换在仿射变换性质的基础上还有2个额外的性质：</p><ol><li>线性变换不改变坐标原点（因为如果x<sub>0</sub>、y<sub>0</sub>等于零，那么x、y肯定等于0）</li><li>线性变换可以叠加，多个线性变换的叠加结果就是将线性变换的矩阵依次相乘，再与向量相乘</li></ol><p>通过齐次坐标和齐次矩阵，我们可以将平移这样的非线性仿射变换用更高维度的线性变换来表示。这么做的目的是让我们能够将仿射变换的组合简化为矩阵乘法运算。</p><p>到这里，数学基础篇的内容我们就学完了。在这一篇的开头，我们说了要总结出一个通用的基础数学绘图体系，这样才不至于陷入细节里。所以啊，我总结了一个简单的知识脑图，把我们在数学篇里讲过的数学知识汇总到了一起，它肯定不会是一个非常完整的数学绘图体系，但是对我们之后的学习来说，已经足够用了。</p><img src="https://static001.geekbang.org/resource/image/bf/7c/bfdd8c7f5f15e5b703128cdaf419f07c.jpg" alt=""><p>最后呢，我还想再啰嗦几句。图形学作为可视化的基础，是一门很深的学问。它牵涉的数学内容非常多，包括线性代数、几何、微积分和概率统计等等。那这门课里我们所介绍的数学知识，其实还都只是一些入门知识。</p><p>那如果你对图形学本身很感兴趣，想要深入学习它在其他领域，比如游戏、视频、AR/VR等领域的应用，这里我推荐你一些深入学习的资料。</p><ol><li><a href="https://www.youtube.com/watch?v=fNk_zzaMoSs&amp;list=PLZHQObOWTQDPD3MizzM2xVFitgF8hE_ab" target="_blank" rel="noopener noreferrer">3Blue1Brown的数学和图形学基础课程</a> 讲得深入浅出，是非常棒的入门教程。</li><li><a href="https://book.douban.com/subject/26868819/" target="_blank" rel="noopener noreferrer">《Fundamentals of Computer Graphics》</a>这本书是图形学入门的经典教材。</li></ol><h2 id="小试牛刀" tabindex="-1"><a class="header-anchor" href="#小试牛刀"><span>小试牛刀</span></a></h2><p>在实现粒子动画的时候，我们让translateMatrix * rotateMatrix * scaleMatrix，这三个矩阵按这样的顺序相乘。那如果我们颠倒它们的相乘次序，把roateMatrix放到translateMatrix前面，或者把scaleMatrix放到translateMatrix前面，会产生什么样的结果呢？为什么呢？你可以思考一下，然后从GitHub上fork代码，动手试一试。</p><p>我们知道，CSS的transform除了translate、rotate和scale变换以外，还有skew变换。skew变换是一种沿着轴向的扭曲变换，它也属于一种线性变换，它的变换矩阵是：<br><img src="https://static001.geekbang.org/resource/image/b2/44/b265fbd6719e6785c9d0da9364a91f44.jpeg" alt=""></p><p>你可以使用这个矩阵，给我们的粒子动画加上随机的扭曲效果吗？</p><ol><li>因为齐次坐标和齐次矩阵的概念，可以从二维一直推广到N维，而且CSS的transform还支持3D变换。那你可以用齐次矩阵的原理对CSS属性的3D变换应用matrix3d，实现出有趣的3D变换效果吗？（💡小提示：要支持3维的齐次坐标，需要4维齐次矩阵）？</li></ol><p>欢迎在留言区和我讨论，分享你的答案和思考，也欢迎你把这节课分享给你的朋友，我们下节课见！</p><h2 id="源码" tabindex="-1"><a class="header-anchor" href="#源码"><span>源码</span></a></h2><p>[1]粒子动画的<a href="https://github.com/akira-cn/graphics/tree/master/webgl_particles" target="_blank" rel="noopener noreferrer">完整代码</a></p><p>[2]矩阵运算数学库的<a href="https://github.com/akira-cn/graphics/tree/master/common/lib/math" target="_blank" rel="noopener noreferrer">完整代码</a></p><h2 id="推荐阅读" tabindex="-1"><a class="header-anchor" href="#推荐阅读"><span>推荐阅读</span></a></h2><p>[1]WebGL的uniform变量设置<a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/uniform" target="_blank" rel="noopener noreferrer">官方文档</a></p><p>[2]<a href="https://www.youtube.com/watch?v=fNk_zzaMoSs&amp;list=PLZHQObOWTQDPD3MizzM2xVFitgF8hE_ab" target="_blank" rel="noopener noreferrer">3Blue1Brown的数学和图形学基础课程</a></p><p>[3]图形学入门经典教材<a href="https://book.douban.com/subject/26868819/" target="_blank" rel="noopener noreferrer">《Fundamentals of Computer Graphics》</a></p>`,115)]))}const d=n(l,[["render",p]]),o=JSON.parse('{"path":"/posts/%E8%B7%9F%E6%9C%88%E5%BD%B1%E5%AD%A6%E5%8F%AF%E8%A7%86%E5%8C%96/%E6%95%B0%E5%AD%A6%E7%AF%87/09%20_%20%E5%A6%82%E4%BD%95%E7%94%A8%E4%BB%BF%E5%B0%84%E5%8F%98%E6%8D%A2%E5%AF%B9%E5%87%A0%E4%BD%95%E5%9B%BE%E5%BD%A2%E8%BF%9B%E8%A1%8C%E5%9D%90%E6%A0%87%E5%8F%98%E6%8D%A2%EF%BC%9F.html","title":"09 _ 如何用仿射变换对几何图形进行坐标变换？","lang":"zh-CN","frontmatter":{"description":"09 _ 如何用仿射变换对几何图形进行坐标变换？ 你好，我是月影。 前面两节课，我们学习了用向量表示的顶点，来描述曲线和多边形的方法。但是在实际绘制的时候，我们经常需要在画布上绘制许多轮廓相同的图形，难道这也需要我们重复地去计算每个图形的顶点吗？当然不需要。我们只需要创建一个基本的几何轮廓，然后通过仿射变换来改变几何图形的位置、形状、大小和角度。 仿射...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/interview/posts/%E8%B7%9F%E6%9C%88%E5%BD%B1%E5%AD%A6%E5%8F%AF%E8%A7%86%E5%8C%96/%E6%95%B0%E5%AD%A6%E7%AF%87/09%20_%20%E5%A6%82%E4%BD%95%E7%94%A8%E4%BB%BF%E5%B0%84%E5%8F%98%E6%8D%A2%E5%AF%B9%E5%87%A0%E4%BD%95%E5%9B%BE%E5%BD%A2%E8%BF%9B%E8%A1%8C%E5%9D%90%E6%A0%87%E5%8F%98%E6%8D%A2%EF%BC%9F.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"09 _ 如何用仿射变换对几何图形进行坐标变换？"}],["meta",{"property":"og:description","content":"09 _ 如何用仿射变换对几何图形进行坐标变换？ 你好，我是月影。 前面两节课，我们学习了用向量表示的顶点，来描述曲线和多边形的方法。但是在实际绘制的时候，我们经常需要在画布上绘制许多轮廓相同的图形，难道这也需要我们重复地去计算每个图形的顶点吗？当然不需要。我们只需要创建一个基本的几何轮廓，然后通过仿射变换来改变几何图形的位置、形状、大小和角度。 仿射..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-16T11:19:38.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-16T11:19:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"09 _ 如何用仿射变换对几何图形进行坐标变换？\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-08-16T11:19:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755343178000,"updatedTime":1755343178000,"contributors":[{"name":"bbhou","username":"bbhou","email":"1557740299@qq.com","commits":1,"url":"https://github.com/bbhou"}]},"readingTime":{"minutes":18.28,"words":5485},"filePathRelative":"posts/跟月影学可视化/数学篇/09 _ 如何用仿射变换对几何图形进行坐标变换？.md","localizedDate":"2025年8月16日","excerpt":"\\n<p><audio id=\\"audio\\" title=\\"09 | 如何用仿射变换对几何图形进行坐标变换？\\" controls=\\"\\" preload=\\"none\\"><source id=\\"mp3\\" src=\\"https://static001.geekbang.org/resource/audio/e4/55/e40ab19a83e1783031be21ee91e9cc55.mp3\\"></audio></p>\\n<p>你好，我是月影。</p>\\n<p>前面两节课，我们学习了用向量表示的顶点，来描述曲线和多边形的方法。但是在实际绘制的时候，我们经常需要在画布上绘制许多轮廓相同的图形，难道这也需要我们重复地去计算每个图形的顶点吗？当然不需要。我们只需要创建一个基本的几何轮廓，然后通过<strong>仿射变换</strong>来改变几何图形的位置、形状、大小和角度。</p>","autoDesc":true}');export{d as comp,o as data};
