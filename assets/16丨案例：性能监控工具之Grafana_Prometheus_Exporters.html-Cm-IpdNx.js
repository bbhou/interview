import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as i}from"./app-d8EKP-K0.js";const p={};function l(r,s){return i(),a("div",null,s[0]||(s[0]=[n(`<h1 id="_16丨案例-性能监控工具之grafana-prometheus-exporters" tabindex="-1"><a class="header-anchor" href="#_16丨案例-性能监控工具之grafana-prometheus-exporters"><span>16丨案例：性能监控工具之Grafana+Prometheus+Exporters</span></a></h1><p><audio id="audio" title="16丨案例：性能监控工具之Grafana+Prometheus+Exporters" controls="" preload="none"><source id="mp3" src="https://static001.geekbang.org/resource/audio/95/79/953457c8660169380e1d736b6c2c3979.mp3"></audio></p><p>在本模块中，我将把几个常用的监控部分给梳理一下。前面我们提到过，在性能监控图谱中，有操作系统、应用服务器、中间件、队列、缓存、数据库、网络、前端、负载均衡、Web服务器、存储、代码等很多需要监控的点。</p><p>显然这些监控点不能在一个专栏中全部覆盖并一一细化，我只能找最常用的几个，做些逻辑思路的说明，同时也把具体的实现描述出来。如果你遇到了其他的组件，也需要一一实现这些监控。</p><p>在本篇中，主要想说明白下图的这个监控逻辑。</p><img src="https://static001.geekbang.org/resource/image/e0/39/e0aa269a7f528f393b859cc8ed69ac39.jpg" alt=""><p>这应该是现在最流行的一套监控逻辑了吧。</p><p>我今天把常见的使用Grafana、Prometheus、InfluxDB、Exporters的数据展示方式说一下，如果你刚进入性能测试领域，也能有一个感性的认识。</p><p>有测试工具，有监控工具，才能做后续的性能分析和瓶颈定位，所以有必要把这些工具的逻辑跟你摆一摆。</p><p>所有做性能的人都应该知道一点，不管数据以什么样的形式展示，最要紧的还是看数据的来源和含义，以便做出正确的判断。</p><p>我先说明一下JMeter和node_exporter到Grafana的数据展示逻辑。至于其他的Exporter，我就不再解释这个逻辑了，只说监控分析的部分。</p><h2 id="jmeter-influxdb-grafana的数据展示逻辑" tabindex="-1"><a class="header-anchor" href="#jmeter-influxdb-grafana的数据展示逻辑"><span>JMeter+InfluxDB+Grafana的数据展示逻辑</span></a></h2><p>一般情况下，我们用JMeter做压力测试时，都是使用JMeter的控制台来查看结果。如下图所示：</p><img src="https://static001.geekbang.org/resource/image/60/75/60469fd6df4eff032fe0ce161963f675.png" alt=""><p>或者装个插件来看结果：</p><img src="https://static001.geekbang.org/resource/image/bd/32/bdcaa07b1ce26ffe504a7fde931b1d32.png" alt=""><p>或者用JMeter来生成HTML：</p><img src="https://static001.geekbang.org/resource/image/98/f2/98d050b5df8554a7109e3e532e0781f2.png" alt=""><p>这样看都没有问题，我们在前面也强调过，对于压力工具来说，我们最多只关心三条曲线的数据：TPS（T由测试目标定义）、响应时间、错误率。这里的错误率还只是辅助排查问题的曲线，没有问题时，只看TPS和响应时间即可。</p><p>不过采取以上三种方式有几个方面的问题。</p><ol><li>整理结果时比较浪费时间。</li><li>在GUI用插件看曲线，做高并发时并不现实。</li><li>在场景运行时间比较长的时候，采用生成HTML的方式，会出现消耗内存过大的情况，而实际上，在生成的结果图中，有很多生成的图我们并不是那么关注。</li><li>生成的结果保存之后再查看比较麻烦，还要一个个去找。</li></ol><p>那么如何解决这几个问题呢？</p><p>用JMeter的Backend Listener帮我们实时发送数据到InfluxDB或Graphite可以解决这样的问题。Graphite Backend Listener的支持是在JMeter 2.13版本，InfluxdDB Backend Listener的支持是在JMeter 3.3的版本，它们都是用异步的方式把数据发送出来，以便查看。</p><p>其实有这个JMeter发送给InfluxDB的数据之后，我们不需要看上面的那些HTML数据，也可以直观地看到系统性能的性能趋势。并且这样保存下来的数据，在测试结束后想再次查看也比较方便比对。</p><p>JMeter+InfluxDB+Grafana的结构如下：</p><img src="https://static001.geekbang.org/resource/image/60/d6/60e7006b3baf95393080b302ccab9fd6.jpg" alt=""><p>在这个结构中，JMeter发送压力到服务器的同时，统计下TPS、响应时间、线程数、错误率等信息。默认每30秒在控制台输出一次结果（在jmeter.properties中有一个参数#summariser.interval=30可以控制）。配置了Backend Listener之后，将统计出的结果异步发送到InfluxDB中。最后在Grafana中配置InfluxDB数据源和JMeter显示模板。</p><p>然后就可以实时查看JMeter的测试结果了，这里看到的数据和控制台的数据是一样。</p><p>但如果这么简单就说完了，这篇文章也就没价值了。下面我们来说一下，数据的传输和展示逻辑。</p><h3 id="jmeter中backend-listener的配置" tabindex="-1"><a class="header-anchor" href="#jmeter中backend-listener的配置"><span>JMeter中Backend Listener的配置</span></a></h3><p>下面我们就InfluxDB的Backend Listener做个说明。它的配置比较简单，在脚本中加上即可。</p><img src="https://static001.geekbang.org/resource/image/b1/38/b1da92bbdf07f81f80c17a863a1ae238.png" alt=""><p>我们先配置好influxdb Url、application等信息，application这个配置可以看成是场景名。</p><p>那么JMeter如何将数据发给InfluxDB呢？请看源码中的关键代码，如下所示：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>    private void addMetrics(String transaction, SamplerMetric metric) {</span></span>
<span class="line"><span>        // FOR ALL STATUS</span></span>
<span class="line"><span>        addMetric(transaction, metric.getTotal(), metric.getSentBytes(), metric.getReceivedBytes(), TAG_ALL, metric.getAllMean(), metric.getAllMinTime(),</span></span>
<span class="line"><span>                metric.getAllMaxTime(), allPercentiles.values(), metric::getAllPercentile);</span></span>
<span class="line"><span>        // FOR OK STATUS</span></span>
<span class="line"><span>        addMetric(transaction, metric.getSuccesses(), null, null, TAG_OK, metric.getOkMean(), metric.getOkMinTime(),</span></span>
<span class="line"><span>                metric.getOkMaxTime(), okPercentiles.values(), metric::getOkPercentile);</span></span>
<span class="line"><span>        // FOR KO STATUS</span></span>
<span class="line"><span>        addMetric(transaction, metric.getFailures(), null, null, TAG_KO, metric.getKoMean(), metric.getKoMinTime(),</span></span>
<span class="line"><span>                metric.getKoMaxTime(), koPercentiles.values(), metric::getKoPercentile);</span></span>
<span class="line"><span>​</span></span>
<span class="line"><span>​</span></span>
<span class="line"><span>        metric.getErrors().forEach((error, count) -&amp;gt; addErrorMetric(transaction, error.getResponseCode(),</span></span>
<span class="line"><span>                    error.getResponseMessage(), count));</span></span>
<span class="line"><span>    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从这段代码可以看出，站在全局统计的视角来看，这里把JMeter运行的统计结果，比如事务的Total请求、发送接收字节、平均值、最大值、最小值等，都加到metric中，同时也会把成功和失败的事务信息添加到metric中去。</p><p>在源码中，还有更多的添加metric的步骤，你有兴趣的话，也可以看一下JMeter源码中的<code>InfluxdbBackendListenerClient.java</code>。</p><p>保存了metric之后，再使用InfluxdbMetricsSender发送到Influxdb中去。发送关键代码如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>   @Override</span></span>
<span class="line"><span>    public void writeAndSendMetrics() {</span></span>
<span class="line"><span> ........</span></span>
<span class="line"><span>        if (!copyMetrics.isEmpty()) {</span></span>
<span class="line"><span>            try {</span></span>
<span class="line"><span>                if(httpRequest == null) {</span></span>
<span class="line"><span>                    httpRequest = createRequest(url);</span></span>
<span class="line"><span>                }</span></span>
<span class="line"><span>                StringBuilder sb = new StringBuilder(copyMetrics.size()*35);</span></span>
<span class="line"><span>                for (MetricTuple metric : copyMetrics) {</span></span>
<span class="line"><span>                    // Add TimeStamp in nanosecond from epoch ( default in InfluxDB )</span></span>
<span class="line"><span>                    sb.append(metric.measurement)</span></span>
<span class="line"><span>                        .append(metric.tag)</span></span>
<span class="line"><span>                        .append(&amp;quot; &amp;quot;) //$NON-NLS-1$</span></span>
<span class="line"><span>                        .append(metric.field)</span></span>
<span class="line"><span>                        .append(&amp;quot; &amp;quot;)</span></span>
<span class="line"><span>                        .append(metric.timestamp+&amp;quot;000000&amp;quot;) </span></span>
<span class="line"><span>                        .append(&amp;quot;\\n&amp;quot;); //$NON-NLS-1$</span></span>
<span class="line"><span>                }</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>                StringEntity entity = new StringEntity(sb.toString(), StandardCharsets.UTF_8);</span></span>
<span class="line"><span>                </span></span>
<span class="line"><span>                httpRequest.setEntity(entity);</span></span>
<span class="line"><span>                lastRequest = httpClient.execute(httpRequest, new FutureCallback&amp;lt;HttpResponse&amp;gt;() {</span></span>
<span class="line"><span>                    @Override</span></span>
<span class="line"><span>                    public void completed(final HttpResponse response) {</span></span>
<span class="line"><span>                        int code = response.getStatusLine().getStatusCode();</span></span>
<span class="line"><span>                        /*</span></span>
<span class="line"><span>                         * HTTP response summary 2xx: If your write request received</span></span>
<span class="line"><span>                         * HTTP 204 No Content, it was a success! 4xx: InfluxDB</span></span>
<span class="line"><span>                         * could not understand the request. 5xx: The system is</span></span>
<span class="line"><span>                         * overloaded or significantly impaired.</span></span>
<span class="line"><span>                         */</span></span>
<span class="line"><span>                        if (MetricUtils.isSuccessCode(code)) {</span></span>
<span class="line"><span>                            if(log.isDebugEnabled()) {</span></span>
<span class="line"><span>                                log.debug(&amp;quot;Success, number of metrics written: {}&amp;quot;, copyMetrics.size());</span></span>
<span class="line"><span>                            } </span></span>
<span class="line"><span>                        } else {</span></span>
<span class="line"><span>                            log.error(&amp;quot;Error writing metrics to influxDB Url: {}, responseCode: {}, responseBody: {}&amp;quot;, url, code, getBody(response));</span></span>
<span class="line"><span>                        }</span></span>
<span class="line"><span>                    }</span></span>
<span class="line"><span>                    @Override</span></span>
<span class="line"><span>                    public void failed(final Exception ex) {</span></span>
<span class="line"><span>                        log.error(&amp;quot;failed to send data to influxDB server : {}&amp;quot;, ex.getMessage());</span></span>
<span class="line"><span>                    }</span></span>
<span class="line"><span>                    @Override</span></span>
<span class="line"><span>                    public void cancelled() {</span></span>
<span class="line"><span>                        log.warn(&amp;quot;Request to influxDB server was cancelled&amp;quot;);</span></span>
<span class="line"><span>                    }</span></span>
<span class="line"><span>                });               </span></span>
<span class="line"><span> ........</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过writeAndSendMetrics，就将所有保存的metrics都发给了InfluxDB。</p><h3 id="influxdb中的存储结构" tabindex="-1"><a class="header-anchor" href="#influxdb中的存储结构"><span>InfluxDB中的存储结构</span></a></h3><p>然后我们再来看下InfluxDB中如何存储：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&amp;gt; show databases</span></span>
<span class="line"><span>name: databases</span></span>
<span class="line"><span>name</span></span>
<span class="line"><span>----</span></span>
<span class="line"><span>_internal</span></span>
<span class="line"><span>jmeter</span></span>
<span class="line"><span>&amp;gt; use jmeter</span></span>
<span class="line"><span>Using database jmeter</span></span>
<span class="line"><span>&amp;gt;</span></span>
<span class="line"><span>&amp;gt; show MEASUREMENTS</span></span>
<span class="line"><span>name: measurements</span></span>
<span class="line"><span>name</span></span>
<span class="line"><span>----</span></span>
<span class="line"><span>events</span></span>
<span class="line"><span>jmeter</span></span>
<span class="line"><span>&amp;gt; select * from events where application=&#39;7ddemo&#39;</span></span>
<span class="line"><span>name: events</span></span>
<span class="line"><span>time                application text                title</span></span>
<span class="line"><span>----                ----------- ----                -----</span></span>
<span class="line"><span>1575255462806000000 7ddemo      Test Cycle1 started ApacheJMeter</span></span>
<span class="line"><span>1575256463820000000 7ddemo      Test Cycle1 ended   ApacheJMeter</span></span>
<span class="line"><span>..............</span></span>
<span class="line"><span>n&amp;gt; select * from jmeter where application=&#39;7ddemo&#39; limit 10</span></span>
<span class="line"><span>name: jmeter</span></span>
<span class="line"><span>time                application avg                count countError endedT hit max maxAT meanAT min minAT pct90.0            pct95.0           pct99.0 rb responseCode responseMessage sb startedT statut transaction</span></span>
<span class="line"><span>----                ----------- ---                ----- ---------- ------ --- --- ----- ------ --- ----- -------            -------           ------- -- ------------ --------------- -- -------- ------ -----------</span></span>
<span class="line"><span>1575255462821000000 7ddemo                                          0              0     0          0                                                                                     0               internal</span></span>
<span class="line"><span>1575255467818000000 7ddemo      232.82352941176472 17    0                 17  849              122       384.9999999999996  849               849     0                               0           all    all</span></span>
<span class="line"><span>1575255467824000000 7ddemo      232.82352941176472 17                          849              122       384.9999999999996  849               849     0                               0           all    0_openIndexPage</span></span>
<span class="line"><span>1575255467826000000 7ddemo      232.82352941176472 17                          849              122       384.9999999999996  849               849                                                 ok     0_openIndexPage</span></span>
<span class="line"><span>1575255467829000000 7ddemo                                          0              1     1          1                                                                                     1               internal</span></span>
<span class="line"><span>1575255472811000000 7ddemo      205.4418604651163  26    0                 26  849              122       252.6              271.4             849     0                               0           all    all</span></span>
<span class="line"><span>1575255472812000000 7ddemo                                          0              1     1          1                                                                                     1               internal</span></span>
<span class="line"><span>1575255472812000000 7ddemo      205.4418604651163  26                          849              122       252.6              271.4             849                                                 ok     0_openIndexPage</span></span>
<span class="line"><span>1575255472812000000 7ddemo      205.4418604651163  26                          849              122       252.6              271.4             849     0                               0           all    0_openIndexPage</span></span>
<span class="line"><span>1575255477811000000 7ddemo      198.2142857142857  27    0                 27  849              117       263.79999999999995 292.3500000000001 849     0                               0           all    all</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码也就是说，在InfluxDB中，创建了两个MEASUREMENTS，分别是events和jmeter。这两个各自存了数据，我们在界面中配置的testtile和eventTags放在了events这个MEASUREMENTS中。在模板中这两个值暂时都是不用的。</p><p>在jmeter这个MEASUREMENTS中，我们可以看到application和事务的统计信息，这些值和控制台一致。</p><p>在Grafana中显示的时候，就是从这个表中取出的数据，根据时序做的曲线。</p><h3 id="grafana中的配置" tabindex="-1"><a class="header-anchor" href="#grafana中的配置"><span>Grafana中的配置</span></a></h3><p>有了JMeter发送到InfluxDB中的数据，下面就来配置一下Grafana中的展示。首先，要配置一个InfluxDB数据源。如下所示：</p><img src="https://static001.geekbang.org/resource/image/88/c8/880584ed313336eac49fe7fe6f82a3c8.png" alt=""><p>在这里配置好URL、Database、User、Password之后，直接点击保存即可。</p><p>然后添加一个JMeter dashboard，我们常用的dashboard是Grafana官方ID为5496的模板。导入进来后，选择好对应的数据源。</p><img src="https://static001.geekbang.org/resource/image/f7/82/f7291868468ec639efda5b24b2555182.png" alt=""><p>然后就看到界面了。</p><img src="https://static001.geekbang.org/resource/image/97/f3/97095aac53edf2d164e25de3db3221f3.png" alt=""><p>这时还没有数据，我们稍后做个示例，看下JMeter中的数据怎么和这个界面的数据对应起来。</p><p>我们先看下图中两个重要的数据查询语句吧。</p><p>TPS曲线：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>SELECT last(&amp;quot;count&amp;quot;) / $send_interval FROM &amp;quot;$measurement_name&amp;quot; WHERE (&amp;quot;transaction&amp;quot; =~ /^$transaction$/ AND &amp;quot;statut&amp;quot; = &#39;ok&#39;) AND $timeFilter GROUP BY time($__interval)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>上面这个就是Total TPS了，在这里称为throughput。关于这个概念，我在第一篇中就已经有了说明，这里再次提醒，概念的使用在团队中要有统一的认识，不要受行业内一些传统信息的误导。</p><p>这里取的数据来自MEASUREMENTS中成功状态的所有事务。</p><p>响应时间曲线：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>SELECT mean(&amp;quot;pct95.0&amp;quot;) FROM &amp;quot;$measurement_name&amp;quot; WHERE (&amp;quot;application&amp;quot; =~ /^$application$/) AND $timeFilter GROUP BY &amp;quot;transaction&amp;quot;, time($__interval) fill(null)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这里是用95 pct内的响应时间画出来的曲线。</p><p>整体展示出来的效果如下：</p><img src="https://static001.geekbang.org/resource/image/ff/3d/ffac987c827b103fef240916f7cb233d.png" alt=""><h3 id="数据比对" tabindex="-1"><a class="header-anchor" href="#数据比对"><span>数据比对</span></a></h3><p>首先，我们在JMeter中配置一个简单的场景。10个线程，每个线程迭代10次，以及两个HTTP请求。</p><img src="https://static001.geekbang.org/resource/image/55/dc/5546c4449baf0e59d477095a93d717dc.png" alt=""><p>也就是说，这时会产生10x10x2=200次请求。我们用JMeter跑起来看一下。</p><img src="https://static001.geekbang.org/resource/image/92/b9/92d1144a5e8d9ebb7fec246777431bb9.png" alt=""><p>看到了吧，这个请求数和我们预想的一样。下面我们看一下Grafana中展示出来的结果。</p><img src="https://static001.geekbang.org/resource/image/ff/55/ffb38e433239eeb4712887f7d9723155.png" alt=""><p>还有针对每个事务的统计情况。</p><img src="https://static001.geekbang.org/resource/image/3b/47/3b921720759c06ea39673ec5c84a8047.png" alt=""><p>至此，JMeter到Grafana的展示过程就完成了。以后我们就不用再保存JMeter的执行结果了，也不用等着JMeter输出HTML了。</p><h2 id="node-exporter-prometheus-grafana的数据展示逻辑" tabindex="-1"><a class="header-anchor" href="#node-exporter-prometheus-grafana的数据展示逻辑"><span>node_exporter+Prometheus+Grafana的数据展示逻辑</span></a></h2><p>对性能测试来说，在常用的Grafana+Prometheus+Exporter的逻辑中，第一步要看的就是操作系统资源了。所以在这一篇中，我们将以node_exporter为例来说明一下操作系统抽取数据的逻辑，以便知道监控数据的来源，至于数据的含义，我们将在后续的文章中继续描述。</p><p>首先，我们还是要画一个图。</p><img src="https://static001.geekbang.org/resource/image/39/6b/39a970eea119124245e2318779ec7c6b.jpg" alt=""><p>现在node_exporter可以支持很多个操作系统了。官方列表如下：</p><img src="https://static001.geekbang.org/resource/image/76/e9/76c6d768b427dd0e3003f9c78a57b3e9.png" alt=""><p>当然不是说只支持这些，你也可以扩展自己的Exporter。</p><h3 id="配置node-exporter" tabindex="-1"><a class="header-anchor" href="#配置node-exporter"><span>配置node_exporter</span></a></h3><p>node_exporter目录如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>[root@7dgroup2 node_exporter-0.18.1.linux-amd64]# ll</span></span>
<span class="line"><span>total 16524</span></span>
<span class="line"><span>-rw-r--r-- 1 3434 3434    11357 Jun  5 00:50 LICENSE</span></span>
<span class="line"><span>-rwxr-xr-x 1 3434 3434 16878582 Jun  5 00:41 node_exporter</span></span>
<span class="line"><span>-rw-r--r-- 1 3434 3434      463 Jun  5 00:50 NOTICE</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>[root@7dgroup2 node_exporter-0.18.1.linux-amd64]#./node_exporter --web.listen-address=:9200 &amp;amp;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>是不是很简洁？如果想看更多的功能 ，可以查看下它的帮助。</p><h3 id="配置prometheus" tabindex="-1"><a class="header-anchor" href="#配置prometheus"><span>配置Prometheus</span></a></h3><p>先下载Prometheus：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>[root@7dgroup2 data]# wget -c https://github.com/prometheus/prometheus/releases/download/v2.14.0/prometheus-2.14.0.linux-amd64.tar.gz</span></span>
<span class="line"><span>..........</span></span>
<span class="line"><span>100%[=============================================================================================&amp;gt;] 58,625,125   465KB/s   in 6m 4s</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>2019-11-29 15:40:16 (157 KB/s) - ‘prometheus-2.14.0.linux-amd64.tar.gz’ saved [58625125/58625125]</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>[root@7dgroup2 data]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解压之后，我们可以看到目录结构如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>[root@7dgroup2 prometheus-2.11.1.linux-amd64]# ll</span></span>
<span class="line"><span>total 120288</span></span>
<span class="line"><span>drwxr-xr-x. 2 3434 3434     4096 Jul 10 23:26 console_libraries</span></span>
<span class="line"><span>drwxr-xr-x. 2 3434 3434     4096 Jul 10 23:26 consoles</span></span>
<span class="line"><span>drwxr-xr-x. 3 root root     4096 Nov 30 12:55 data</span></span>
<span class="line"><span>-rw-r--r--. 1 3434 3434    11357 Jul 10 23:26 LICENSE</span></span>
<span class="line"><span>-rw-r--r--. 1 root root       35 Aug  7 23:19 node.yml</span></span>
<span class="line"><span>-rw-r--r--. 1 3434 3434     2770 Jul 10 23:26 NOTICE</span></span>
<span class="line"><span>-rwxr-xr-x. 1 3434 3434 76328852 Jul 10 21:53 prometheus</span></span>
<span class="line"><span>-rw-r--r--  1 3434 3434     1864 Sep 21 09:36 prometheus.yml</span></span>
<span class="line"><span>-rwxr-xr-x. 1 3434 3434 46672881 Jul 10 21:54 promtool</span></span>
<span class="line"><span>[root@7dgroup2 prometheus-2.11.1.linux-amd64]#</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>prometheus.yml</code>中添加如下配置，以取数据：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>  - job_name: &#39;s1&#39;</span></span>
<span class="line"><span>    static_configs:</span></span>
<span class="line"><span>    - targets: [&#39;172.17.211.143:9200&#39;]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>[root@7dgroup2 data]# ./prometheus --config.file=prometheus.yml &amp;amp;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这样就行了吗？当然不是。根据上面的流程图，我们还需要配置Grafana。</p><h3 id="配置grafana" tabindex="-1"><a class="header-anchor" href="#配置grafana"><span>配置Grafana</span></a></h3><p>首先配置一个数据源，非常简单。如下所示：</p><img src="https://static001.geekbang.org/resource/image/7f/04/7fdde673c4aabe7d2b0293384237dc04.png" alt=""><p>再配置一个node_exporter的模板，比如我这里选择了官方模板（ID：11074），展示如下：</p><img src="https://static001.geekbang.org/resource/image/33/00/33c880ff5ba645285f6e6dfbd32aed00.png" alt=""><h3 id="数据逻辑说明" tabindex="-1"><a class="header-anchor" href="#数据逻辑说明"><span>数据逻辑说明</span></a></h3><p>说明完上面的过程之后，对我们做性能测试和分析的人来说，最重要的，就是要知道数据的来源和含义了。</p><p>拿上面图中的CPU使用率来说吧（因为CPU使用率是非常重要的一个计数器，所以我们今天先拿它来开刀）。</p><p>我们先点一下title上的edit，看一下它的query语句。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>avg(irate(node_cpu_seconds_total{instance=~&amp;quot;$node&amp;quot;,mode=&amp;quot;system&amp;quot;}[30m])) by (instance)</span></span>
<span class="line"><span>avg(irate(node_cpu_seconds_total{instance=~&amp;quot;$node&amp;quot;,mode=&amp;quot;user&amp;quot;}[30m])) by (instance)</span></span>
<span class="line"><span>avg(irate(node_cpu_seconds_total{instance=~&amp;quot;$node&amp;quot;,mode=&amp;quot;iowait&amp;quot;}[30m])) by (instance)</span></span>
<span class="line"><span>1 - avg(irate(node_cpu_seconds_total{instance=~&amp;quot;$node&amp;quot;,mode=&amp;quot;idle&amp;quot;}[30m])) by (instance)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这些都是从Prometheus中取出来的数据，查询语句读了Prometheus中<code>node_cpu_seconds_total</code>的不同的模块数据。</p><p>下面我们来看一下，<code>node_exporter</code>暴露出来的计数器。</p><img src="https://static001.geekbang.org/resource/image/a6/b0/a6a96e9ead348d8d206c8f10e1890db0.png" alt=""><p>这些值和top一样，都来自于<code>/proc/</code>目录。下面这张图是top数据，我们可以比对一下。</p><img src="https://static001.geekbang.org/resource/image/2d/50/2d62f76de8535a92caa3c0e140cba250.png" alt=""><p>到此，我们就了解到了操作系统中监控数据的取值逻辑了，也就是从操作系统本身的计数器中取出值来，然后传给Prometheus，再由Grafana中的query语句查出相应的数据，最后由Grafana展示在界面上。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>为什么要解释数据的逻辑呢？</p><p>因为最近在工作中遇到一些情况，有人觉得有了Prometheus+Grafana+Exportor这样的组合工具之后，基本上都不再用手工执行什么命令了。但我们要了解的是，对于监控平台来说，它取的所有的数据必然是被监控者可以提供的数据，像node_exporter这样小巧的监控收集器，它可以获取的监控数据，并不是整个系统全部的性能数据，只是取到了常见的计数器而已。</p><p>这些计数器不管是用命令查看，还是用这样炫酷的工具查看，它的值本身都不会变。所以不管是在监控平台上看到的数据，还是在命令行中看到的数据，我们最重要的是要知道含义以及这些值的变化对性能测试和分析的下一步骤的影响。</p><p>后面我们将着重来解释这些细节。</p><h2 id="问题" tabindex="-1"><a class="header-anchor" href="#问题"><span>问题</span></a></h2><p>最后我个问题吧，你可以自己去验证下。JMeter是如何把数据推送到Grafana中呢？另外，同样是监控操作系统的计数器，监控平台中的数据和监控命令中的数据有什么区别？</p><p>欢迎你在评论区写下你的思考，也欢迎把这篇文章分享给你的朋友或者同事，一起交流一下。</p>`,122)]))}const c=e(p,[["render",l]]),o=JSON.parse('{"path":"/posts/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%AE%9E%E6%88%9830%E8%AE%B2/%E7%AC%AC%E4%B8%89%E6%A8%A1%E5%9D%97%EF%BC%9A%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7%E7%AF%87/16%E4%B8%A8%E6%A1%88%E4%BE%8B%EF%BC%9A%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7%E5%B7%A5%E5%85%B7%E4%B9%8BGrafana_Prometheus_Exporters.html","title":"16丨案例：性能监控工具之Grafana+Prometheus+Exporters","lang":"zh-CN","frontmatter":{"description":"16丨案例：性能监控工具之Grafana+Prometheus+Exporters 在本模块中，我将把几个常用的监控部分给梳理一下。前面我们提到过，在性能监控图谱中，有操作系统、应用服务器、中间件、队列、缓存、数据库、网络、前端、负载均衡、Web服务器、存储、代码等很多需要监控的点。 显然这些监控点不能在一个专栏中全部覆盖并一一细化，我只能找最常用的几...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/interview/posts/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%AE%9E%E6%88%9830%E8%AE%B2/%E7%AC%AC%E4%B8%89%E6%A8%A1%E5%9D%97%EF%BC%9A%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7%E7%AF%87/16%E4%B8%A8%E6%A1%88%E4%BE%8B%EF%BC%9A%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7%E5%B7%A5%E5%85%B7%E4%B9%8BGrafana_Prometheus_Exporters.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"16丨案例：性能监控工具之Grafana+Prometheus+Exporters"}],["meta",{"property":"og:description","content":"16丨案例：性能监控工具之Grafana+Prometheus+Exporters 在本模块中，我将把几个常用的监控部分给梳理一下。前面我们提到过，在性能监控图谱中，有操作系统、应用服务器、中间件、队列、缓存、数据库、网络、前端、负载均衡、Web服务器、存储、代码等很多需要监控的点。 显然这些监控点不能在一个专栏中全部覆盖并一一细化，我只能找最常用的几..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-16T11:19:38.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-16T11:19:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"16丨案例：性能监控工具之Grafana+Prometheus+Exporters\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-08-16T11:19:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755343178000,"updatedTime":1755343178000,"contributors":[{"name":"bbhou","username":"bbhou","email":"1557740299@qq.com","commits":1,"url":"https://github.com/bbhou"}]},"readingTime":{"minutes":12.3,"words":3690},"filePathRelative":"posts/性能测试实战30讲/第三模块：性能监控分析工具篇/16丨案例：性能监控工具之Grafana+Prometheus+Exporters.md","localizedDate":"2025年8月16日","excerpt":"\\n<p><audio id=\\"audio\\" title=\\"16丨案例：性能监控工具之Grafana+Prometheus+Exporters\\" controls=\\"\\" preload=\\"none\\"><source id=\\"mp3\\" src=\\"https://static001.geekbang.org/resource/audio/95/79/953457c8660169380e1d736b6c2c3979.mp3\\"></audio></p>\\n<p>在本模块中，我将把几个常用的监控部分给梳理一下。前面我们提到过，在性能监控图谱中，有操作系统、应用服务器、中间件、队列、缓存、数据库、网络、前端、负载均衡、Web服务器、存储、代码等很多需要监控的点。</p>","autoDesc":true}');export{c as comp,o as data};
