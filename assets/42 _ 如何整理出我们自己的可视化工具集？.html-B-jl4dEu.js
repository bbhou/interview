import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as t,o as n}from"./app-d8EKP-K0.js";const o={};function p(h,e){return n(),a("div",null,e[0]||(e[0]=[t('<h1 id="_42-如何整理出我们自己的可视化工具集" tabindex="-1"><a class="header-anchor" href="#_42-如何整理出我们自己的可视化工具集"><span>42 _ 如何整理出我们自己的可视化工具集？</span></a></h1><p><audio id="audio" title="42 | 如何整理出我们自己的可视化工具集？" controls="" preload="none"><source id="mp3" src="https://static001.geekbang.org/resource/audio/16/9b/169c4556ea87100eb2ff21b128c8289b.mp3"></audio></p><p>你好，我是月影。</p><p>我们知道，可视化虽然可以认为是前端的一个小分支，但总体来说它也是一个比较有广度的领域，从内容上大体包括数据图表、图形绘制、地理信息可视化、3D场景和数字孪生应用等等，从设备上包括移动端、PC浏览器和可视化大屏等等。</p><p>作为刚刚入门可视化领域的工程师，我们经常会因为知识面不够广、工具不够丰富，而寄望于用单一的工具来解决我们遇到的所有问题，所谓“手里有锤子，看什么都像是钉子”。想想也知道，这并不能很好地处理所有的可视化应用。因为，一旦我们选择了错误的、不适合于当前场景的工具，就会让最终实现的结果不理想，或者开发效率不高。</p><p>因此，想要成为一名优秀的可视化工程师，我们必须要知道如何丰富自己手中的工具集，来应对各种场景和挑战。丰富工具集，并不意味着我们需要从头开发一切适合各种场景使用的工具。大部分时候，我们可以利用行业发展和社区的力量，站在巨人的肩膀上，使用各种成熟的工具，来更好地完成我们的项目。</p><p>那今天，我带你一起系统地梳理目前行业里，适合可视化应用的优秀且成熟的工具，来丰富你的工具箱，让你在面对各种可视化需求时能够游刃有余。</p><p>首先，我们来看看可视化应用的主体需求分类，搞清楚了这些，我们才能选择出更合适的工具来完成这些需求。根据可视化场景，主体需求一般可以分成5种，分别是绘制基本图形、绘制基础图表、绘制关系图和流程图、绘制地理信息以及绘制三维模型和数字孪生应用。接下来，我就一一来说。</p><img src="https://static001.geekbang.org/resource/image/88/a8/8869a44444710e25556fd1b801a400a8.jpeg" alt=""><h2 id="选择绘制基本图形的工具" tabindex="-1"><a class="header-anchor" href="#选择绘制基本图形的工具"><span>选择绘制基本图形的工具</span></a></h2><p>我们先来说说绘制基本图形要选择的工具。简单情况下，我们用浏览器原生的四类基本图形系统就可以完成绘制，分别是HTML/CSS、SVG、Canvas和WebGL。</p><p>HTML/CSS比较简单，也有很多丰富的前端领域的工具，这里就不多说了。SVG原生的API使用起来也并不复杂，不过我们也可以用一些成熟的绘图库，它能够让我们更方便地绘制各种图形。我比较推荐 <a href="http://snapsvg.io/" target="_blank" rel="noopener noreferrer">Snap.svg</a> 这个库，它提供的API能够非常方便地绘制各种SVG图形。尤其值得赞扬的是它提供了一套<a href="http://snapsvg.io/start/" target="_blank" rel="noopener noreferrer">交互式教学文档</a>，能够让你快速上手整个库的使用。</p><p>如果你使用Canvas和WebGL来绘制图形，可选的工具就比较多了。比较成熟的2D渲染引擎包括 <a href="https://github.com/fabricjs/fabric.js" target="_blank" rel="noopener noreferrer">Fabric.js</a>、<a href="https://github.com/pixijs/pixi.js" target="_blank" rel="noopener noreferrer">Pixi.js</a> 等，比较成熟的2D/3D引擎包括 <a href="https://spritejs.org/#/" target="_blank" rel="noopener noreferrer">SpriteJS</a>、<a href="https://github.com/processing/p5.js" target="_blank" rel="noopener noreferrer">P5.js</a> 等，以及比较成熟的3D引擎包括 <a href="https://github.com/mrdoob/three.js" target="_blank" rel="noopener noreferrer">ThreeJS</a>、<a href="https://github.com/BabylonJS/Babylon.js" target="_blank" rel="noopener noreferrer">Babylon.js</a> 等。这些库各有特点，它们的官方使用文档和示例都比较完善，我建议你多花一些时间去学习它们的使用方法。这能帮助你在绘制基本图形的时候，灵活选用适合的库。</p><p>另外，既然说到了Canvas2D绘制图形，那我还要提一下<a href="https://github.com/rough-stuff/rough" target="_blank" rel="noopener noreferrer">Rough.js</a>这个库。这是个非常有特点的库，它能够绘制出带有手绘风格的图形，比如，我们在<a href="https://time.geekbang.org/column/article/255584" target="_blank" rel="noopener noreferrer">第5课</a>就使用过它。</p><p>我刚才说的这些工具，对于绘制基本的2D/3D图形来说已经足够了。但是，功能相对更强大和丰富的库，体积也会更大一些，使用上也会复杂一些，所以我们还是应该根据实际需求复杂程度来灵活选择。</p><h2 id="选择绘制基础图表的工具" tabindex="-1"><a class="header-anchor" href="#选择绘制基础图表的工具"><span>选择绘制基础图表的工具</span></a></h2><p>绘制基础图表是可视化项目中很常见的需求，我们可以采用图表库和数据驱动框架来完成。常用的成熟图表库包括 <a href="https://echarts.apache.org/" target="_blank" rel="noopener noreferrer">ECharts</a>、<a href="https://github.com/chartjs/Chart.js" target="_blank" rel="noopener noreferrer">Chart.js</a>、<a href="https://github.com/highcharts/highcharts" target="_blank" rel="noopener noreferrer">Highcharts</a>、<a href="https://antv-2018.alipay.com/zh-cn/g2/3.x/index.html" target="_blank" rel="noopener noreferrer">AntV G2</a> 这4种。大部分图表库在使用上大同小异，效果也差别不大，好像选什么都没有差别。但在选择图表库的时候，我们也需要考虑底层的图形系统或图形库，这关系到复杂图表渲染和交互的性能，另外在同时需要绘制图表和基本图形的时候，选择统一的图形系统可以保持一致性，也能更好地实现图表与图形的协同交互。</p><p>这里，我就说几个常见的搭配组合。如果你使用SpriteJS作为底层图形库，还可以选择<a href="https://www.qcharts.cn/#/home" target="_blank" rel="noopener noreferrer">QCharts</a>。如果你是在移动端设备渲染图表，可以考虑使用<a href="https://antv-2018.alipay.com/zh-cn/f2/3.x/index.html" target="_blank" rel="noopener noreferrer">AntV F2</a>，这是一个专为移动端场景设计的图表库。如果你要绘制更加灵活的图表，以及关系图和流程图，可以选择数据驱动框架，例如<a href="https://github.com/d3/d3" target="_blank" rel="noopener noreferrer">D3.js</a>。不过D3.js虽然很好用，但它是一个足够复杂的框架，如果你希望在可视化领域深入发展，最好能再多花一些时间，彻底掌握它的使用方法。</p><p>最后，我还想再说说<a href="https://vega.github.io/vega/" target="_blank" rel="noopener noreferrer">Vega</a>这个库。这也是一个图表库，它定义了一套基于JSON规范的可视化语法，以声明式的方式来绘制各种图表。最关键的是，Vega定义可视化语法规范的思路，对我们自己设计和实现图表库有着非常大的借鉴意义。如果你打算自己设计一套图表库，我希望你能好好研究一下Vega，相信你会有所收获的。</p><h2 id="选择绘制关系图和流程图的工具" tabindex="-1"><a class="header-anchor" href="#选择绘制关系图和流程图的工具"><span>选择绘制关系图和流程图的工具</span></a></h2><p>接着，我们再来说一类特殊的图表，比如关系图、流程图、脑图等等。我们一般将它们单独归为一类应用，称为图可视化。</p><p>图可视化怎么实现呢？我们在<a href="https://time.geekbang.org/column/article/291822" target="_blank" rel="noopener noreferrer">第38课</a>里使用D3.js实现过相关的例子。除了D3.js以外，还有一类直接绘制这些图形的图可视化库，常用的有<a href="https://github.com/mermaid-js/mermaid" target="_blank" rel="noopener noreferrer">Mermaid.js</a>、<a href="http://sigmajs.org/" target="_blank" rel="noopener noreferrer">Sigma.js</a>以及<a href="https://antv-2018.alipay.com/zh-cn/g6/3.x/index.html" target="_blank" rel="noopener noreferrer">AntV G6</a>等等。</p><p>其中Mermaid.js量级更轻，主要是以声明的方式来绘制各种流程图。而Sigma.js和AntV G6的功能更丰富，实现的图可视化不仅类型更多，还能包含复杂的用户交互效果。</p><p>此外，还有一个特殊的库<a href="https://github.com/dagrejs/dagre" target="_blank" rel="noopener noreferrer">Dagre</a>。它是绘制流程图的底层库，主要是用来计算图的元素布局，使用它再结合图形库，我们就能自己实现一个绘制流程图的图可视化库。这个图可视化库实现起来也不是很难，我把这个任务留在本节课的末尾，你可以试着去挑战一下。</p><h2 id="选择地理信息可视化工具" tabindex="-1"><a class="header-anchor" href="#选择地理信息可视化工具"><span>选择地理信息可视化工具</span></a></h2><p>前面两节课，我们一起完成了3D地理信息可视化的实战。地理信息可视化是可视化项目中很重要的一类应用，大部分可视化大屏应用场景都会包含地图或者3D地球，因为许多数据本就和地理信息相关。由于需求很多，因此市场上有许多地理信息可视化的库可供我们选择。</p><p>比较成熟的地理信息可视化库包括<a href="https://www.mapbox.com/" target="_blank" rel="noopener noreferrer">MapBox</a>、<a href="https://maptalks.org/" target="_blank" rel="noopener noreferrer">MapTalks</a>、<a href="https://leafletjs.com/" target="_blank" rel="noopener noreferrer">Leaflet.js</a>、<a href="https://github.com/huiyan-fe/mapv" target="_blank" rel="noopener noreferrer">MapV</a>、<a href="https://antv-2018.alipay.com/zh-cn/l7/1.x/index.html" target="_blank" rel="noopener noreferrer">AntV L7</a>等等，它们都支持简单的geoJSON、topoJSON数据和分片加载的瓦片地图。另外d3的子模块<a href="https://github.com/d3/d3-geo" target="_blank" rel="noopener noreferrer">d3-geo</a>也能够处理地理信息可视化，尤其是它提供了多种地图投影，非常适合与其他库联动，实现各种不同的地图场景应用。</p><p>总体而言，地理信息可视化是可视化领域里比较复杂的方向，这些地理信息可视化库的功能也较为丰富，使用场景很多，如果详细来讲的话，内容足够支撑起一门单独的课程了。我们前面花了3节课来讲的地理信息可视化案例，其实也只是给地理信息可视化应用开了一个头，如果你有兴趣深入学习，可以通过这些地理信息可视化库，再结合实战来真正深入掌握地理信息可视化的方法，这也是成为优秀可视化工程师的必经之路。</p><h2 id="处理三维模型和数字孪生应用" tabindex="-1"><a class="header-anchor" href="#处理三维模型和数字孪生应用"><span>处理三维模型和数字孪生应用</span></a></h2><p>在学习3D图形的绘制的时候，我讲到，3D绘制一般有两种方式，一种是加载静态的3D模型数据，然后将3D物体渲染出来。这些3D模型数据，通常是通过设计工具离线生成的。这种应用场景在游戏领域比较常见。</p><p><a href="https://spritejs.org/demo/#/3d/fox" target="_blank" rel="noopener noreferrer"><img src="https://static001.geekbang.org/resource/image/1a/37/1af60e98b43a3b35a6e42e75d38e8937.jpeg" alt="" title="SpriteJS加载的3D模型数据，图片来源：spritejs.org"></a></p><p>另一类则是动态加载3D几何模型，用前面绘制基本图形的工具就可以实现。在可视化应用中，这类场景通常更普遍。</p><p><a href="https://oframe.github.io/ogl/examples/?src=scene-graph.html" target="_blank" rel="noopener noreferrer"><img src="https://static001.geekbang.org/resource/image/be/f9/be76cd097e373b9c225dd361f58ee2f9.jpeg" alt="" title="动态加载的几何图形，图片来源：OGL"></a></p><p>不过，在可视化领域中，有一类应用也会用到非常多的3D模型，那就是数字孪生应用。所谓数字孪生，是对物理世界实体或系统的数字化表达。简单来说，就是在虚拟世界中，通过3D渲染来还原真实物理世界，这需要我们将现实世界中的物体模型化为虚拟世界中的3D几何体。</p><p><a href="https://36kr.com/p/1723581366273" target="_blank" rel="noopener noreferrer"><img src="https://static001.geekbang.org/resource/image/3b/fa/3bf6256eabca8c8d5a0bcd152154fdfa.jpeg" alt="" title="物理世界和数字孪生示意图，图片来源：36kr.com"></a></p><p>在这样的应用场景中，有时候我们可以考虑采用游戏的方式，使用游戏引擎和框架，例如<a href="https://store.unity.com/products/unity-pro?gclid=CjwKCAjwq_D7BRADEiwAVMDdHsaPnsc1S8jvT8yY47lLFn_jH6WvSTdhlDwf5RJtrC6Leu3LN--2HhoCUqIQAvD_BwE" target="_blank" rel="noopener noreferrer">Unity</a>或者<a href="https://www.unrealengine.com/zh-CN/" target="_blank" rel="noopener noreferrer">虚幻引擎</a>来完成我们的可视化应用。当然，这也就进入了另一个领域，游戏创作的领域。这部分内容，我们简单了解一下就可以了。</p><h2 id="要点总结" tabindex="-1"><a class="header-anchor" href="#要点总结"><span>要点总结</span></a></h2><p>可视化有着丰富的使用场景，大致上可以分为5类，分别是：绘制基本图形、绘制基础图表、图可视化、地理信息可视化以及数字孪生。</p><p>这些场景各自有适合的工具库和框架可供我们选择，我在这里整理了一个脑图，供你在具体应用中参考。</p><img src="https://static001.geekbang.org/resource/image/4d/53/4d546e0ff09bfa513767ba71612c5e53.jpg" alt=""><p>这是我们专栏最后一个模块的最后一节课了，在这几个月的时间里，我们先后学习了图形学与数学、视觉基础、视觉高级以及数据处理的相关知识。其中，我们通过一些可视化实战，学习了部分图形系统与图形库和工具的使用，这当中主要包括SpriteJS、D3.js、QCharts等等。这和我们这节课列出的各类工具相比，可以说是非常少了。</p><p>我想有的同学可能会有疑问，还有这么多的工具我们并没有详细来讲，那我学习到这里，算是真正入门可视化了吗？我想说的是，工具和库都是为我们服务的，正确使用这些工具和库的基础，其实就是我们前面学过的图形学与数学基础、视觉呈现技术，以及数据处理的原则，这些内容才是可视化的本质。而上层的工具和库的使用虽然复杂，但并不难，基本上照着文档学习和实践，就能够一步步掌握。</p><p>而如果缺少扎实的基础，那么在使用工具遇到缺失功能或者性能问题的时候，你就可能会束手无策。因此，这门课，更多的还是为你打好基础，领你进入可视化的世界，今后的路，就要靠你自己一步一步地走了。</p><h2 id="小试牛刀" tabindex="-1"><a class="header-anchor" href="#小试牛刀"><span>小试牛刀</span></a></h2><p>今天，我特意提到了Dagre这个库。它是一个基础库，经常用来给流程图的元素布局，不涉及渲染的部分。你能用它作为基础，再以SpriteJS为渲染引擎，来实现一个高效、强大的流程图库吗（提示：在API方面你可以借鉴Mermaid.js）？</p><p>除此之外，这节课，我们介绍的工具和库非常多，你肯定很难在短时间内完全掌握，但我也不希望你只是泛泛了解。所以，我希望你能选择自己最感兴趣的同类库中的两个库，利用我之前在GitHub仓库里留的北京天气和空气质量数据，分别使用它们做一些可视化应用，比较两个库在使用上的不同，以及各自的优、劣势。</p><p>欢迎把你实现的效果分享到留言区，也欢迎你把自己在工具整理上的心得体会分享出来，我们一起交流！</p><h2 id="推荐阅读" tabindex="-1"><a class="header-anchor" href="#推荐阅读"><span>推荐阅读</span></a></h2><p>[1] <a href="http://snapsvg.io/" target="_blank" rel="noopener noreferrer">Snap.svg</a>、[2] <a href="https://github.com/fabricjs/fabric.js" target="_blank" rel="noopener noreferrer">Fabric.js</a>、[3] <a href="https://github.com/pixijs/pixi.js" target="_blank" rel="noopener noreferrer">Pixi.js</a></p><p>[4] <a href="https://spritejs.org/#/" target="_blank" rel="noopener noreferrer">SpriteJS</a>、[5] <a href="https://github.com/processing/p5.js" target="_blank" rel="noopener noreferrer">P5.js</a>、[6] <a href="https://github.com/mrdoob/three.js" target="_blank" rel="noopener noreferrer">ThreeJS</a></p><p>[7] <a href="https://github.com/BabylonJS/Babylon.js" target="_blank" rel="noopener noreferrer">Babylon.js</a>、[8] <a href="https://github.com/rough-stuff/rough" target="_blank" rel="noopener noreferrer">Rough.js</a>、[9] <a href="https://echarts.apache.org/" target="_blank" rel="noopener noreferrer">ECharts</a></p><p>[10] <a href="https://github.com/chartjs/Chart.js" target="_blank" rel="noopener noreferrer">Chart.js</a>、[11] <a href="https://github.com/highcharts/highcharts" target="_blank" rel="noopener noreferrer">Highcharts</a>、[12] <a href="https://antv-2018.alipay.com/zh-cn/g2/3.x/index.html" target="_blank" rel="noopener noreferrer">AntV G2</a></p><p>[13] <a href="https://www.qcharts.cn/#/home" target="_blank" rel="noopener noreferrer">QCharts</a>、[14] <a href="https://antv-2018.alipay.com/zh-cn/f2/3.x/index.html" target="_blank" rel="noopener noreferrer">AntV F2</a>、[15] <a href="https://vega.github.io/vega/" target="_blank" rel="noopener noreferrer">Vega</a></p><p>[16] <a href="https://github.com/mermaid-js/mermaid" target="_blank" rel="noopener noreferrer">Mermaid.js</a>、[17] <a href="http://sigmajs.org/" target="_blank" rel="noopener noreferrer">Sigma.js</a>、[18] <a href="https://antv-2018.alipay.com/zh-cn/g6/3.x/index.html" target="_blank" rel="noopener noreferrer">AntV G6</a></p><p>[19] <a href="https://github.com/dagrejs/dagre" target="_blank" rel="noopener noreferrer">Dagre</a>、[20] <a href="https://www.mapbox.com/" target="_blank" rel="noopener noreferrer">MapBox</a>、[21] <a href="https://maptalks.org/" target="_blank" rel="noopener noreferrer">MapTalks</a></p><p>[22] <a href="https://leafletjs.com/" target="_blank" rel="noopener noreferrer">Leafletjs</a>、[23] <a href="https://github.com/huiyan-fe/mapv" target="_blank" rel="noopener noreferrer">MapV</a>、[24] <a href="https://antv-2018.alipay.com/zh-cn/l7/1.x/index.html" target="_blank" rel="noopener noreferrer">AntV L7</a></p><p>[25] <a href="https://github.com/d3/d3-geo" target="_blank" rel="noopener noreferrer">d3-geo</a>、[26] <a href="https://store.unity.com/products/unity-pro?gclid=CjwKCAjwq_D7BRADEiwAVMDdHsaPnsc1S8jvT8yY47lLFn_jH6WvSTdhlDwf5RJtrC6Leu3LN--2HhoCUqIQAvD_BwE" target="_blank" rel="noopener noreferrer">Unity</a>、[27] <a href="https://www.unrealengine.com/zh-CN/" target="_blank" rel="noopener noreferrer">Unreal Engine</a></p>',57)]))}const i=r(o,[["render",p]]),g=JSON.parse('{"path":"/posts/%E8%B7%9F%E6%9C%88%E5%BD%B1%E5%AD%A6%E5%8F%AF%E8%A7%86%E5%8C%96/%E6%95%B0%E6%8D%AE%E7%AF%87/42%20_%20%E5%A6%82%E4%BD%95%E6%95%B4%E7%90%86%E5%87%BA%E6%88%91%E4%BB%AC%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8F%AF%E8%A7%86%E5%8C%96%E5%B7%A5%E5%85%B7%E9%9B%86%EF%BC%9F.html","title":"42 _ 如何整理出我们自己的可视化工具集？","lang":"zh-CN","frontmatter":{"description":"42 _ 如何整理出我们自己的可视化工具集？ 你好，我是月影。 我们知道，可视化虽然可以认为是前端的一个小分支，但总体来说它也是一个比较有广度的领域，从内容上大体包括数据图表、图形绘制、地理信息可视化、3D场景和数字孪生应用等等，从设备上包括移动端、PC浏览器和可视化大屏等等。 作为刚刚入门可视化领域的工程师，我们经常会因为知识面不够广、工具不够丰富，...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/interview/posts/%E8%B7%9F%E6%9C%88%E5%BD%B1%E5%AD%A6%E5%8F%AF%E8%A7%86%E5%8C%96/%E6%95%B0%E6%8D%AE%E7%AF%87/42%20_%20%E5%A6%82%E4%BD%95%E6%95%B4%E7%90%86%E5%87%BA%E6%88%91%E4%BB%AC%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8F%AF%E8%A7%86%E5%8C%96%E5%B7%A5%E5%85%B7%E9%9B%86%EF%BC%9F.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"42 _ 如何整理出我们自己的可视化工具集？"}],["meta",{"property":"og:description","content":"42 _ 如何整理出我们自己的可视化工具集？ 你好，我是月影。 我们知道，可视化虽然可以认为是前端的一个小分支，但总体来说它也是一个比较有广度的领域，从内容上大体包括数据图表、图形绘制、地理信息可视化、3D场景和数字孪生应用等等，从设备上包括移动端、PC浏览器和可视化大屏等等。 作为刚刚入门可视化领域的工程师，我们经常会因为知识面不够广、工具不够丰富，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-16T11:19:38.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-16T11:19:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"42 _ 如何整理出我们自己的可视化工具集？\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-08-16T11:19:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755343178000,"updatedTime":1755343178000,"contributors":[{"name":"bbhou","username":"bbhou","email":"1557740299@qq.com","commits":1,"url":"https://github.com/bbhou"}]},"readingTime":{"minutes":12.07,"words":3620},"filePathRelative":"posts/跟月影学可视化/数据篇/42 _ 如何整理出我们自己的可视化工具集？.md","localizedDate":"2025年8月16日","excerpt":"\\n<p><audio id=\\"audio\\" title=\\"42 | 如何整理出我们自己的可视化工具集？\\" controls=\\"\\" preload=\\"none\\"><source id=\\"mp3\\" src=\\"https://static001.geekbang.org/resource/audio/16/9b/169c4556ea87100eb2ff21b128c8289b.mp3\\"></audio></p>\\n<p>你好，我是月影。</p>\\n<p>我们知道，可视化虽然可以认为是前端的一个小分支，但总体来说它也是一个比较有广度的领域，从内容上大体包括数据图表、图形绘制、地理信息可视化、3D场景和数字孪生应用等等，从设备上包括移动端、PC浏览器和可视化大屏等等。</p>","autoDesc":true}');export{i as comp,g as data};
