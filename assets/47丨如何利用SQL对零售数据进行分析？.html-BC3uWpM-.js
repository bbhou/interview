import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,a as n,o as i}from"./app-d8EKP-K0.js";const p={};function t(r,e){return i(),s("div",null,e[0]||(e[0]=[n(`<h1 id="_47丨如何利用sql对零售数据进行分析" tabindex="-1"><a class="header-anchor" href="#_47丨如何利用sql对零售数据进行分析"><span>47丨如何利用SQL对零售数据进行分析？</span></a></h1><p><audio id="audio" title="47丨如何利用SQL对零售数据进行分析？" controls="" preload="none"><source id="mp3" src="https://static001.geekbang.org/resource/audio/4a/f5/4a89ff436f212733f9a69beeaa8e0ef5.mp3"></audio></p><p>我们通过OLTP系统实时捕捉到了用户的数据，还需要在OLAP系统中对它们进行分析。之前我们讲解了如何对数据进行清洗，以及如何对分散在不同地方的数据进行集成，今天我们来看下如何使用SQL分析这些数据。</p><p>关于这部分内容，今天我们一起来学习下：</p><ol><li>使用SQL进行数据分析都有哪几种姿势？</li><li>如何通过关联规则挖掘零售数据中的频繁项集？</li><li>如何使用SQL+Python完成零售数据的关联分析？</li></ol><h2 id="使用sql进行数据分析的5种姿势" tabindex="-1"><a class="header-anchor" href="#使用sql进行数据分析的5种姿势"><span>使用SQL进行数据分析的5种姿势</span></a></h2><p>在DBMS中，有些数据库管理系统很好地集成了BI工具，可以方便我们对收集的数据进行商业分析。</p><p>SQL Server提供了BI分析工具，我们可以通过使用SQL Server中的Analysis Services完成数据挖掘任务。SQL Server内置了多种数据挖掘算法，比如常用的EM、K-Means聚类算法、决策树、朴素贝叶斯和逻辑回归等分类算法，以及神经网络等模型。我们还可以对这些算法模型进行可视化效果呈现，帮我们优化和评估算法模型的好坏。</p><p>PostgreSQL是免费开源的对象-关系数据库（ORDBMS），它的稳定性非常强，功能强大，在OLTP和OLAP系统上表现都非常出色。同时在机器学习上，配合Madlib项目可以让PostgreSQL如虎添翼。Madlib包括了多种机器学习算法，比如分类、聚类、文本分析、回归分析、关联规则挖掘和验证分析等功能。这样我们可以通过使用SQL，在PostgreSQL中使用各种机器学习算法模型，帮我们进行数据挖掘和分析。</p><p>2018年Google将机器学习（Machine Learning）工具集成到了BigQuery中，发布了BigQuery ML，这样开发者就可以在大型的结构化或半结构化的数据集上构建和使用机器学习模型。通过BigQuery控制台，开发者可以像使用SQL语句一样来完成机器学习模型的训练和预测。</p><p>SQLFlow是蚂蚁金服于2019年开源的机器学习工具，我们通过使用SQL就可以完成机器学习算法的调用，你可以将SQLFlow理解为机器学习的翻译器。我们在SELECT之后加上TRAIN从句就可以完成机器学习模型的训练，在SELECT语句之后加上PREDICT就可以使用模型来进行预测。这些算法模型既包括了传统的机器学习模型，也包括了基于Tensorflow、PyTorch等框架的深度学习模型。</p><p>从下图中你也能看出SQLFlow的使用过程，首先我们可以通过Jupyter notebook来完成SQL语句的交互。SQLFlow支持了多种SQL引擎，包括MySQL、Oracle、Hive、SparkSQL和Flink等，这样我们就可以通过SQL语句从这些DBMS中抽取数据，然后选择想要进行的机器学习算法（包括传统机器学习和深度学习模型）进行训练和预测。不过这个工具刚刚上线，工具、文档、社区还有很多需要完善的地方。<br><br><img src="https://static001.geekbang.org/resource/image/e5/fd/e50038152a1b4e7a9940919be9634dfd.jpg" alt=""><br><br> 最后一个方法是SQL+Python，也是我们今天要讲解的内容。刚才介绍的工具可以说既是SQL查询数据的入口，也是数据分析、机器学习的入口。不过这些模块耦合度高，也可能存在使用的问题。一方面工具会很大，比如在安装SQLFlow的时候，采用Docker方式（下图为使用Docker安装sqlflow的过程）进行安装，整体需要下载的文件会超过2G。同时，在进行机器学习算法调参、优化的时候也存在灵活度差的情况。因此最直接的方式，还是将SQL与机器学习模块分开，采用SQL读取数据，然后通过Python来进行机器学习的处理。</p><img src="https://static001.geekbang.org/resource/image/38/c8/38864b57d8d65728439b730d57d841c8.png" alt=""><h2 id="案例-挖掘零售数据中的频繁项集与关联规则" tabindex="-1"><a class="header-anchor" href="#案例-挖掘零售数据中的频繁项集与关联规则"><span>案例：挖掘零售数据中的频繁项集与关联规则</span></a></h2><p>刚才我们讲解了如何通过SQL来完成数据分析（机器学习）的5种姿势，下面我们还需要通过一个案例来进行具体的讲解。</p><p>我们要分析的是购物篮问题，采用的技术为关联分析。它可以帮我们在大量的数据集中找到商品之间的关联关系，从而挖掘出经常被人们购买的商品组合，一个经典的例子就是“啤酒和尿布”的例子。</p><p>今天我们的数据集来自于一个面包店的21293笔订单，字段包括了Date（日期）、Time（时间）、Transaction（交易ID）以及Item(商品名称)。其中交易ID的范围是[1,9684]，在这中间也有一些交易ID是空缺的，同一笔交易中存在商品重复的情况。除此以外，有些交易是没有商品的，也就是对应的Item为NONE。具体的数据集你可以从<a href="https://github.com/cystanford/SQLApriori" target="_blank" rel="noopener noreferrer">GitHub</a>上下载。</p><p>我们采用的关联分析算法是Apriori算法，它帮我们查找频繁项集，首先我们需要先明白什么是频繁项集。</p><p>频繁项集就是支持度大于等于最小支持度阈值的项集，小于这个最小值支持度的项目就是非频繁项集，而大于等于最小支持度的项集就是频繁项集。支持度是个百分比，指的是某个商品组合出现的次数与总次数之间的比例。支持度越高，代表这个组合出现的频率越大。</p><p>我们来看个例子理解一下，下面是5笔用户的订单，以及每笔订单购买的商品：</p><p><img src="https://static001.geekbang.org/resource/image/58/38/58d7791f7b1fe08f810e9e630b03bf38.png" alt=""><br><br> 在这个例子中，“牛奶”出现了4次，那么这5笔订单中“牛奶”的支持度就是4/5=0.8。同样“牛奶+面包”出现了3次，那么这5笔订单中“牛奶+面包”的支持度就是3/5=0.6。</p><p>同时，我们还需要理解一个概念叫做“置信度”，它表示的是当你购买了商品A，会有多大的概率购买商品B，在这个例子中，置信度（牛奶→啤酒）=2/4=0.5，代表如果你购买了牛奶，会有50%的概率会购买啤酒；置信度（啤酒→牛奶）=2/3=0.67，代表如果你购买了啤酒，有67%的概率会购买牛奶。</p><p>所以说置信度是个条件概念，指的是在A发生的情况下，B发生的概率是多少。</p><p>我们在计算关联关系的时候，往往需要规定最小支持度和最小置信度，这样才可以寻找大于等于最小支持度的频繁项集，以及在频繁项集的基础上，大于等于最小置信度的关联规则。</p><h2 id="使用sql-python完成零售数据的关联分析" tabindex="-1"><a class="header-anchor" href="#使用sql-python完成零售数据的关联分析"><span>使用SQL+Python完成零售数据的关联分析</span></a></h2><p>针对上面的零售数据关联分析的案例，我们可以使用工具自带的关联规则进行分析，比如使用SQL Server Analysis Services的多维数据分析，或者是在Madlib、BigQuery ML、SQLFlow工具中都可以找到相应的关联规则，通过写SQL的方式就可以完成关联规则的调用。</p><p>除此以外，我们还可以直接使用SQL完成数据的查询，然后通过Python的机器学习工具包完成关联分析。下面我们通过之前讲解的SQLAlchemy来完成SQL查询，使用efficient_apriori工具包的Apriori算法。整个工程一共包括3个部分。</p><p>第一个部分为数据加载，首先我们通过sql.create_engine创建SQL连接，然后从bread_basket数据表中读取全部的数据加载到data中。这里需要配置你的MySQL账户名和密码</p><p>第二步为数据预处理，因为数据中存在无效的数据，比如item为NONE的情况，同时Item的大小写格式不统一，因此我们需要先将Item字段都转换为小写的形式，然后去掉Item字段中数值为none的项。在数据预处理中，我们还需要得到一个transactions数组，里面包括了每笔订单的信息，其中每笔订单是以集合的形式进行存储的，这样相同的订单中item就不存在重复的情况，同时也可以使用Apriori工具包直接进行计算。</p><p>最后一步，使用Apriori工具包进行关联分析，这里我们设定了参数min_support=0.02，min_confidence=0.5，也就是最小支持度为0.02，最小置信度为0.5。根据条件找出transactions中的频繁项集itemsets和关联规则rules。</p><p>具体的代码如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>from efficient_apriori import apriori</span></span>
<span class="line"><span>import sqlalchemy as sql</span></span>
<span class="line"><span>import pandas as pd</span></span>
<span class="line"><span># 数据加载</span></span>
<span class="line"><span>engine = sql.create_engine(&#39;mysql+mysqlconnector://root:passwd@localhost/wucai&#39;)</span></span>
<span class="line"><span>query = &#39;SELECT * FROM bread_basket&#39;</span></span>
<span class="line"><span>data = pd.read_sql_query(query, engine)</span></span>
<span class="line"><span># 统一小写</span></span>
<span class="line"><span>data[&#39;Item&#39;] = data[&#39;Item&#39;].str.lower()</span></span>
<span class="line"><span># 去掉none项</span></span>
<span class="line"><span>data = data.drop(data[data.Item == &#39;none&#39;].index)</span></span>
<span class="line"><span> </span></span>
<span class="line"><span># 得到一维数组orders_series，并且将Transaction作为index, value为Item取值</span></span>
<span class="line"><span>orders_series = data.set_index(&#39;Transaction&#39;)[&#39;Item&#39;]</span></span>
<span class="line"><span># 将数据集进行格式转换</span></span>
<span class="line"><span>transactions = []</span></span>
<span class="line"><span>temp_index = 0</span></span>
<span class="line"><span>for i, v in orders_series.items():</span></span>
<span class="line"><span>    if i != temp_index:</span></span>
<span class="line"><span>       temp_set = set()</span></span>
<span class="line"><span>       temp_index = i</span></span>
<span class="line"><span>       temp_set.add(v)</span></span>
<span class="line"><span>       transactions.append(temp_set)</span></span>
<span class="line"><span>    else:</span></span>
<span class="line"><span>       temp_set.add(v)</span></span>
<span class="line"><span># 挖掘频繁项集和频繁规则</span></span>
<span class="line"><span>itemsets, rules = apriori(transactions, min_support=0.02,  min_confidence=0.5)</span></span>
<span class="line"><span>print(&#39;频繁项集：&#39;, itemsets)</span></span>
<span class="line"><span>print(&#39;关联规则：&#39;, rules)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>频繁项集： {1: {(&#39;alfajores&#39;,): 344, (&#39;bread&#39;,): 3096, (&#39;brownie&#39;,): 379, (&#39;cake&#39;,): 983, (&#39;coffee&#39;,): 4528, (&#39;cookies&#39;,): 515, (&#39;farm house&#39;,): 371, (&#39;hot chocolate&#39;,): 552, (&#39;juice&#39;,): 365, (&#39;medialuna&#39;,): 585, (&#39;muffin&#39;,): 364, (&#39;pastry&#39;,): 815, (&#39;sandwich&#39;,): 680, (&#39;scandinavian&#39;,): 275, (&#39;scone&#39;,): 327, (&#39;soup&#39;,): 326, (&#39;tea&#39;,): 1350, (&#39;toast&#39;,): 318, (&#39;truffles&#39;,): 192}, 2: {(&#39;bread&#39;, &#39;cake&#39;): 221, (&#39;bread&#39;, &#39;coffee&#39;): 852, (&#39;bread&#39;, &#39;pastry&#39;): 276, (&#39;bread&#39;, &#39;tea&#39;): 266, (&#39;cake&#39;, &#39;coffee&#39;): 518, (&#39;cake&#39;, &#39;tea&#39;): 225, (&#39;coffee&#39;, &#39;cookies&#39;): 267, (&#39;coffee&#39;, &#39;hot chocolate&#39;): 280, (&#39;coffee&#39;, &#39;juice&#39;): 195, (&#39;coffee&#39;, &#39;medialuna&#39;): 333, (&#39;coffee&#39;, &#39;pastry&#39;): 450, (&#39;coffee&#39;, &#39;sandwich&#39;): 362, (&#39;coffee&#39;, &#39;tea&#39;): 472, (&#39;coffee&#39;, &#39;toast&#39;): 224} }</span></span>
<span class="line"><span>关联规则： [{cake} -&amp;gt; {coffee}, {cookies} -&amp;gt; {coffee}, {hot chocolate} -&amp;gt; {coffee}, {juice} -&amp;gt; {coffee}, {medialuna} -&amp;gt; {coffee}, {pastry} -&amp;gt; {coffee}, {sandwich} -&amp;gt; {coffee}, {toast} -&amp;gt; {coffee}]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>从结果中你能看到购物篮组合中，商品个数为1的频繁项集有19种，分别为面包、蛋糕、咖啡等。商品个数为2的频繁项集有14种，包括（面包，蛋糕），（面包，咖啡）等。其中关联规则有8种，包括了购买蛋糕的人也会购买咖啡，购买曲奇的同时也会购买咖啡等。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>通过SQL完成机器学习往往还是需要使用到Python，因为数据分析是Python的擅长。通过今天的学习你应该能体会到采用SQL工具作为数据查询和分析的入口是一种数据全栈的思路，对于开发人员来说降低了数据分析的技术门槛。</p><p>如果你想要对机器学习或者数据分析算法有更深入的理解，也可以参考我的《数据分析实战45讲》专栏，相信在当今的数据时代，我们的业务增长会越来越依靠于SQL引擎+AI引擎。</p><p><img src="https://static001.geekbang.org/resource/image/88/63/886fc87f717463557457ef8e23218b63.png" alt=""><br><br> 我在文章中举了一个购物篮分析的例子，如下图所示，其中（牛奶、面包、尿布）的支持度是多少呢？</p><p><img src="https://static001.geekbang.org/resource/image/a1/e6/a1767ae691f2c18d02f8009a687ba1e6.png" alt=""><br><br> 欢迎你在评论区写下你的思考，也欢迎把这篇文章分享给你的朋友或者同事，一起交流一下。</p>`,40)]))}const c=a(p,[["render",t]]),d=JSON.parse('{"path":"/posts/SQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9ASQL%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/47%E4%B8%A8%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8SQL%E5%AF%B9%E9%9B%B6%E5%94%AE%E6%95%B0%E6%8D%AE%E8%BF%9B%E8%A1%8C%E5%88%86%E6%9E%90%EF%BC%9F.html","title":"47丨如何利用SQL对零售数据进行分析？","lang":"zh-CN","frontmatter":{"description":"47丨如何利用SQL对零售数据进行分析？ 我们通过OLTP系统实时捕捉到了用户的数据，还需要在OLAP系统中对它们进行分析。之前我们讲解了如何对数据进行清洗，以及如何对分散在不同地方的数据进行集成，今天我们来看下如何使用SQL分析这些数据。 关于这部分内容，今天我们一起来学习下： 使用SQL进行数据分析都有哪几种姿势？ 如何通过关联规则挖掘零售数据中的...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/interview/posts/SQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9ASQL%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/47%E4%B8%A8%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8SQL%E5%AF%B9%E9%9B%B6%E5%94%AE%E6%95%B0%E6%8D%AE%E8%BF%9B%E8%A1%8C%E5%88%86%E6%9E%90%EF%BC%9F.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"47丨如何利用SQL对零售数据进行分析？"}],["meta",{"property":"og:description","content":"47丨如何利用SQL对零售数据进行分析？ 我们通过OLTP系统实时捕捉到了用户的数据，还需要在OLAP系统中对它们进行分析。之前我们讲解了如何对数据进行清洗，以及如何对分散在不同地方的数据进行集成，今天我们来看下如何使用SQL分析这些数据。 关于这部分内容，今天我们一起来学习下： 使用SQL进行数据分析都有哪几种姿势？ 如何通过关联规则挖掘零售数据中的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-16T11:19:38.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-16T11:19:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"47丨如何利用SQL对零售数据进行分析？\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-08-16T11:19:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755343178000,"updatedTime":1755343178000,"contributors":[{"name":"bbhou","username":"bbhou","email":"1557740299@qq.com","commits":1,"url":"https://github.com/bbhou"}]},"readingTime":{"minutes":9.73,"words":2920},"filePathRelative":"posts/SQL必知必会/第四章：SQL项目实战/47丨如何利用SQL对零售数据进行分析？.md","localizedDate":"2025年8月16日","excerpt":"\\n<p><audio id=\\"audio\\" title=\\"47丨如何利用SQL对零售数据进行分析？\\" controls=\\"\\" preload=\\"none\\"><source id=\\"mp3\\" src=\\"https://static001.geekbang.org/resource/audio/4a/f5/4a89ff436f212733f9a69beeaa8e0ef5.mp3\\"></audio></p>\\n<p>我们通过OLTP系统实时捕捉到了用户的数据，还需要在OLAP系统中对它们进行分析。之前我们讲解了如何对数据进行清洗，以及如何对分散在不同地方的数据进行集成，今天我们来看下如何使用SQL分析这些数据。</p>","autoDesc":true}');export{c as comp,d as data};
