import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,a as o,o as a}from"./app-d8EKP-K0.js";const p={};function n(l,e){return a(),r("div",null,e[0]||(e[0]=[o('<h1 id="春节7天练-day-7-贪心、分治、回溯和动态规划" tabindex="-1"><a class="header-anchor" href="#春节7天练-day-7-贪心、分治、回溯和动态规划"><span>春节7天练 _ Day 7：贪心、分治、回溯和动态规划</span></a></h1><p><audio id="audio" title="春节7天练 | Day 7：贪心、分治、回溯和动态规划" controls="" preload="none"><source id="mp3" src="https://static001.geekbang.org/resource/audio/af/74/afbbfa53eb94db1cfb059f15c829bd74.mp3"></audio></p><p>你好，我是王争。今天是节后的第一个工作日，也是我们“春节七天练”的最后一篇。</p><h2 id="几种算法思想必知必会的代码实现" tabindex="-1"><a class="header-anchor" href="#几种算法思想必知必会的代码实现"><span>几种算法思想必知必会的代码实现</span></a></h2><h3 id="回溯" tabindex="-1"><a class="header-anchor" href="#回溯"><span>回溯</span></a></h3><p>利用回溯算法求解八皇后问题</p><p>利用回溯算法求解0-1背包问题</p><h3 id="分治" tabindex="-1"><a class="header-anchor" href="#分治"><span>分治</span></a></h3><ul><li>利用分治算法求一组数据的逆序对个数</li></ul><h3 id="动态规划" tabindex="-1"><a class="header-anchor" href="#动态规划"><span>动态规划</span></a></h3><p>0-1背包问题</p><p>最小路径和（详细可看@Smallfly整理的 Minimum Path Sum）</p><p>编程实现莱文斯坦最短编辑距离</p><p>编程实现查找两个字符串的最长公共子序列</p><p>编程实现一个数据序列的最长递增子序列</p><h2 id="对应的leetcode练习题-smallfly-整理" tabindex="-1"><a class="header-anchor" href="#对应的leetcode练习题-smallfly-整理"><span>对应的LeetCode练习题（@Smallfly 整理）</span></a></h2><ul><li>Regular Expression Matching（正则表达式匹配）</li></ul><p>英文版：<a href="https://leetcode.com/problems/regular-expression-matching/" target="_blank" rel="noopener noreferrer">https://leetcode.com/problems/regular-expression-matching/</a></p><p>中文版：<a href="https://leetcode-cn.com/problems/regular-expression-matching/" target="_blank" rel="noopener noreferrer">https://leetcode-cn.com/problems/regular-expression-matching/</a></p><ul><li>Minimum Path Sum（最小路径和）</li></ul><p>英文版：<a href="https://leetcode.com/problems/minimum-path-sum/" target="_blank" rel="noopener noreferrer">https://leetcode.com/problems/minimum-path-sum/</a></p><p>中文版：<a href="https://leetcode-cn.com/problems/minimum-path-sum/" target="_blank" rel="noopener noreferrer">https://leetcode-cn.com/problems/minimum-path-sum/</a></p><ul><li>Coin Change （零钱兑换）</li></ul><p>英文版：<a href="https://leetcode.com/problems/coin-change/" target="_blank" rel="noopener noreferrer">https://leetcode.com/problems/coin-change/</a></p><p>中文版：<a href="https://leetcode-cn.com/problems/coin-change/" target="_blank" rel="noopener noreferrer">https://leetcode-cn.com/problems/coin-change/</a></p><ul><li>Best Time to Buy and Sell Stock（买卖股票的最佳时机）</li></ul><p>英文版：<a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock/" target="_blank" rel="noopener noreferrer">https://leetcode.com/problems/best-time-to-buy-and-sell-stock/</a></p><p>中文版：<a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/" target="_blank" rel="noopener noreferrer">https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/</a></p><ul><li>Maximum Product Subarray（乘积最大子序列）</li></ul><p>英文版：<a href="https://leetcode.com/problems/maximum-product-subarray/" target="_blank" rel="noopener noreferrer">https://leetcode.com/problems/maximum-product-subarray/</a></p><p>中文版：<a href="https://leetcode-cn.com/problems/maximum-product-subarray/" target="_blank" rel="noopener noreferrer">https://leetcode-cn.com/problems/maximum-product-subarray/</a></p><ul><li>Triangle（三角形最小路径和）</li></ul><p>英文版：<a href="https://leetcode.com/problems/triangle/" target="_blank" rel="noopener noreferrer">https://leetcode.com/problems/triangle/</a></p><p>中文版：<a href="https://leetcode-cn.com/problems/triangle/" target="_blank" rel="noopener noreferrer">https://leetcode-cn.com/problems/triangle/</a></p><p>到此为止，七天的练习就结束了。这些题目都是我精选出来的，是基础数据结构和算法中最核心的内容。建议你一定要全部手写练习。如果一遍搞不定，你可以结合前面的章节，多看几遍，反复练习，直到能够全部搞定为止。</p><p>学习数据结构和算法，最好的方法就是练习和实践。我相信这在任何知识的学习过程中都适用。</p><p>最后，祝你工作顺利！学业进步！</p>',37)]))}const m=t(p,[["render",n]]),i=JSON.parse('{"path":"/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/%E5%8A%A0%E9%A4%90%EF%BC%9A%E6%98%A5%E8%8A%827%E5%A4%A9%E7%BB%83/%E6%98%A5%E8%8A%827%E5%A4%A9%E7%BB%83%20_%20Day%207%EF%BC%9A%E8%B4%AA%E5%BF%83%E3%80%81%E5%88%86%E6%B2%BB%E3%80%81%E5%9B%9E%E6%BA%AF%E5%92%8C%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92.html","title":"春节7天练 _ Day 7：贪心、分治、回溯和动态规划","lang":"zh-CN","frontmatter":{"description":"春节7天练 _ Day 7：贪心、分治、回溯和动态规划 你好，我是王争。今天是节后的第一个工作日，也是我们“春节七天练”的最后一篇。 几种算法思想必知必会的代码实现 回溯 利用回溯算法求解八皇后问题 利用回溯算法求解0-1背包问题 分治 利用分治算法求一组数据的逆序对个数 动态规划 0-1背包问题 最小路径和（详细可看@Smallfly整理的 Mini...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/interview/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/%E5%8A%A0%E9%A4%90%EF%BC%9A%E6%98%A5%E8%8A%827%E5%A4%A9%E7%BB%83/%E6%98%A5%E8%8A%827%E5%A4%A9%E7%BB%83%20_%20Day%207%EF%BC%9A%E8%B4%AA%E5%BF%83%E3%80%81%E5%88%86%E6%B2%BB%E3%80%81%E5%9B%9E%E6%BA%AF%E5%92%8C%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"春节7天练 _ Day 7：贪心、分治、回溯和动态规划"}],["meta",{"property":"og:description","content":"春节7天练 _ Day 7：贪心、分治、回溯和动态规划 你好，我是王争。今天是节后的第一个工作日，也是我们“春节七天练”的最后一篇。 几种算法思想必知必会的代码实现 回溯 利用回溯算法求解八皇后问题 利用回溯算法求解0-1背包问题 分治 利用分治算法求一组数据的逆序对个数 动态规划 0-1背包问题 最小路径和（详细可看@Smallfly整理的 Mini..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-16T11:19:38.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-16T11:19:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"春节7天练 _ Day 7：贪心、分治、回溯和动态规划\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-08-16T11:19:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755343178000,"updatedTime":1755343178000,"contributors":[{"name":"bbhou","username":"bbhou","email":"1557740299@qq.com","commits":1,"url":"https://github.com/bbhou"}]},"readingTime":{"minutes":1.93,"words":580},"filePathRelative":"posts/数据结构与算法之美/加餐：春节7天练/春节7天练 _ Day 7：贪心、分治、回溯和动态规划.md","localizedDate":"2025年8月16日","excerpt":"\\n<p><audio id=\\"audio\\" title=\\"春节7天练 | Day 7：贪心、分治、回溯和动态规划\\" controls=\\"\\" preload=\\"none\\"><source id=\\"mp3\\" src=\\"https://static001.geekbang.org/resource/audio/af/74/afbbfa53eb94db1cfb059f15c829bd74.mp3\\"></audio></p>\\n<p>你好，我是王争。今天是节后的第一个工作日，也是我们“春节七天练”的最后一篇。</p>\\n<h2>几种算法思想必知必会的代码实现</h2>\\n<h3>回溯</h3>\\n<p>利用回溯算法求解八皇后问题</p>","autoDesc":true}');export{m as comp,i as data};
