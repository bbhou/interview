import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as e,o as i}from"./app-d8EKP-K0.js";const _={};function p(l,s){return i(),a("div",null,s[0]||(s[0]=[e(`<h1 id="_22丨mysql-数据库级监控及常用计数器解析-上" tabindex="-1"><a class="header-anchor" href="#_22丨mysql-数据库级监控及常用计数器解析-上"><span>22丨MySQL：数据库级监控及常用计数器解析（上）</span></a></h1><p><audio id="audio" title="22丨MySQL：数据库级监控及常用计数器解析（上）" controls="" preload="none"><source id="mp3" src="https://static001.geekbang.org/resource/audio/b1/55/b1f0d98f9fbf80831ab2bdc41fec7455.mp3"></audio></p><p>数据库是一个非常大的话题，我们在很多地方，都会看到对数据库的性能分析会包括以下部分。</p><img src="https://static001.geekbang.org/resource/image/17/40/178e637e4723e37abb7eb9d477d20f40.png" alt=""><p>但其实呢，以上这些内容都是我们应该具备的基础知识，所以我今天要讲的就是，具备了这些基础知识之后我们应该干什么事情。</p><p>也就是说，从性能瓶颈判断分析的角度入手，才是性能从业人员该有的逻辑。每次我分析一个性能问题时，逻辑总是这样的：</p><img src="https://static001.geekbang.org/resource/image/62/ab/625d1ec2717f84cb2dc9119d8c7e43ab.jpg" alt=""><ol><li>先画出整个系统的架构图。</li><li>列出整个系统中用到了哪些组件。这一步要确定用哪些监控工具来收集数据，具体的内容你可以看下之前讲到的监控设计相关的内容。</li><li>掌握每个组件的架构图。在这一步中需要列出它们的关键性能配置参数。</li><li>在压力场景执行的过程中收集状态计数器。</li><li>通过分析思路画出性能瓶颈的分析决策树。</li><li>找到问题的根本原因。</li><li>提出解决方案并评估每个方案的优缺点和成本。</li></ol><p>这是我一直强调的分析决策树的创建逻辑。有了这些步骤之后，即使不熟悉一个系统，你也可以进行性能分析。</p><p>对于MySQL数据库来说，我们想对它进行分析，同样也需要看它的架构图。如下图所示（这是MySQL5版本的架构示意图）：</p><img src="https://static001.geekbang.org/resource/image/34/42/34c20915477740cac9cfa18aa7114542.png" alt=""><p>这里就有一个问题了：看架构图是看什么？这个图够细吗？</p><p>首先，看架构图，一开始肯定是看大而全的架构。比如说上图，我们知道了，MySQL中有Connection Pool、SQL Interface、Parser等这些大的模块。</p><p>其次，我们得知道这些模块的功能及运行逻辑。比如说，我们看到了这些模块之后，需要知道，当一个SQL通过Connection Pool进到系统之后，需要先进入SQL Interface模块判断这个语句，知道它是一个什么样的SQL，涉及到了什么内容；然后通过Parser模块进行语法语义检查，并生成相应的执行计划；接着到Optimizer模块进行优化，判断走什么索引，执行顺序之类的；然后就到Caches中找数据，如果在Caches中找不到数据的话，就得通过文件系统到磁盘中找。</p><p>这就是一个大体的逻辑。但是知道了这个逻辑还不够。还记得前面我们说的对一个组件进行“全局—定向”的监控思路吧。</p><p>这里我们也得找工具实现对MySQL的监控，还好MySQL的监控工具非常多。</p><p>在讲MySQL的监控工具之前，我们先来了解下MySQL中的两个Schema，分别是<code>information_schema</code>和<code>performance_schema</code> 。</p><p>为什么呢？</p><p><code>information_schema</code>保存了数据库中的所有表、列、索引、权限、配置参数、状态参数等信息。像我们常执行的<code>show processlist;</code>就来自于这个schema中的processlist表。</p><p><code>performance_schema</code>提供了数据库运行时的资源消耗情况，它以较低的代价收集信息，可以提供不少性能数据。</p><p>所以这两个Schema对我们来说就非常重要了。</p><p>你没事的时候，也可以查一下它们相关的各个表，一个个看着玩。监控工具中的很多数据来自于它们。</p><p>还有两个命令是你在分析MySQL时一定要学会的：<code>SHOW GLOBAL VARIABLES;</code>和<code>SHOW GLOBAL status;</code>。前一个用来查看配置的参数值，后一个用来查询状态值。当你没有其他工具可用的时候，就可以用这两个命令的输出结果来分析。对于全局监控来说，这两个命令绝对够用。</p><p>对于MySQL的监控工具有很多，但我主要讲的是以下几个工具：<br><br> mysqlreport、pt-query-digest、mysql_exportor+Prometheus+Grafana。</p><p>今天我们先来说一下mysqlreport。</p><h2 id="全局分析-mysqlreport" tabindex="-1"><a class="header-anchor" href="#全局分析-mysqlreport"><span>全局分析：mysqlreport</span></a></h2><p>这个工具执行之后会生成一个文本文件，在这个文本文件中包括了如下这些内容。</p><img src="https://static001.geekbang.org/resource/image/fb/65/fba573a14508771dd20d78379b704665.png" alt=""><p>我觉得这个工具是属于既不浪费资源，又能全局监控MySQL的很好的工具。</p><p>在我们执行性能场景时，如果想让mysqlreport抓取到的数据更为准确，可以先重启一下数据库。如果你觉得重启数据库这个动作实在是有点大，可以先把状态计数器、打开表、查询缓存等数据给刷新一下。</p><p>我认为mysqlreport有一些重要的知识点需要你知道，在这里我找一个例子给你解释一下。</p><h3 id="索引报表" tabindex="-1"><a class="header-anchor" href="#索引报表"><span>索引报表</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>_ Key _________________________________________________________________</span></span>
<span class="line"><span>Buffer used     5.00k of   8.00M  %Used:   0.06</span></span>
<span class="line"><span>  Current       1.46M            %Usage:  18.24</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意，这里所指的Key Buffer是指MyISAM引擎使用的<code>Shared Key Buffer</code>，InnoDB所使用的<code>Key Buffer</code>不在这里统计。</p><p>从上面的数据来看，MySQL每次分配的<code>Key Buffer</code>最大是5K，占8M的0.06%，还是很小的。下一行中的数据可以看到的是当前只用了1.46M，占8M的18.24%。</p><p>显然这个Key Buffer是够用的，如果这个使用率高，你就得增加<code>key_buffer_size</code>的值了。</p><h3 id="操作报表" tabindex="-1"><a class="header-anchor" href="#操作报表"><span>操作报表</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>__ Questions ___________________________________________________________</span></span>
<span class="line"><span>Total         126.82M    32.5/s</span></span>
<span class="line"><span>  +Unknown     72.29M    18.5/s  %Total:  57.00</span></span>
<span class="line"><span>  Com_         27.63M     7.1/s           21.79</span></span>
<span class="line"><span>  DMS          26.81M     6.9/s           21.14</span></span>
<span class="line"><span>  COM_QUIT     45.30k     0.0/s            0.04</span></span>
<span class="line"><span>  QC Hits      38.18k     0.0/s            0.03</span></span>
<span class="line"><span>Slow 2 s        6.21M     1.6/s            4.90  %DMS:  23.17  Log:</span></span>
<span class="line"><span>DMS            26.81M     6.9/s           21.14</span></span>
<span class="line"><span>  SELECT       20.73M     5.3/s           16.34         77.30</span></span>
<span class="line"><span>  INSERT        3.68M     0.9/s            2.90         13.71</span></span>
<span class="line"><span>  UPDATE        1.43M     0.4/s            1.13          5.33</span></span>
<span class="line"><span>  DELETE      983.11k     0.3/s            0.78          3.67</span></span>
<span class="line"><span>  REPLACE           0       0/s            0.00          0.00</span></span>
<span class="line"><span>Com_           27.63M     7.1/s           21.79</span></span>
<span class="line"><span>  admin_comma  11.86M     3.0/s            9.35</span></span>
<span class="line"><span>  set_option   10.40M     2.7/s            8.20</span></span>
<span class="line"><span>  commit        5.15M     1.3/s            4.06</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从这个数据可以看到的信息量就有点大了，它可以反应出来这个数据库现在忙不忙。</p><p>从32.5每秒的操作量上来说，还是有点忙的。你还可以看到下面有操作数的细分，其实我不太愿意看下面的这些细分，描述上除了<code>QC Hits</code>和<code>DMS</code>的意思比较清晰之外，其他的几个值理解起来比较费劲。我也不建议你看下面那几个，因为它们对性能分析来说没起到什么正向的作用。</p><p>而Slow 那这一行就很重要了，从这行可以看出<code>slow log</code>的时间是设置为2秒的，并且每秒还出现1.6个的慢日志，可见这个系统的SQL的慢日志实在是有点多。</p><p><code>DMS</code>部分可以告诉我们这个数据库中各种SQL所占的比例。其实它是具有指向性的，像我们的这个例子中，显然是<code>SELECT</code>多，那如果要做SQL优化的话，肯定优先考虑<code>SELECT</code>的语句，才会起到立竿见影的效果。</p><h3 id="查询和排序报表" tabindex="-1"><a class="header-anchor" href="#查询和排序报表"><span>查询和排序报表</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>__ SELECT and Sort _____________________________________________________</span></span>
<span class="line"><span>Scan            7.88M     2.0/s %SELECT:  38.04</span></span>
<span class="line"><span>Range         237.84k     0.1/s            1.15</span></span>
<span class="line"><span>Full join       5.97M     1.5/s           28.81</span></span>
<span class="line"><span>Range check   913.25k     0.2/s            4.41</span></span>
<span class="line"><span>Full rng join  18.47k     0.0/s            0.09</span></span>
<span class="line"><span>Sort scan     737.86k     0.2/s</span></span>
<span class="line"><span>Sort range     56.13k     0.0/s</span></span>
<span class="line"><span>Sort mrg pass 282.65k     0.1/s</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个报表具有着绝对的问题指向性。这里的<code>Scan</code>（全表扫描）和<code>Full join</code>（联合全表扫描）在场景执行过程中实在是太多了，这显然是SQL写得有问题。</p><p>Range范围查询很正常，本来就应该多。</p><h3 id="查询缓存报表" tabindex="-1"><a class="header-anchor" href="#查询缓存报表"><span>查询缓存报表</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>__ Query Cache _________________________________________________________</span></span>
<span class="line"><span>Memory usage  646.11k of   1.00M  %Used:  63.10</span></span>
<span class="line"><span>Block Fragmnt  14.95%</span></span>
<span class="line"><span>Hits           38.18k     0.0/s</span></span>
<span class="line"><span>Inserts         1.53k     0.0/s</span></span>
<span class="line"><span>Insrt:Prune    2.25:1     0.0/s</span></span>
<span class="line"><span>Hit:Insert    24.94:1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这部分中，我们看的关键点是，<code>Query Cache</code>没用！因为各种<code>query</code>都没有缓存下来。同时这里我们还要看一个关键值，那就是<code>Block Fragment</code>，它是表明<code>Query Cache</code>碎片的，值越高，则说明问题越大。</p><p>如果你看到下面这样的数据，就明显没有任何问题。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>__ Query Cache ______________________________________________________</span></span>
<span class="line"><span>Memory usage   38.05M of 256.00M  %Used:  14.86</span></span>
<span class="line"><span>Block Fragmnt   4.29%</span></span>
<span class="line"><span>Hits           12.74k    33.3/s</span></span>
<span class="line"><span>Inserts        58.21k   152.4/s</span></span>
<span class="line"><span>Insrt:Prune  58.21k:1   152.4/s</span></span>
<span class="line"><span>Hit:Insert     0.22:1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个数据明显看到缓存了挺多的数据。Hits这一行指的是每秒有多少个SELECT语句从<code>Query Cache</code>中取到了数据，这个值是越大越好。</p><p>而通过<code>Insrt:Prune</code>的比值数据，我们可以看到Insert远远大于Prune（每秒删除的<code>Query Cache</code>碎片)，这个比值越大就说明<code>Query Cache</code>越稳定。如果这个值接近1：1那才有问题，这个时候就要加大<code>Query Cache</code>或修改你的SQL了。</p><p>而通过下面的<code>Hit:Insert</code>的值，我们可以看出命中要少于插入数，说明插入的比查询的还要多，这时就要去看这个性能场景中是不是全是插入了。如果我们查看了，发现SELECT语句还是很多的，而这个比值又是Hit少，那么我们的场景中使用的数据应该并不是插入的数据。其实在性能场景的执行过程中经常这样。所以在性能分析的过程中，我们只要知道这个值就可以了，并不能说明<code>Query Cache</code>就是无效的了。</p><h3 id="表信息报表" tabindex="-1"><a class="header-anchor" href="#表信息报表"><span>表信息报表</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>__ Table Locks _________________________________________________________</span></span>
<span class="line"><span>Waited              0       0/s  %Total:   0.00</span></span>
<span class="line"><span>Immediate         996     0.0/s</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>__ Tables ______________________________________________________________</span></span>
<span class="line"><span>Open             2000 of 2000    %Cache: 100.00</span></span>
<span class="line"><span>Opened         15.99M     4.1/s</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个很明显了，表锁倒是不存在。但是你看现在<code>table_open_cache</code>已经达到上限了，设置为2000，而现在已经达到了2000，同时每秒打开表4.1个。</p><p>这些数据说明了什么呢？首先打开的表肯定是挺多的了，因为达到上限了嘛。这时候你会自然而然地想到去调<code>table_open_cache</code>参数。但是我建议你调之前先分析下其他的部分，如果在这个性能场景中，MySQL的整体负载就会比较高，同时也并没有报错，那么我不建议你调这个值。如果负载不高，那再去调它。</p><h3 id="连接报表和临时表" tabindex="-1"><a class="header-anchor" href="#连接报表和临时表"><span>连接报表和临时表</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>__ Connections _________________________________________________________</span></span>
<span class="line"><span>Max used          521 of 2000      %Max:  26.05</span></span>
<span class="line"><span>Total          45.30k     0.0/s</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>__ Created Temp ________________________________________________________</span></span>
<span class="line"><span>Disk table    399.77k     0.1/s</span></span>
<span class="line"><span>Table           5.81M     1.5/s    Size:  16.0M</span></span>
<span class="line"><span>File            2.13k     0.0/s</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个数据连接还完全够用，但是从临时表创建在磁盘（Disk table）和临时文件（File)上的量级来说，还是有点偏大了，所以，可以增大<code>tmp_table_size</code>。</p><h3 id="线程报表" tabindex="-1"><a class="header-anchor" href="#线程报表"><span>线程报表</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>__ Threads _____________________________________________________________</span></span>
<span class="line"><span>Running            45 of   79</span></span>
<span class="line"><span>Cached              9 of   28      %Hit:  72.35</span></span>
<span class="line"><span>Created        12.53k     0.0/s</span></span>
<span class="line"><span>Slow                0       0/s</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>__ Aborted _____________________________________________________________</span></span>
<span class="line"><span>Clients             0       0/s</span></span>
<span class="line"><span>Connects            7     0.0/s</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>__ Bytes _______________________________________________________________</span></span>
<span class="line"><span>Sent          143.98G   36.9k/s</span></span>
<span class="line"><span>Received       21.03G    5.4k/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当Running的线程数超过配置值时，就需要增加<code>thread_cache_size</code>。但是从这里来看，并没有超过，当前配置了79，只用到了45。而这里Cached的命中<code>%Hit</code>是越大越好，我们通常都希望在99%以上。</p><h3 id="innodb缓存池报表" tabindex="-1"><a class="header-anchor" href="#innodb缓存池报表"><span>InnoDB缓存池报表</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>__ InnoDB Buffer Pool __________________________________________________</span></span>
<span class="line"><span>Usage           1.87G of   4.00G  %Used:  46.76</span></span>
<span class="line"><span>Read hit      100.00%</span></span>
<span class="line"><span>Pages</span></span>
<span class="line"><span>  Free        139.55k            %Total:  53.24</span></span>
<span class="line"><span>  Data        122.16k                     46.60 %Drty:   0.00</span></span>
<span class="line"><span>  Misc            403                      0.15</span></span>
<span class="line"><span>  Latched                                  0.00</span></span>
<span class="line"><span>Reads         179.59G   46.0k/s</span></span>
<span class="line"><span>  From file    21.11k     0.0/s            0.00</span></span>
<span class="line"><span>  Ahead Rnd         0       0/s</span></span>
<span class="line"><span>  Ahead Sql                 0/s</span></span>
<span class="line"><span>Writes         54.00M    13.8/s</span></span>
<span class="line"><span>Flushes         3.16M     0.8/s</span></span>
<span class="line"><span>Wait Free           0       0/s</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个部分对MySQL来说是很重要的，<code>innodb_buffer_pool_size</code>为4G，它会存储表数据、索引数据等。通常在网上或书籍里，你能看到有人建议将这个值设置为物理内存的50%，当然这个值没有绝对的，还要在具体的应用场景中测试才能知道。</p><p>这里的<code>Read hit</code>达到100%，这很好。</p><p>下面还有些其他的读写数据，这部分的数据将和我们在操作系统上看到的I/O有很大关系。有些时候，由于写入的过多，导致操作系统的<code>I/O wait</code>很高的时候，我们不得不设置<code>innodb_flush_log_at_trx_commit</code>参数（0：延迟写，实时刷；1：实时写，实时刷；2：实时写，延迟刷）和<code>sync_binlog</code> 参数（0：写入系统缓存，而不刷到磁盘；1：同步写入磁盘；N：写N次系统缓存后执行一次刷新操作）来降低写入磁盘的频率，但是这样做的风险就是当系统崩溃时会有数据的丢失。</p><p>这其实是我们做测试时，存储性能不高的时候常用的一种手段，为了让TPS更高一些。但是，你一定要知道生产环境中的存储是什么样的能力，以确定在生产环境中应该如何配置这个参数。</p><h3 id="innodb锁报表" tabindex="-1"><a class="header-anchor" href="#innodb锁报表"><span>InnoDB锁报表</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>__ InnoDB Lock _________________________________________________________</span></span>
<span class="line"><span>Waits          227829     0.1/s</span></span>
<span class="line"><span>Current             1</span></span>
<span class="line"><span>Time acquiring</span></span>
<span class="line"><span>  Total     171855224 ms</span></span>
<span class="line"><span>  Average         754 ms</span></span>
<span class="line"><span>  Max            6143 ms</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个信息就有意思了。显然在这个例子中，锁的次数太多了，并且锁的时间都还不短，平均时间都能达到754ms，这显然是不能接受的。</p><p>那就会有人问了，锁次数和锁的平均时间多少才是正常呢？在我的经验中，锁平均时间最好接近零。锁次数可以有，这个值是累加的，所以数据库启动时间长，用得多，锁次数就会增加。</p><h3 id="innodb其他信息" tabindex="-1"><a class="header-anchor" href="#innodb其他信息"><span>InnoDB其他信息</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>__ InnoDB Data, Pages, Rows ____________________________________________</span></span>
<span class="line"><span>Data</span></span>
<span class="line"><span>  Reads        35.74k     0.0/s</span></span>
<span class="line"><span>  Writes        6.35M     1.6/s</span></span>
<span class="line"><span>  fsync         4.05M     1.0/s</span></span>
<span class="line"><span>  Pending</span></span>
<span class="line"><span>    Reads           0</span></span>
<span class="line"><span>    Writes          0</span></span>
<span class="line"><span>    fsync           0</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>Pages</span></span>
<span class="line"><span>  Created      87.55k     0.0/s</span></span>
<span class="line"><span>  Read         34.61k     0.0/s</span></span>
<span class="line"><span>  Written       3.19M     0.8/s</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>Rows</span></span>
<span class="line"><span>  Deleted     707.46k     0.2/s</span></span>
<span class="line"><span>  Inserted    257.12M    65.9/s</span></span>
<span class="line"><span>  Read        137.86G   35.3k/s</span></span>
<span class="line"><span>  Updated       1.13M     0.3/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的数据可以明确告诉你的一点是，在这个性能场景中，插入占有着绝对的量级。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>好了，我们拿一个mysqlreport报表从上到下看了一遍之后，你是不是觉得对MySQL有点感觉了？这里我给一个结论性的描述吧：</p><ol><li>在这个性能场景中，慢日志太多了，需要定向监控看慢SQL，找到慢SQL的执行计划。</li><li>在这个插入多的场景中，锁等待太多，并且等待的时候又太长，解决慢SQL之后，这里可能会解决，但还是要分析具体的原因的，所以这里也是指向了SQL。</li></ol><p>这里为什么要描述得这么细致呢？主要是因为当你看其他一些工具的监控数据时，分析思路是可以共用的。</p><p>但是有人说这里还有一个问题：SQL怎么看？</p><p>其实对于我们分析的逻辑来说，在数据库中看SQL就是在做定向的分析了。请你不要相信一些人所吹嘘的那样，一开始就把所有的SQL执行时间统计出来，这真的是完全没有必要的做法。因为成本太高了。</p><p>在下一篇文章里，我们换个工具来看看SQL的执行时间到底应该怎么分析。</p><h2 id="思考题" tabindex="-1"><a class="header-anchor" href="#思考题"><span>思考题</span></a></h2><p>最后给你留两道思考题吧，MySQL中全局监控工具可以给我们提供哪些信息？以及，如何判断MySQL状态值和配置值之间的关系呢？</p><p>欢迎你在评论区写下你的思考，也欢迎把这篇文章分享给你的朋友或者同事。</p>`,87)]))}const r=n(_,[["render",p]]),t=JSON.parse('{"path":"/posts/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%AE%9E%E6%88%9830%E8%AE%B2/%E7%AC%AC%E4%B8%89%E6%A8%A1%E5%9D%97%EF%BC%9A%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7%E7%AF%87/22%E4%B8%A8MySQL%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BA%A7%E7%9B%91%E6%8E%A7%E5%8F%8A%E5%B8%B8%E7%94%A8%E8%AE%A1%E6%95%B0%E5%99%A8%E8%A7%A3%E6%9E%90%EF%BC%88%E4%B8%8A%EF%BC%89.html","title":"22丨MySQL：数据库级监控及常用计数器解析（上）","lang":"zh-CN","frontmatter":{"description":"22丨MySQL：数据库级监控及常用计数器解析（上） 数据库是一个非常大的话题，我们在很多地方，都会看到对数据库的性能分析会包括以下部分。 但其实呢，以上这些内容都是我们应该具备的基础知识，所以我今天要讲的就是，具备了这些基础知识之后我们应该干什么事情。 也就是说，从性能瓶颈判断分析的角度入手，才是性能从业人员该有的逻辑。每次我分析一个性能问题时，逻辑...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/interview/posts/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%AE%9E%E6%88%9830%E8%AE%B2/%E7%AC%AC%E4%B8%89%E6%A8%A1%E5%9D%97%EF%BC%9A%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7%E7%AF%87/22%E4%B8%A8MySQL%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BA%A7%E7%9B%91%E6%8E%A7%E5%8F%8A%E5%B8%B8%E7%94%A8%E8%AE%A1%E6%95%B0%E5%99%A8%E8%A7%A3%E6%9E%90%EF%BC%88%E4%B8%8A%EF%BC%89.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"22丨MySQL：数据库级监控及常用计数器解析（上）"}],["meta",{"property":"og:description","content":"22丨MySQL：数据库级监控及常用计数器解析（上） 数据库是一个非常大的话题，我们在很多地方，都会看到对数据库的性能分析会包括以下部分。 但其实呢，以上这些内容都是我们应该具备的基础知识，所以我今天要讲的就是，具备了这些基础知识之后我们应该干什么事情。 也就是说，从性能瓶颈判断分析的角度入手，才是性能从业人员该有的逻辑。每次我分析一个性能问题时，逻辑..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-16T11:19:38.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-16T11:19:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"22丨MySQL：数据库级监控及常用计数器解析（上）\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-08-16T11:19:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755343178000,"updatedTime":1755343178000,"contributors":[{"name":"bbhou","username":"bbhou","email":"1557740299@qq.com","commits":1,"url":"https://github.com/bbhou"}]},"readingTime":{"minutes":12.52,"words":3756},"filePathRelative":"posts/性能测试实战30讲/第三模块：性能监控分析工具篇/22丨MySQL：数据库级监控及常用计数器解析（上）.md","localizedDate":"2025年8月16日","excerpt":"\\n<p><audio id=\\"audio\\" title=\\"22丨MySQL：数据库级监控及常用计数器解析（上）\\" controls=\\"\\" preload=\\"none\\"><source id=\\"mp3\\" src=\\"https://static001.geekbang.org/resource/audio/b1/55/b1f0d98f9fbf80831ab2bdc41fec7455.mp3\\"></audio></p>\\n<p>数据库是一个非常大的话题，我们在很多地方，都会看到对数据库的性能分析会包括以下部分。</p>\\n<img src=\\"https://static001.geekbang.org/resource/image/17/40/178e637e4723e37abb7eb9d477d20f40.png\\" alt=\\"\\">","autoDesc":true}');export{r as comp,t as data};
