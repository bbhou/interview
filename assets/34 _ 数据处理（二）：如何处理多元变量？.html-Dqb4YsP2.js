import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,a as e,o as i}from"./app-d8EKP-K0.js";const p={};function l(t,s){return i(),n("div",null,s[0]||(s[0]=[e(`<h1 id="_34-数据处理-二-如何处理多元变量" tabindex="-1"><a class="header-anchor" href="#_34-数据处理-二-如何处理多元变量"><span>34 _ 数据处理（二）：如何处理多元变量？</span></a></h1><p><audio id="audio" title="34 | 数据处理（二）：如何处理多元变量？" controls="" preload="none"><source id="mp3" src="https://static001.geekbang.org/resource/audio/19/28/196bdd87cf3a1af3b4dbe228cf608c28.mp3"></audio></p><p>你好，我是月影。</p><p>数据处理是一门很深的学问，想要学好它，我们不仅需要掌握很复杂的理论，还需要不断地积累经验。不过，其中也有一些基础的数据处理技巧，掌握它们，我们就能更好地入门可视化了。</p><p>比如我们上节课重点讲解的数据分类，就是其中一种非常基础的数据处理技巧，也是数据处理的第一步。这一节课，我会以处理2014年北京市的天气历史数据为例，来和你进一步讨论数据处理的基础技巧，包括从数据到图表的展现以及处理多元变量的方法。</p><h2 id="从数据到图表展现" tabindex="-1"><a class="header-anchor" href="#从数据到图表展现"><span>从数据到图表展现</span></a></h2><p>一般来说，我们拿到的原始数据通常可以组织成表格的形式，表格中会有很多列，每一列都代表一个变量。比如，我们拿到的这份天气历史数据，它看起来可能是下面这样的：</p><img src="https://static001.geekbang.org/resource/image/24/48/24b87b9076ab5df4c9c8ed486a6dc948.jpg" alt=""><p>这里有许多变量，比如时间、最高气温、平均气温、最低气温、最高湿度、平均湿度、最低湿度、露点等等。一般的情况下，我们会将其中我们最关心的一个变量平均气温，用一个图表展现出来。具体怎么做呢？我们可以来动手操作一下。</p><p>这份数据是csv格式的，是一张表，我们先用D3.js将数据读取出来，然后结构化成JSON对象。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>const rawData = await (await fetch(&#39;beijing_2014.csv&#39;)).text();</span></span>
<span class="line"><span>const data = d3.csvParse(rawData);</span></span>
<span class="line"><span>const dataset = data.filter(d =&amp;gt; new Date(d.Date).getMonth() &amp;lt; 3)</span></span>
<span class="line"><span>  .map(d =&amp;gt; {return {temperature: Number(d[&#39;Temperature(Celsius)(avg)&#39;]), date: d.Date, category: &#39;平均气温&#39;} });</span></span>
<span class="line"><span>console.log(dataset);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上面代码所示，我们通过fetch读取csv的数据。CSV文件格式是用逗号和回车分隔的文本，所以我们用.text()读取内容。然后我们使用d3的csvParse方法，将数据解析成JSON数组。最后，我们再通过数组的filter和map，将我们感兴趣的数据取出来。这里，我们截取了1月到3月的平均气温数据。</p><p>取到了想要的数据，接下来我们就可以将它展示出来了，这一步我们可以使用数据驱动框架。在预习篇我们讲过，数据驱动框架是一种特殊的库，它们更专注于处理数据的组织形式，将数据呈现交给更底层的图形系统（DOM、SVG、Canvas）或通用图形库（SpriteJS、ThreeJS）去完成。</p><p>但是，为了方便你理解，这里我就不使用数据驱动框架了，而是直接采用一个图表库<a href="https://www.qcharts.cn/" target="_blank" rel="noopener noreferrer">QCharts</a>，它是一个基于SpriteJS设计的图表库。与数据驱动框架相比，图表库虽然减少了灵活性，但是使用上更加方便，通过一些简单的配置，我们就可以完成图表的渲染。</p><p>用来展示平均气温最常见的图表就是折线图，展示折线图的过程可以简单分为4步：第一步是创建图表（Chart）并传入数据；第二步是创建图形（Visual)，这里我们创建的是折线图，所以使用Line对象；第三步是创建横、纵两个坐标轴（Axis）、提示（ToolTip）和一个图例（Legend）；最后一步是将图形、坐标轴、提示和图例都添加到图表上。具体的代码如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>const { Chart, Line, Legend, Tooltip, Axis } = qcharts;</span></span>
<span class="line"><span>const chart = new Chart({</span></span>
<span class="line"><span>  container: &#39;#app&#39;</span></span>
<span class="line"><span>});</span></span>
<span class="line"><span>let clientRect={bottom:50};</span></span>
<span class="line"><span>chart.source(dataset, {</span></span>
<span class="line"><span>  row: &#39;category&#39;,</span></span>
<span class="line"><span>  value: &#39;temperature&#39;,</span></span>
<span class="line"><span>  text: &#39;date&#39;</span></span>
<span class="line"><span>});</span></span>
<span class="line"><span></span></span>
<span class="line"><span>const line = new Line({clientRect});</span></span>
<span class="line"><span>const axisBottom = new Axis({clientRect}).style(&#39;grid&#39;, false);</span></span>
<span class="line"><span>axisBottom.attr(&#39;formatter&#39;, d =&amp;gt; &#39;&#39;);</span></span>
<span class="line"><span>const toolTip = new Tooltip({</span></span>
<span class="line"><span>  title: arr =&amp;gt; {</span></span>
<span class="line"><span>    return arr.category</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>});</span></span>
<span class="line"><span>const legend = new Legend();</span></span>
<span class="line"><span>const axisLeft = new Axis({ orient: &#39;left&#39;,clientRect }).style(&#39;axis&#39;, false).style(&#39;scale&#39;, false);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>chart.append([line, axisBottom, axisLeft, toolTip, legend]);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，我们就将图表渲染到画布上了。</p><img src="https://static001.geekbang.org/resource/image/3c/fd/3c35aed4df29c2617d6d877fed588ffd.jpg" alt=""><h2 id="处理多元变量" tabindex="-1"><a class="header-anchor" href="#处理多元变量"><span>处理多元变量</span></a></h2><p>刚才我们已经成功将平均气温这个变量用折线图展示出来了，但在很多数据可视化场景里，我们不只会关心一个变量，还会关注多个变量，比如，我们需要同时关注温度和湿度数据。那怎么才能把多个变量绘制在同一张图表上呢？换句话说，同一张图表怎么展示多元变量呢？</p><h3 id="在一张图表上绘制多元变量" tabindex="-1"><a class="header-anchor" href="#在一张图表上绘制多元变量"><span>在一张图表上绘制多元变量</span></a></h3><p>最简单的方式是直接在图表上同时绘制多个变量，每个变量对应一个图形，这样一张图表上就同时显示多个图形。</p><p>我们直接以刚才的代码为例，现在，我们修改例子中的代码，直接添加平均湿度数据，代码如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>const rawData = await (await fetch(&#39;beijing_2014.csv&#39;)).text();</span></span>
<span class="line"><span>const data = d3.csvParse(rawData).filter(d =&amp;gt; new Date(d.Date).getMonth() &amp;lt; 3);</span></span>
<span class="line"><span>const dataset1 = data</span></span>
<span class="line"><span>  .map(d =&amp;gt; {</span></span>
<span class="line"><span>    return {</span></span>
<span class="line"><span>      value: Number(d[&#39;Temperature(Celsius)(avg)&#39;]),</span></span>
<span class="line"><span>      date: d.Date,</span></span>
<span class="line"><span>      category: &#39;平均气温&#39;}</span></span>
<span class="line"><span>    });</span></span>
<span class="line"><span>const dataset2 = data</span></span>
<span class="line"><span>  .map(d =&amp;gt; {</span></span>
<span class="line"><span>      return {</span></span>
<span class="line"><span>        value: Number(d[&#39;Humidity(%)(avg)&#39;]),</span></span>
<span class="line"><span>        date: d.Date,</span></span>
<span class="line"><span>        category: &#39;平均湿度&#39;}</span></span>
<span class="line"><span>      });</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，我们修改图表的数据，将温度（dataset1）和湿度（dataset2）数据都传入图表，代码如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>chart.source([...dataset1, ...dataset2], {</span></span>
<span class="line"><span>  row: &#39;category&#39;,</span></span>
<span class="line"><span>  value: &#39;value&#39;,</span></span>
<span class="line"><span>  text: &#39;date&#39;</span></span>
<span class="line"><span>});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，我们就得到了同时显示温度和湿度数据的折线图。</p><img src="https://static001.geekbang.org/resource/image/8a/f5/8a988aff89201fabea2d63629663ebf5.jpg" alt=""><h3 id="用散点图分析变量的相关性" tabindex="-1"><a class="header-anchor" href="#用散点图分析变量的相关性"><span>用散点图分析变量的相关性</span></a></h3><p>不过，你应该也发现了，把温度和深度同时绘制到一张折线图之后，我们很难直观地看出温度与湿度的相关性。所以，如果我们希望了解2014年全年，北京市温度和湿度之间的关联性，我们还得用另外的方式。那都有哪些方式呢？</p><p>一般来说，要分析两个变量的相关性，我们可以使用散点图，散点图有两个坐标轴，其中一个坐标轴表示变量A，另一个坐标轴表示变量B。这里，我们将平均温度、相对湿度数据获取出来，然后用QCharts的散点图（Scatter）来渲染。具体的代码和示意图如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>const rawData = await (await fetch(&#39;beijing_2014.csv&#39;)).text();</span></span>
<span class="line"><span>const data = d3.csvParse(rawData);</span></span>
<span class="line"><span>console.log(data);</span></span>
<span class="line"><span>const dataset = data</span></span>
<span class="line"><span>  .map(d =&amp;gt; {</span></span>
<span class="line"><span>    return {</span></span>
<span class="line"><span>      temperature: Number(d[&#39;Temperature(Celsius)(avg)&#39;]),</span></span>
<span class="line"><span>      humdity: Number(d[&#39;Humidity(%)(avg)&#39;]),</span></span>
<span class="line"><span>      category: &#39;平均气温与湿度&#39;}</span></span>
<span class="line"><span>    });</span></span>
<span class="line"><span></span></span>
<span class="line"><span>const { Chart, Scatter, Legend, Tooltip, Axis } = qcharts;</span></span>
<span class="line"><span>const chart = new Chart({</span></span>
<span class="line"><span>  container: &#39;#app&#39;</span></span>
<span class="line"><span>});</span></span>
<span class="line"><span>let clientRect={bottom:50};</span></span>
<span class="line"><span>chart.source(dataset, {</span></span>
<span class="line"><span>  row: &#39;category&#39;,</span></span>
<span class="line"><span>  value: &#39;temperature&#39;,</span></span>
<span class="line"><span>  text: &#39;humdity&#39;</span></span>
<span class="line"><span>});</span></span>
<span class="line"><span></span></span>
<span class="line"><span>const scatter = new Scatter({</span></span>
<span class="line"><span>  clientRect,</span></span>
<span class="line"><span>  showGuideLine: true,</span></span>
<span class="line"><span>});</span></span>
<span class="line"><span>const toolTip = new Tooltip({</span></span>
<span class="line"><span>  title: (data) =&amp;gt; &#39;温度与湿度：&#39;,</span></span>
<span class="line"><span>  formatter: (data) =&amp;gt; {</span></span>
<span class="line"><span>    return \`温度：\${data.temperature}C  湿度：\${data.humdity}% \`</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>});</span></span>
<span class="line"><span>const legend = new Legend();</span></span>
<span class="line"><span>const axisLeft = new Axis({ orient: &#39;left&#39;,clientRect }).style(&#39;axis&#39;, false).style(&#39;scale&#39;, false);</span></span>
<span class="line"><span>const axisBottom = new Axis();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>chart.append([scatter, axisBottom, axisLeft, toolTip, legend]);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><img src="https://static001.geekbang.org/resource/image/de/01/dec1994d0a99794182f581924d17ef01.jpg" alt=""><p>从这个图表我们可以看出，平均温度和相对湿度并没有相关性，所以点的空间分布比较随机。事实上也是如此，气温和绝对湿度有关，但相对湿度因为已经考虑过了温度因素，所以就和气温没有相关性了。</p><p>那你可能会有疑问，相关的图形长什么样呢？我们可以用另外两个变量，比如露点和平均温度，来试试看能不能画出相关的散点图。</p><p>我们先来说说什么是露点。在空气中水汽含量不变， 并且气压一定的情况下， 空气能够冷却达到饱和时的温度就叫做露点温度， 简称露点， 它的单位与气温相同。</p><p>从定义里我们知道，露点和温度与湿度都有相关性。接下来，我们来看一下露点和温度的相关性在散点图中是怎么体现的。很简单，我们只要修改一下上面代码里的数据，把平均湿度换成平均露点温度就行了。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>const dataset = data</span></span>
<span class="line"><span>  .map(d =&amp;gt; {</span></span>
<span class="line"><span>    return {</span></span>
<span class="line"><span>      temperature: Number(d[&#39;Temperature(Celsius)(avg)&#39;]),</span></span>
<span class="line"><span>      tdp: Number(d[&#39;Dew Point(Celsius)(avg)&#39;]),</span></span>
<span class="line"><span>      category: &#39;平均气温与露点&#39;}</span></span>
<span class="line"><span>    });</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，我们最终呈现出来的散点图具有典型的数据正相关性，也就是说图形的点更集中在对角线附近的区域。</p><img src="https://static001.geekbang.org/resource/image/48/1a/483712c909fcfd962072a2c19caaeb1a.jpg" alt=""><p>我们还可以把湿度数据也加上。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>const dataset = data</span></span>
<span class="line"><span>  .map(d =&amp;gt; {</span></span>
<span class="line"><span>    return {</span></span>
<span class="line"><span>      value: Number(d[&#39;Temperature(Celsius)(avg)&#39;]),</span></span>
<span class="line"><span>      tdp: Number(d[&#39;Dew Point(Celsius)(avg)&#39;]),</span></span>
<span class="line"><span>      category: &#39;平均气温与露点&#39;}</span></span>
<span class="line"><span>    });</span></span>
<span class="line"><span>const dataset2 = data</span></span>
<span class="line"><span>  .map(d =&amp;gt; {</span></span>
<span class="line"><span>    return {</span></span>
<span class="line"><span>      value: Number(d[&#39;Humidity(%)(avg)&#39;]),</span></span>
<span class="line"><span>      tdp: Number(d[&#39;Dew Point(Celsius)(avg)&#39;]),</span></span>
<span class="line"><span>      category: &#39;平均湿度与露点&#39;}</span></span>
<span class="line"><span>    });</span></span>
<span class="line"><span>   </span></span>
<span class="line"><span>...</span></span>
<span class="line"><span>chart.source([...dataset, ...dataset2], {</span></span>
<span class="line"><span>  row: &#39;category&#39;,</span></span>
<span class="line"><span>  value: &#39;value&#39;,</span></span>
<span class="line"><span>  text: &#39;tdp&#39;</span></span>
<span class="line"><span>});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们发现，平均湿度和露点也是成正相关的，不过露点与温度的相关性更强，因为散点更集中一些。</p><img src="https://static001.geekbang.org/resource/image/6d/86/6dcd043da6c8338865313105733f5286.jpg" alt=""><p>为了再强化理解，我们还可以看一组强相关的数据，比如平均温度和最低温度，你会发现，图上的散点基本上就在对角线上。</p><img src="https://static001.geekbang.org/resource/image/2b/07/2b2c8f25ed11aeb7a00aac436a2f4e07.jpg" alt=""><p>总的来说，两个数据的散点越集中在对角线，说明这两个数据的相关性越强，当然这么说还不够严谨只是方便我们记忆而已。这里，我找到了一张散点图和相关性之间关系的总结图，你可以多了解一下。</p><img src="https://static001.geekbang.org/resource/image/44/61/44ac95977e2143d67c079ec10a9c7661.jpg" alt=""><h3 id="散点图的扩展" tabindex="-1"><a class="header-anchor" href="#散点图的扩展"><span>散点图的扩展</span></a></h3><p>通过前面的例子，我们可以看到，用散点图可以分析出数据的二元变量之间的相关性，这对数据可视化场景的信息处理非常有用。不过，散点图也有明显的局限性，那就是它的维度只有二维，所以它一般只能处理二元变量，超过二维的多元变量的相关性，它处理起来就有些力不从心了。</p><p>不过，我们还不想放弃散点图在相关性上的优异表现。所以在处理高维度数据时，我们可以对散点图进行扩展，比如引入颜色、透明度、大小等信息来表示额外的数据维度，这样就可以处理多维数据了。</p><p>举个例子，我在下面给出了一张根据加州房产数据集制作的散点图。其中，点的大小代表街区人口数量、透明度代表人口密度，而颜色代表房价高低，并且加上经纬度代表点的位置。这个散点图一共表示了五维的变量（经度、纬度、人口总数、人口密度、房价高低），将它们都呈现在了一张图上，这在一定程度上表达了这些变量的相关信息。</p><p><a href="https://zhuanlan.zhihu.com/p/141118125" target="_blank" rel="noopener noreferrer"><img src="https://static001.geekbang.org/resource/image/bc/61/bcbf60ff83cf90a4d5e05d4f78b2b161.jpeg" alt="" title="图片来源：知乎"></a></p><p>这里，我带你做个简单的分析。从这张图上，我们很容易就可以得出两个结论，第一个是，房价比较高的区域集中于两个中心，并且都靠近海湾。第二个是房价高的地方对应的人口密集度也高。</p><p>这就是用散点图处理多维数据的方法了。</p><h3 id="其他图表形式" tabindex="-1"><a class="header-anchor" href="#其他图表形式"><span>其他图表形式</span></a></h3><p>事实上，处理多维信息，我们还可以用其他的图表展现形式，比如用晴雨表来表示数据变化的趋势就比较合适。北大可视化实验室在疫情期间就制作了一张疫情数据晴雨表，你能明显看出每个省份每天的疫情变化。如下所示：</p><p><a href="https://mp.weixin.qq.com/s/Nq0-p6z1GO869XaS0zliiw" target="_blank" rel="noopener noreferrer"><img src="https://static001.geekbang.org/resource/image/48/93/4837642324296791cd00230938bc2e93.jpg" alt="" title="图片来源：mp.weixin.qq.com"></a></p><p>再比如，还有<a href="https://ww2.mathworks.cn/help/stats/examples/visualizing-multivariate-data.html" target="_blank" rel="noopener noreferrer">平行坐标图</a>。平行坐标图也有横纵两个坐标轴，并且把要进行对比的五个不同参数都放在了水平方向的坐标上。在下面的示意图中，绘制了所有4缸、6缸或8缸汽车在五个不同参数（变量）上的对比。</p><img src="https://static001.geekbang.org/resource/image/23/26/23948ddb9761907d3fd1316c506d3726.jpeg" alt="" title="左为平行坐标图，右为热力图"><p>此外，我们还可以用<a href="https://www.jianshu.com/p/a575e53bcaa9" target="_blank" rel="noopener noreferrer">热力图</a>、<a href="https://www.jianshu.com/p/a575e53bcaa9" target="_blank" rel="noopener noreferrer">三维直方图</a>、<a href="http://https://zhuanlan.zhihu.com/p/147243101" target="_blank" rel="noopener noreferrer">三维气泡图</a>等等其他的可视化形式来展现多维度的信息。</p><img src="https://static001.geekbang.org/resource/image/d8/1e/d805e7f932c3403c9732fec8bae1141e.jpeg" alt="" title="左为三维直方图，右为三维气泡图"><p>总之，这些数据展现形式的基本实现原理，我们都在前面的视觉篇中讲过了。在掌握了视觉基础知识之后，我们就可以用自己想要的呈现形式，自由发挥，设计出各种直观的、形式有趣的图表了。</p><h2 id="要点总结" tabindex="-1"><a class="header-anchor" href="#要点总结"><span>要点总结</span></a></h2><p>这一节课，我们主要讨论数据到图表的展现以及如何处理多元变量。</p><p>在数据到图表的展现中，我们首先用d3.js把原始数据从csv中读取出来，然后选择我们需要的数据，用简单的图表库，比如，使用QCharts图表库进行渲染。渲染过程可以分为4步，分别是：创建图表对象 Chart并传入数据，创建图形Visual，创建坐标轴、提示和图例，把图形、坐标轴、提示和图例添加到图表对象中完成渲染。</p><p>在处理多元变量的时候，我们可以用散点图表示变量的相关性。对于超过二维的数据，我们可以扩展散点图，调整颜色、大小、透明度等等手段表达额外的信息。除了散点图之外，我们还可以用晴雨表、平行坐标图、热力图、三维直方图、气泡图等等图表，来表示多维数据的相关性。</p><p>到这里，我们用两节课的时间讲完了可视化的数据处理的基础部分。这部分内容如果再深入下去，就触达了数据分析的领域了，这也是一个和可视化密切相关的学科。那我也说过，可视化的重点，一是数据、二是视觉，视觉往深入研究，就进入渲染引擎、游戏等等领域，数据往深入研究，就进入数据分析的领域。所以，在可视化的入门或者说是基础阶段，掌握我现在讲的这些基础知识就够了。当然，如果你想深入研究也是好事，你可以参考我在课后给出的文章好好阅读一下。</p><h2 id="小试牛刀" tabindex="-1"><a class="header-anchor" href="#小试牛刀"><span>小试牛刀</span></a></h2><p>我在GitHub代码仓库里放了两份数据，一份是我们今天讲课用到的，另一份是<a href="https://github.com/akira-cn/graphics/blob/master/data/weather/2013-2018.csv" target="_blank" rel="noopener noreferrer">2013到2018年的全国各地空气质量数据</a>。你能把2014年北京每日PM2.5的数据用折线图表示出来吗？你还能结合这两份数据，用散点图分析平均气温和PM2.5指数的相关性吗？</p><p>你可以模仿我北大可视化实验室的疫情晴雨表，实现一个2018年全国各城市空气质量晴雨表吗？</p><p>欢迎在留言区和我讨论，分享你的答案和思考，也欢迎你把这节课分享给你的朋友，我们下节课见！</p><h2 id="源码" tabindex="-1"><a class="header-anchor" href="#源码"><span>源码</span></a></h2><p><a href="https://github.com/akira-cn/graphics/tree/master/data/weather" target="_blank" rel="noopener noreferrer">课程中完整示例代码见GitHub仓库</a></p><h2 id="推荐阅读" tabindex="-1"><a class="header-anchor" href="#推荐阅读"><span>推荐阅读</span></a></h2><p>[1] <a href="https://zhuanlan.zhihu.com/p/147243101" target="_blank" rel="noopener noreferrer">从1维到6维-多维数据可视化策略</a></p><p>[2] <a href="https://www.qcharts.cn/" target="_blank" rel="noopener noreferrer">QCharts</a></p>`,77)]))}const d=a(p,[["render",l]]),o=JSON.parse('{"path":"/posts/%E8%B7%9F%E6%9C%88%E5%BD%B1%E5%AD%A6%E5%8F%AF%E8%A7%86%E5%8C%96/%E6%95%B0%E6%8D%AE%E7%AF%87/34%20_%20%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86%E5%A4%9A%E5%85%83%E5%8F%98%E9%87%8F%EF%BC%9F.html","title":"34 _ 数据处理（二）：如何处理多元变量？","lang":"zh-CN","frontmatter":{"description":"34 _ 数据处理（二）：如何处理多元变量？ 你好，我是月影。 数据处理是一门很深的学问，想要学好它，我们不仅需要掌握很复杂的理论，还需要不断地积累经验。不过，其中也有一些基础的数据处理技巧，掌握它们，我们就能更好地入门可视化了。 比如我们上节课重点讲解的数据分类，就是其中一种非常基础的数据处理技巧，也是数据处理的第一步。这一节课，我会以处理2014年...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/interview/posts/%E8%B7%9F%E6%9C%88%E5%BD%B1%E5%AD%A6%E5%8F%AF%E8%A7%86%E5%8C%96/%E6%95%B0%E6%8D%AE%E7%AF%87/34%20_%20%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86%E5%A4%9A%E5%85%83%E5%8F%98%E9%87%8F%EF%BC%9F.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"34 _ 数据处理（二）：如何处理多元变量？"}],["meta",{"property":"og:description","content":"34 _ 数据处理（二）：如何处理多元变量？ 你好，我是月影。 数据处理是一门很深的学问，想要学好它，我们不仅需要掌握很复杂的理论，还需要不断地积累经验。不过，其中也有一些基础的数据处理技巧，掌握它们，我们就能更好地入门可视化了。 比如我们上节课重点讲解的数据分类，就是其中一种非常基础的数据处理技巧，也是数据处理的第一步。这一节课，我会以处理2014年..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-16T11:19:38.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-16T11:19:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"34 _ 数据处理（二）：如何处理多元变量？\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-08-16T11:19:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755343178000,"updatedTime":1755343178000,"contributors":[{"name":"bbhou","username":"bbhou","email":"1557740299@qq.com","commits":1,"url":"https://github.com/bbhou"}]},"readingTime":{"minutes":12.68,"words":3803},"filePathRelative":"posts/跟月影学可视化/数据篇/34 _ 数据处理（二）：如何处理多元变量？.md","localizedDate":"2025年8月16日","excerpt":"\\n<p><audio id=\\"audio\\" title=\\"34 | 数据处理（二）：如何处理多元变量？\\" controls=\\"\\" preload=\\"none\\"><source id=\\"mp3\\" src=\\"https://static001.geekbang.org/resource/audio/19/28/196bdd87cf3a1af3b4dbe228cf608c28.mp3\\"></audio></p>\\n<p>你好，我是月影。</p>\\n<p>数据处理是一门很深的学问，想要学好它，我们不仅需要掌握很复杂的理论，还需要不断地积累经验。不过，其中也有一些基础的数据处理技巧，掌握它们，我们就能更好地入门可视化了。</p>","autoDesc":true}');export{d as comp,o as data};
