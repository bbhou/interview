import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,a as o,o as n}from"./app-d8EKP-K0.js";const p={};function a(s,t){return n(),r("div",null,t[0]||(t[0]=[o('<h1 id="_04-http世界全览-下-与http相关的各种协议" tabindex="-1"><a class="header-anchor" href="#_04-http世界全览-下-与http相关的各种协议"><span>04 _ HTTP世界全览（下）：与HTTP相关的各种协议</span></a></h1><p><audio id="audio" title="04 | HTTP世界全览（下）：与HTTP相关的各种协议" controls="" preload="none"><source id="mp3" src="https://static001.geekbang.org/resource/audio/99/51/995cf58219a4e99589c7d58ffa66a451.mp3"></audio></p><p>在上一讲中，我介绍了与HTTP相关的浏览器、服务器、CDN、网络爬虫等应用技术。</p><p>今天要讲的则是比较偏向于理论的各种HTTP相关协议，重点是TCP/IP、DNS、URI、HTTPS等，希望能够帮你理清楚它们与HTTP的关系。</p><p>同样的，我还是画了一张详细的思维导图，你可以点击后仔细查看。</p><img src="https://static001.geekbang.org/resource/image/1e/81/1e7533f765d2ede0abfab73cf6b57781.png" alt=""><h2 id="tcp-ip" tabindex="-1"><a class="header-anchor" href="#tcp-ip"><span>TCP/IP</span></a></h2><p>TCP/IP协议是目前网络世界“事实上”的标准通信协议，即使你没有用过也一定听说过，因为它太著名了。</p><p>TCP/IP协议实际上是一系列网络通信协议的统称，其中最核心的两个协议是<strong>TCP</strong>和<strong>IP</strong>，其他的还有UDP、ICMP、ARP等等，共同构成了一个复杂但有层次的协议栈。</p><p>这个协议栈有四层，最上层是“应用层”，最下层是“链接层”，TCP和IP则在中间：<strong>TCP属于“传输层”，IP属于“网际层”</strong>。协议的层级关系模型非常重要，我会在下一讲中再专门讲解，这里先暂时放一放。</p><p><strong>IP协议</strong>是“<strong>I</strong>nternet <strong>P</strong>rotocol”的缩写，主要目的是解决寻址和路由问题，以及如何在两点间传送数据包。IP协议使用“<strong>IP地址</strong>”的概念来定位互联网上的每一台计算机。可以对比一下现实中的电话系统，你拿着的手机相当于互联网上的计算机，而要打电话就必须接入电话网，由通信公司给你分配一个号码，这个号码就相当于IP地址。</p><p>现在我们使用的IP协议大多数是v4版，地址是四个用“.”分隔的数字，例如“192.168.0.1”，总共有2<sup>32，大约42亿个可以分配的地址。看上去好像很多，但互联网的快速发展让地址的分配管理很快就“捉襟见肘”。所以，就又出现了v6版，使用8组“:”分隔的数字作为地址，容量扩大了很多，有2</sup>128个，在未来的几十年里应该是足够用了。</p><p><strong>TCP协议</strong>是“<strong>T</strong>ransmission <strong>C</strong>ontrol <strong>P</strong>rotocol”的缩写，意思是“传输控制协议”，它位于IP协议之上，基于IP协议提供可靠的、字节流形式的通信，是HTTP协议得以实现的基础。</p><p>“可靠”是指保证数据不丢失，“字节流”是指保证数据完整，所以在TCP协议的两端可以如同操作文件一样访问传输的数据，就像是读写在一个密闭的管道里“流动”的字节。</p><p>在<a href="https://time.geekbang.org/column/article/98128" target="_blank" rel="noopener noreferrer">第2讲</a>时我曾经说过，HTTP是一个&quot;传输协议&quot;，但它不关心寻址、路由、数据完整性等传输细节，而要求这些工作都由下层来处理。因为互联网上最流行的是TCP/IP协议，而它刚好满足HTTP的要求，所以互联网上的HTTP协议就运行在了TCP/IP上，HTTP也就可以更准确地称为“<strong>HTTP over TCP/IP</strong>”。</p><h2 id="dns" tabindex="-1"><a class="header-anchor" href="#dns"><span>DNS</span></a></h2><p>在TCP/IP协议中使用IP地址来标识计算机，数字形式的地址对于计算机来说是方便了，但对于人类来说却既难以记忆又难以输入。</p><p>于是“<strong>域名系统</strong>”（<strong>D</strong>omain <strong>N</strong>ame <strong>S</strong>ystem）出现了，用有意义的名字来作为IP地址的等价替代。设想一下，你是愿意记“95.211.80.227”这样枯燥的数字，还是“<a href="http://nginx.org" target="_blank" rel="noopener noreferrer">nginx.org</a>”这样的词组呢？</p><p>在DNS中，“域名”（Domain Name）又称为“主机名”（Host），为了更好地标记不同国家或组织的主机，让名字更好记，所以被设计成了一个有层次的结构。</p><p>域名用“.”分隔成多个单词，级别从左到右逐级升高，最右边的被称为“顶级域名”。对于顶级域名，可能你随口就能说出几个，例如表示商业公司的“com”、表示教育机构的“edu”，表示国家的“cn”“uk”等，买火车票时的域名还记得吗？是“<a href="http://www.12306.cn" target="_blank" rel="noopener noreferrer">www.12306.cn</a>”。</p><img src="https://static001.geekbang.org/resource/image/36/b3/36b6a41da6e9abc2fc28ee9a305f48b3.jpg" alt="unpreview"><p>但想要使用TCP/IP协议来通信仍然要使用IP地址，所以需要把域名做一个转换，“映射”到它的真实IP，这就是所谓的“<strong>域名解析</strong>”。</p><p>继续用刚才的打电话做个比喻，你想要打电话给小明，但不知道电话号码，就得在手机里的号码簿里一项一项地找，直到找到小明那一条记录，然后才能查到号码。这里的“小明”就相当于域名，而“电话号码”就相当于IP地址，这个查找的过程就是域名解析。</p><p>域名解析的实际操作要比刚才的例子复杂很多，因为互联网上的电脑实在是太多了。目前全世界有13组根DNS服务器，下面再有许多的顶级DNS、权威DNS和更小的本地DNS，逐层递归地实现域名查询。</p><p>HTTP协议中并没有明确要求必须使用DNS，但实际上为了方便访问互联网上的Web服务器，通常都会使用DNS来定位或标记主机名，间接地把DNS与HTTP绑在了一起。</p><h2 id="uri-url" tabindex="-1"><a class="header-anchor" href="#uri-url"><span>URI/URL</span></a></h2><p>有了TCP/IP和DNS，是不是我们就可以任意访问网络上的资源了呢？</p><p>还不行，DNS和IP地址只是标记了互联网上的主机，但主机上有那么多文本、图片、页面，到底要找哪一个呢？就像小明管理了一大堆文档，你怎么告诉他是哪个呢？</p><p>所以就出现了URI（<strong>U</strong>niform <strong>R</strong>esource <strong>I</strong>dentifier），中文名称是 <strong>统一资源标识符</strong>，使用它就能够唯一地标记互联网上资源。</p><p>URI另一个更常用的表现形式是URL（<strong>U</strong>niform <strong>R</strong>esource <strong>L</strong>ocator）， <strong>统一资源定位符</strong>，也就是我们俗称的“网址”，它实际上是URI的一个子集，不过因为这两者几乎是相同的，差异不大，所以通常不会做严格的区分。</p><p>我就拿Nginx网站来举例，看一下URI是什么样子的。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>http://nginx.org/en/download.html</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>你可以看到，URI主要有三个基本的部分构成：</p><ol><li>协议名：即访问该资源应当使用的协议，在这里是“http”；</li><li>主机名：即互联网上主机的标记，可以是域名或IP地址，在这里是“<a href="http://nginx.org" target="_blank" rel="noopener noreferrer">nginx.org</a>”；</li><li>路径：即资源在主机上的位置，使用“/”分隔多级目录，在这里是“/en/download.html”。</li></ol><p>还是用打电话来做比喻，你通过电话簿找到了小明，让他把昨天做好的宣传文案快递过来。那么这个过程中你就完成了一次URI资源访问，“小明”就是“主机名”，“昨天做好的宣传文案”就是“路径”，而“快递”，就是你要访问这个资源的“协议名”。</p><h2 id="https" tabindex="-1"><a class="header-anchor" href="#https"><span>HTTPS</span></a></h2><p>在TCP/IP、DNS和URI的“加持”之下，HTTP协议终于可以自由地穿梭在互联网世界里，顺利地访问任意的网页了，真的是“好生快活”。</p><p>但且慢，互联网上不仅有“美女”，还有很多的“野兽”。</p><p>假设你打电话找小明要一份广告创意，很不幸，电话被商业间谍给窃听了，他立刻动用种种手段偷窃了你的快递，就在你还在等包裹的时候，他抢先发布了这份广告，给你的公司造成了无形或有形的损失。</p><p>有没有什么办法能够防止这种情况的发生呢？确实有。你可以使用“加密”的方法，比如这样打电话：</p><blockquote></blockquote><p>你：“喂，小明啊，接下来我们改用火星文通话吧。”<br> 小明：“好啊好啊，就用火星文吧。”<br> 你：“巴拉巴拉巴拉巴拉……”<br> 小明：“巴拉巴拉巴拉巴拉……”</p><p>如果你和小明说的火星文只有你们两个才懂，那么即使窃听到了这段谈话，他也不会知道你们到底在说什么，也就无从破坏你们的通话过程。</p><p>HTTPS就相当于这个比喻中的“火星文”，它的全称是“<strong>HTTP over SSL/TLS</strong>”，也就是运行在SSL/TLS协议上的HTTP。</p><p>注意它的名字，这里是SSL/TLS，而不是TCP/IP，它是一个负责加密通信的安全协议，建立在TCP/IP之上，所以也是个可靠的传输协议，可以被用作HTTP的下层。</p><p>因为HTTPS相当于“HTTP+SSL/TLS+TCP/IP”，其中的“HTTP”和“TCP/IP”我们都已经明白了，只要再了解一下SSL/TLS，HTTPS也就能够轻松掌握。</p><p>SSL的全称是“<strong>S</strong>ecure <strong>S</strong>ocket <strong>L</strong>ayer”，由网景公司发明，当发展到3.0时被标准化，改名为TLS，即“<strong>T</strong>ransport <strong>L</strong>ayer <strong>S</strong>ecurity”，但由于历史的原因还是有很多人称之为SSL/TLS，或者直接简称为SSL。</p><p>SSL使用了许多密码学最先进的研究成果，综合了对称加密、非对称加密、摘要算法、数字签名、数字证书等技术，能够在不安全的环境中为通信的双方创建出一个秘密的、安全的传输通道，为HTTP套上一副坚固的盔甲。</p><p>你可以在今后上网时留心看一下浏览器地址栏，如果有一个小锁头标志，那就表明网站启用了安全的HTTPS协议，而URI里的协议名，也从“http”变成了“https”。</p><h2 id="代理" tabindex="-1"><a class="header-anchor" href="#代理"><span>代理</span></a></h2><p>代理（Proxy）是HTTP协议中请求方和应答方中间的一个环节，作为“中转站”，既可以转发客户端的请求，也可以转发服务器的应答。</p><p>代理有很多的种类，常见的有：</p><ol><li>匿名代理：完全“隐匿”了被代理的机器，外界看到的只是代理服务器；</li><li>透明代理：顾名思义，它在传输过程中是“透明开放”的，外界既知道代理，也知道客户端；</li><li>正向代理：靠近客户端，代表客户端向服务器发送请求；</li><li>反向代理：靠近服务器端，代表服务器响应客户端的请求；</li></ol><p>上一讲提到的CDN，实际上就是一种代理，它代替源站服务器响应客户端的请求，通常扮演着透明代理和反向代理的角色。</p><p>由于代理在传输过程中插入了一个“中间层”，所以可以在这个环节做很多有意思的事情，比如：</p><ol><li>负载均衡：把访问请求均匀分散到多台机器，实现访问集群化；</li><li>内容缓存：暂存上下行的数据，减轻后端的压力；</li><li>安全防护：隐匿IP,使用WAF等工具抵御网络攻击，保护被代理的机器；</li><li>数据处理：提供压缩、加密等额外的功能。</li></ol><p>关于HTTP的代理还有一个特殊的“代理协议”（proxy protocol），它由知名的代理软件HAProxy制订，但并不是RFC标准，我也会在之后的课程里专门讲解。</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span>小结</span></a></h2><p>这次我介绍了与HTTP相关的各种协议，在这里简单小结一下今天的内容。</p><ol><li>TCP/IP是网络世界最常用的协议，HTTP通常运行在TCP/IP提供的可靠传输基础上；</li><li>DNS域名是IP地址的等价替代，需要用域名解析实现到IP地址的映射；</li><li>URI是用来标记互联网上资源的一个名字，由“协议名+主机名+路径”构成，俗称URL；</li><li>HTTPS相当于“HTTP+SSL/TLS+TCP/IP”，为HTTP套了一个安全的外壳；</li><li>代理是HTTP传输过程中的“中转站”，可以实现缓存加速、负载均衡等功能。</li></ol><p>经过这两讲的学习，相信你应该对HTTP有了一个比较全面的了解，虽然还不是很深入，但已经为后续的学习扫清了障碍。</p><h2 id="课下作业" tabindex="-1"><a class="header-anchor" href="#课下作业"><span>课下作业</span></a></h2><ol><li>DNS与URI有什么关系？</li><li>在讲<strong>代理</strong>时我特意没有举例说明，你能够用引入一个“小强”的角色，通过打电话来比喻一下吗？</li></ol><p>欢迎你通过留言分享答案，与我和其他同学一起讨论。如果你觉得有所收获，欢迎你把文章分享给你的朋友。</p><img src="https://static001.geekbang.org/resource/image/4e/56/4eab55dc3600071330e088b40cae4856.png" alt="unpreview">',65)]))}const P=e(p,[["render",a]]),g=JSON.parse('{"path":"/posts/%E9%80%8F%E8%A7%86HTTP%E5%8D%8F%E8%AE%AE/%E7%A0%B4%E5%86%B0%E7%AF%87/04%20_%20HTTP%E4%B8%96%E7%95%8C%E5%85%A8%E8%A7%88%EF%BC%88%E4%B8%8B%EF%BC%89%EF%BC%9A%E4%B8%8EHTTP%E7%9B%B8%E5%85%B3%E7%9A%84%E5%90%84%E7%A7%8D%E5%8D%8F%E8%AE%AE.html","title":"04 _ HTTP世界全览（下）：与HTTP相关的各种协议","lang":"zh-CN","frontmatter":{"description":"04 _ HTTP世界全览（下）：与HTTP相关的各种协议 在上一讲中，我介绍了与HTTP相关的浏览器、服务器、CDN、网络爬虫等应用技术。 今天要讲的则是比较偏向于理论的各种HTTP相关协议，重点是TCP/IP、DNS、URI、HTTPS等，希望能够帮你理清楚它们与HTTP的关系。 同样的，我还是画了一张详细的思维导图，你可以点击后仔细查看。 TCP...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/interview/posts/%E9%80%8F%E8%A7%86HTTP%E5%8D%8F%E8%AE%AE/%E7%A0%B4%E5%86%B0%E7%AF%87/04%20_%20HTTP%E4%B8%96%E7%95%8C%E5%85%A8%E8%A7%88%EF%BC%88%E4%B8%8B%EF%BC%89%EF%BC%9A%E4%B8%8EHTTP%E7%9B%B8%E5%85%B3%E7%9A%84%E5%90%84%E7%A7%8D%E5%8D%8F%E8%AE%AE.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"04 _ HTTP世界全览（下）：与HTTP相关的各种协议"}],["meta",{"property":"og:description","content":"04 _ HTTP世界全览（下）：与HTTP相关的各种协议 在上一讲中，我介绍了与HTTP相关的浏览器、服务器、CDN、网络爬虫等应用技术。 今天要讲的则是比较偏向于理论的各种HTTP相关协议，重点是TCP/IP、DNS、URI、HTTPS等，希望能够帮你理清楚它们与HTTP的关系。 同样的，我还是画了一张详细的思维导图，你可以点击后仔细查看。 TCP..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-16T11:19:38.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-16T11:19:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"04 _ HTTP世界全览（下）：与HTTP相关的各种协议\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-08-16T11:19:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755343178000,"updatedTime":1755343178000,"contributors":[{"name":"bbhou","username":"bbhou","email":"1557740299@qq.com","commits":1,"url":"https://github.com/bbhou"}]},"readingTime":{"minutes":10.52,"words":3156},"filePathRelative":"posts/透视HTTP协议/破冰篇/04 _ HTTP世界全览（下）：与HTTP相关的各种协议.md","localizedDate":"2025年8月16日","excerpt":"\\n<p><audio id=\\"audio\\" title=\\"04 | HTTP世界全览（下）：与HTTP相关的各种协议\\" controls=\\"\\" preload=\\"none\\"><source id=\\"mp3\\" src=\\"https://static001.geekbang.org/resource/audio/99/51/995cf58219a4e99589c7d58ffa66a451.mp3\\"></audio></p>\\n<p>在上一讲中，我介绍了与HTTP相关的浏览器、服务器、CDN、网络爬虫等应用技术。</p>\\n<p>今天要讲的则是比较偏向于理论的各种HTTP相关协议，重点是TCP/IP、DNS、URI、HTTPS等，希望能够帮你理清楚它们与HTTP的关系。</p>","autoDesc":true}');export{P as comp,g as data};
