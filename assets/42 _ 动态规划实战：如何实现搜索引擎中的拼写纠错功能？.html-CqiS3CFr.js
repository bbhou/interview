import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as i,o as e}from"./app-d8EKP-K0.js";const p={};function l(c,s){return e(),a("div",null,s[0]||(s[0]=[i(`<h1 id="_42-动态规划实战-如何实现搜索引擎中的拼写纠错功能" tabindex="-1"><a class="header-anchor" href="#_42-动态规划实战-如何实现搜索引擎中的拼写纠错功能"><span>42 _ 动态规划实战：如何实现搜索引擎中的拼写纠错功能？</span></a></h1><p><audio id="audio" title="42 | 动态规划实战：如何实现搜索引擎中的拼写纠错功能？" controls="" preload="none"><source id="mp3" src="https://static001.geekbang.org/resource/audio/ed/a2/eddf200166804d9e476d78f47aa9efa2.mp3"></audio></p><p>在<a href="https://time.geekbang.org/column/article/72414" target="_blank" rel="noopener noreferrer">Trie树</a>那节我们讲过，利用Trie树，可以实现搜索引擎的关键词提示功能，这样可以节省用户输入搜索关键词的时间。实际上，搜索引擎在用户体验方面的优化还有很多，比如你可能经常会用的拼写纠错功能。</p><p>当你在搜索框中，一不小心输错单词时，搜索引擎会非常智能地检测出你的拼写错误，并且用对应的正确单词来进行搜索。作为一名软件开发工程师，你是否想过，这个功能是怎么实现的呢？</p><img src="https://static001.geekbang.org/resource/image/c1/6d/c18a9c785206754f9f1ff74c1b8f6c6d.png" alt=""><h2 id="如何量化两个字符串的相似度" tabindex="-1"><a class="header-anchor" href="#如何量化两个字符串的相似度"><span>如何量化两个字符串的相似度？</span></a></h2><p>计算机只认识数字，所以要解答开篇的问题，我们就要先来看，如何量化两个字符串之间的相似程度呢？有一个非常著名的量化方法，那就是编辑距离（Edit Distance）。</p><p>顾名思义，<strong>编辑距离</strong>指的就是，将一个字符串转化成另一个字符串，需要的最少编辑操作次数（比如增加一个字符、删除一个字符、替换一个字符）。编辑距离越大，说明两个字符串的相似程度越小；相反，编辑距离就越小，说明两个字符串的相似程度越大。对于两个完全相同的字符串来说，编辑距离就是0。</p><p>根据所包含的编辑操作种类的不同，编辑距离有多种不同的计算方式，比较著名的有<strong>莱文斯坦距离</strong>（Levenshtein distance）和<strong>最长公共子串长度</strong>（Longest common substring length）。其中，莱文斯坦距离允许增加、删除、替换字符这三个编辑操作，最长公共子串长度只允许增加、删除字符这两个编辑操作。</p><p>而且，莱文斯坦距离和最长公共子串长度，从两个截然相反的角度，分析字符串的相似程度。莱文斯坦距离的大小，表示两个字符串差异的大小；而最长公共子串的大小，表示两个字符串相似程度的大小。</p><p>关于这两个计算方法，我举个例子给你说明一下。这里面，两个字符串mitcmu和mtacnu的莱文斯坦距离是3，最长公共子串长度是4。</p><img src="https://static001.geekbang.org/resource/image/f0/0f/f0e72008ce8451609abed7e368ac420f.jpg" alt=""><p>了解了编辑距离的概念之后，我们来看，如何快速计算两个字符串之间的编辑距离？</p><h2 id="如何编程计算莱文斯坦距离" tabindex="-1"><a class="header-anchor" href="#如何编程计算莱文斯坦距离"><span>如何编程计算莱文斯坦距离？</span></a></h2><p>之前我反复强调过，思考过程比结论更重要，所以，我现在就给你展示一下，解决这个问题，我的完整的思考过程。</p><p>这个问题是求把一个字符串变成另一个字符串，需要的最少编辑次数。整个求解过程，涉及多个决策阶段，我们需要依次考察一个字符串中的每个字符，跟另一个字符串中的字符是否匹配，匹配的话如何处理，不匹配的话又如何处理。所以，这个问题符合<strong>多阶段决策最优解模型</strong>。</p><p>我们前面讲了，贪心、回溯、动态规划可以解决的问题，都可以抽象成这样一个模型。要解决这个问题，我们可以先看一看，用最简单的回溯算法，该如何来解决。</p><p>回溯是一个递归处理的过程。如果a[i]与b[j]匹配，我们递归考察a[i+1]和b[j+1]。如果a[i]与b[j]不匹配，那我们有多种处理方式可选：</p><p>可以删除a[i]，然后递归考察a[i+1]和b[j]；</p><p>可以删除b[j]，然后递归考察a[i]和b[j+1]；</p><p>可以在a[i]前面添加一个跟b[j]相同的字符，然后递归考察a[i]和b[j+1];</p><p>可以在b[j]前面添加一个跟a[i]相同的字符，然后递归考察a[i+1]和b[j]；</p><p>可以将a[i]替换成b[j]，或者将b[j]替换成a[i]，然后递归考察a[i+1]和b[j+1]。</p><p>我们将上面的回溯算法的处理思路，翻译成代码，就是下面这个样子：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>private char[] a = &amp;quot;mitcmu&amp;quot;.toCharArray();</span></span>
<span class="line"><span>private char[] b = &amp;quot;mtacnu&amp;quot;.toCharArray();</span></span>
<span class="line"><span>private int n = 6;</span></span>
<span class="line"><span>private int m = 6;</span></span>
<span class="line"><span>private int minDist = Integer.MAX_VALUE; // 存储结果</span></span>
<span class="line"><span>// 调用方式 lwstBT(0, 0, 0);</span></span>
<span class="line"><span>public lwstBT(int i, int j, int edist) {</span></span>
<span class="line"><span>  if (i == n || j == m) {</span></span>
<span class="line"><span>    if (i &amp;lt; n) edist += (n-i);</span></span>
<span class="line"><span>    if (j &amp;lt; m) edist += (m - j);</span></span>
<span class="line"><span>    if (edist &amp;lt; minDist) minDist = edist;</span></span>
<span class="line"><span>    return;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>  if (a[i] == b[j]) { // 两个字符匹配</span></span>
<span class="line"><span>    lwstBT(i+1, j+1, edist);</span></span>
<span class="line"><span>  } else { // 两个字符不匹配</span></span>
<span class="line"><span>    lwstBT(i + 1, j, edist + 1); // 删除a[i]或者b[j]前添加一个字符</span></span>
<span class="line"><span>    lwstBT(i, j + 1, edist + 1); // 删除b[j]或者a[i]前添加一个字符</span></span>
<span class="line"><span>    lwstBT(i + 1, j + 1, edist + 1); // 将a[i]和b[j]替换为相同字符</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据回溯算法的代码实现，我们可以画出递归树，看是否存在重复子问题。如果存在重复子问题，那我们就可以考虑能否用动态规划来解决；如果不存在重复子问题，那回溯就是最好的解决方法。</p><img src="https://static001.geekbang.org/resource/image/86/89/864f25506eb3db427377bde7bb4c9589.jpg" alt=""><p>在递归树中，每个节点代表一个状态，状态包含三个变量(i, j, edist)，其中，edist表示处理到a[i]和b[j]时，已经执行的编辑操作的次数。</p><p>在递归树中，(i, j)两个变量重复的节点很多，比如(3, 2)和(2, 3)。对于(i, j)相同的节点，我们只需要保留edist最小的，继续递归处理就可以了，剩下的节点都可以舍弃。所以，状态就从(i, j, edist)变成了(i, j, min_edist)，其中min_edist表示处理到a[i]和b[j]，已经执行的最少编辑次数。</p><p>看到这里，你有没有觉得，这个问题跟上两节讲的动态规划例子非常相似？不过，这个问题的状态转移方式，要比之前两节课中讲到的例子都要复杂很多。上一节我们讲的矩阵最短路径问题中，到达状态(i, j)只能通过(i-1, j)或(i, j-1)两个状态转移过来，而今天这个问题，状态(i, j)可能从(i-1, j)，(i, j-1)，(i-1, j-1)三个状态中的任意一个转移过来。</p><img src="https://static001.geekbang.org/resource/image/11/89/11ffcba9b3c722c5487de7df5a0d6c89.jpg" alt=""><p>基于刚刚的分析，我们可以尝试着将把状态转移的过程，用公式写出来。这就是我们前面讲的状态转移方程。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>如果：a[i]!=b[j]，那么：min_edist(i, j)就等于：</span></span>
<span class="line"><span>min(min_edist(i-1,j)+1, min_edist(i,j-1)+1, min_edist(i-1,j-1)+1)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>如果：a[i]==b[j]，那么：min_edist(i, j)就等于：</span></span>
<span class="line"><span>min(min_edist(i-1,j)+1, min_edist(i,j-1)+1，min_edist(i-1,j-1))</span></span>
<span class="line"><span></span></span>
<span class="line"><span>其中，min表示求三数中的最小值。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>了解了状态与状态之间的递推关系，我们画出一个二维的状态表，按行依次来填充状态表中的每个值。</p><img src="https://static001.geekbang.org/resource/image/ab/2d/ab44eb53fad2601c19f73604747d652d.jpg" alt=""><p>我们现在既有状态转移方程，又理清了完整的填表过程，代码实现就非常简单了。我将代码贴在下面，你可以对比着文字解释，一起看下。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>public int lwstDP(char[] a, int n, char[] b, int m) {</span></span>
<span class="line"><span>  int[][] minDist = new int[n][m];</span></span>
<span class="line"><span>  for (int j = 0; j &amp;lt; m; ++j) { // 初始化第0行:a[0..0]与b[0..j]的编辑距离</span></span>
<span class="line"><span>    if (a[0] == b[j]) minDist[0][j] = j;</span></span>
<span class="line"><span>    else if (j != 0) minDist[0][j] = minDist[0][j-1]+1;</span></span>
<span class="line"><span>    else minDist[0][j] = 1;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>  for (int i = 0; i &amp;lt; n; ++i) { // 初始化第0列:a[0..i]与b[0..0]的编辑距离</span></span>
<span class="line"><span>    if (a[i] == b[0]) minDist[i][0] = i;</span></span>
<span class="line"><span>    else if (i != 0) minDist[i][0] = minDist[i-1][0]+1;</span></span>
<span class="line"><span>    else minDist[i][0] = 1;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>  for (int i = 1; i &amp;lt; n; ++i) { // 按行填表</span></span>
<span class="line"><span>    for (int j = 1; j &amp;lt; m; ++j) {</span></span>
<span class="line"><span>      if (a[i] == b[j]) minDist[i][j] = min(</span></span>
<span class="line"><span>          minDist[i-1][j]+1, minDist[i][j-1]+1, minDist[i-1][j-1]);</span></span>
<span class="line"><span>      else minDist[i][j] = min(</span></span>
<span class="line"><span>          minDist[i-1][j]+1, minDist[i][j-1]+1, minDist[i-1][j-1]+1);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>  return minDist[n-1][m-1];</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>private int min(int x, int y, int z) {</span></span>
<span class="line"><span>  int minv = Integer.MAX_VALUE;</span></span>
<span class="line"><span>  if (x &amp;lt; minv) minv = x;</span></span>
<span class="line"><span>  if (y &amp;lt; minv) minv = y;</span></span>
<span class="line"><span>  if (z &amp;lt; minv) minv = z;</span></span>
<span class="line"><span>  return minv;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可能会说，我虽然能看懂你讲的思路，但是遇到新的问题的时候，我还是会感觉到无从下手。这种感觉是非常正常的。关于复杂算法问题的解决思路，我还有一些经验、小技巧，可以分享给你。</p><p>当我们拿到一个问题的时候，<strong>我们可以先不思考，计算机会如何实现这个问题，而是单纯考虑“人脑”会如何去解决这个问题</strong>。人脑比较倾向于思考具象化的、摸得着看得见的东西，不适合思考过于抽象的问题。所以，我们需要把抽象问题具象化。那如何具象化呢？我们可以实例化几个测试数据，通过人脑去分析具体实例的解，然后总结规律，再尝试套用学过的算法，看是否能够解决。</p><p>除此之外，我还有一个非常有效、但也算不上技巧的东西，我也反复强调过，那就是<strong>多练</strong>。实际上，等你做多了题目之后，自然就会有感觉，看到问题，立马就能想到能否用动态规划解决，然后直接就可以寻找最优子结构，写出动态规划方程，然后将状态转移方程翻译成代码。</p><h2 id="如何编程计算最长公共子串长度" tabindex="-1"><a class="header-anchor" href="#如何编程计算最长公共子串长度"><span>如何编程计算最长公共子串长度？</span></a></h2><p>前面我们讲到，最长公共子串作为编辑距离中的一种，只允许增加、删除字符两种编辑操作。从名字上，你可能觉得它看起来跟编辑距离没什么关系。实际上，从本质上来说，它表征的也是两个字符串之间的相似程度。</p><p>这个问题的解决思路，跟莱文斯坦距离的解决思路非常相似，也可以用动态规划解决。我刚刚已经详细讲解了莱文斯坦距离的动态规划解决思路，所以，针对这个问题，我直接定义状态，然后写状态转移方程。</p><p>每个状态还是包括三个变量(i, j, max_lcs)，max_lcs表示a[0...i]和b[0...j]的最长公共子串长度。那(i, j)这个状态都是由哪些状态转移过来的呢？</p><p>我们先来看回溯的处理思路。我们从a[0]和b[0]开始，依次考察两个字符串中的字符是否匹配。</p><p>如果a[i]与b[j]互相匹配，我们将最大公共子串长度加一，并且继续考察a[i+1]和b[j+1]。</p><p>如果a[i]与b[j]不匹配，最长公共子串长度不变，这个时候，有两个不同的决策路线：</p><p>删除a[i]，或者在b[j]前面加上一个字符a[i]，然后继续考察a[i+1]和b[j]；</p><p>删除b[j]，或者在a[i]前面加上一个字符b[j]，然后继续考察a[i]和b[j+1]。</p><p>反过来也就是说，如果我们要求a[0...i]和b[0...j]的最长公共长度max_lcs(i, j)，我们只有可能通过下面三个状态转移过来：</p><p>(i-1, j-1, max_lcs)，其中max_lcs表示a[0...i-1]和b[0...j-1]的最长公共子串长度；</p><p>(i-1, j, max_lcs)，其中max_lcs表示a[0...i-1]和b[0...j]的最长公共子串长度；</p><p>(i, j-1, max_lcs)，其中max_lcs表示a[0...i]和b[0...j-1]的最长公共子串长度。</p><p>如果我们把这个转移过程，用状态转移方程写出来，就是下面这个样子：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>如果：a[i]==b[j]，那么：max_lcs(i, j)就等于：</span></span>
<span class="line"><span>max(max_lcs(i-1,j-1)+1, max_lcs(i-1, j), max_lcs(i, j-1))；</span></span>
<span class="line"><span></span></span>
<span class="line"><span>如果：a[i]!=b[j]，那么：max_lcs(i, j)就等于：</span></span>
<span class="line"><span>max(max_lcs(i-1,j-1), max_lcs(i-1, j), max_lcs(i, j-1))；</span></span>
<span class="line"><span></span></span>
<span class="line"><span>其中max表示求三数中的最大值。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有了状态转移方程，代码实现就简单多了。我把代码贴到了下面，你可以对比着文字一块儿看。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>public int lcs(char[] a, int n, char[] b, int m) {</span></span>
<span class="line"><span>  int[][] maxlcs = new int[n][m];</span></span>
<span class="line"><span>  for (int j = 0; j &amp;lt; m; ++j) {//初始化第0行：a[0..0]与b[0..j]的maxlcs</span></span>
<span class="line"><span>    if (a[0] == b[j]) maxlcs[0][j] = 1;</span></span>
<span class="line"><span>    else if (j != 0) maxlcs[0][j] = maxlcs[0][j-1];</span></span>
<span class="line"><span>    else maxlcs[0][j] = 0;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>  for (int i = 0; i &amp;lt; n; ++i) {//初始化第0列：a[0..i]与b[0..0]的maxlcs</span></span>
<span class="line"><span>    if (a[i] == b[0]) maxlcs[i][0] = 1;</span></span>
<span class="line"><span>    else if (i != 0) maxlcs[i][0] = maxlcs[i-1][0];</span></span>
<span class="line"><span>    else maxlcs[i][0] = 0;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>  for (int i = 1; i &amp;lt; n; ++i) { // 填表</span></span>
<span class="line"><span>    for (int j = 1; j &amp;lt; m; ++j) {</span></span>
<span class="line"><span>      if (a[i] == b[j]) maxlcs[i][j] = max(</span></span>
<span class="line"><span>          maxlcs[i-1][j], maxlcs[i][j-1], maxlcs[i-1][j-1]+1);</span></span>
<span class="line"><span>      else maxlcs[i][j] = max(</span></span>
<span class="line"><span>          maxlcs[i-1][j], maxlcs[i][j-1], maxlcs[i-1][j-1]);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>  return maxlcs[n-1][m-1];</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>private int max(int x, int y, int z) {</span></span>
<span class="line"><span>  int maxv = Integer.MIN_VALUE;</span></span>
<span class="line"><span>  if (x &amp;gt; maxv) maxv = x;</span></span>
<span class="line"><span>  if (y &amp;gt; maxv) maxv = y;</span></span>
<span class="line"><span>  if (z &amp;gt; maxv) maxv = z;</span></span>
<span class="line"><span>  return maxv;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="解答开篇" tabindex="-1"><a class="header-anchor" href="#解答开篇"><span>解答开篇</span></a></h2><p>今天的内容到此就讲完了，我们来看下开篇的问题。</p><p>当用户在搜索框内，输入一个拼写错误的单词时，我们就拿这个单词跟词库中的单词一一进行比较，计算编辑距离，将编辑距离最小的单词，作为纠正之后的单词，提示给用户。</p><p>这就是拼写纠错最基本的原理。不过，真正用于商用的搜索引擎，拼写纠错功能显然不会就这么简单。一方面，单纯利用编辑距离来纠错，效果并不一定好；另一方面，词库中的数据量可能很大，搜索引擎每天要支持海量的搜索，所以对纠错的性能要求很高。</p><p>针对纠错效果不好的问题，我们有很多种优化思路，我这里介绍几种。</p><p>我们并不仅仅取出编辑距离最小的那个单词，而是取出编辑距离最小的TOP 10，然后根据其他参数，决策选择哪个单词作为拼写纠错单词。比如使用搜索热门程度来决定哪个单词作为拼写纠错单词。</p><p>我们还可以用多种编辑距离计算方法，比如今天讲到的两种，然后分别编辑距离最小的TOP 10，然后求交集，用交集的结果，再继续优化处理。</p><p>我们还可以通过统计用户的搜索日志，得到最常被拼错的单词列表，以及对应的拼写正确的单词。搜索引擎在拼写纠错的时候，首先在这个最常被拼错单词列表中查找。如果一旦找到，直接返回对应的正确的单词。这样纠错的效果非常好。</p><p>我们还有更加高级一点的做法，引入个性化因素。针对每个用户，维护这个用户特有的搜索喜好，也就是常用的搜索关键词。当用户输入错误的单词的时候，我们首先在这个用户常用的搜索关键词中，计算编辑距离，查找编辑距离最小的单词。</p><p>针对纠错性能方面，我们也有相应的优化方式。我讲两种分治的优化思路。</p><p>如果纠错功能的TPS不高，我们可以部署多台机器，每台机器运行一个独立的纠错功能。当有一个纠错请求的时候，我们通过负载均衡，分配到其中一台机器，来计算编辑距离，得到纠错单词。</p><p>如果纠错系统的响应时间太长，也就是，每个纠错请求处理时间过长，我们可以将纠错的词库，分割到很多台机器。当有一个纠错请求的时候，我们就将这个拼写错误的单词，同时发送到这多台机器，让多台机器并行处理，分别得到编辑距离最小的单词，然后再比对合并，最终决定出一个最优的纠错单词。</p><p>真正的搜索引擎的拼写纠错优化，肯定不止我讲的这么简单，但是万变不离其宗。掌握了核心原理，就是掌握了解决问题的方法，剩下就靠你自己的灵活运用和实战操练了。</p><h2 id="内容小结" tabindex="-1"><a class="header-anchor" href="#内容小结"><span>内容小结</span></a></h2><p>动态规划的三节内容到此就全部讲完了，不知道你掌握得如何呢？</p><p>动态规划的理论尽管并不复杂，总结起来就是“一个模型三个特征”。但是，要想灵活应用并不简单。要想能真正理解、掌握动态规划，你只有多练习。</p><p>这三节中，加上课后思考题，总共有8个动态规划问题。这8个问题都非常经典，是我精心筛选出来的。很多动态规划问题其实都可以抽象成这几个问题模型，所以，你一定要多看几遍，多思考一下，争取真正搞懂它们。</p><p>只要弄懂了这几个问题，一般的动态规划问题，你应该都可以应付。对于动态规划这个知识点，你就算是入门了，再学习更加复杂的就会简单很多。</p><h2 id="课后思考" tabindex="-1"><a class="header-anchor" href="#课后思考"><span>课后思考</span></a></h2><p>我们有一个数字序列包含n个不同的数字，如何求出这个序列中的最长递增子序列长度？比如2, 9, 3, 6, 5, 1, 7这样一组数字序列，它的最长递增子序列就是2, 3, 5, 7，所以最长递增子序列的长度是4。</p><p>欢迎留言和我分享，也欢迎点击“请朋友读”，把今天的内容分享给你的好友，和他一起讨论、学习。</p>`,78)]))}const r=n(p,[["render",l]]),m=JSON.parse('{"path":"/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/%E5%9F%BA%E7%A1%80%E7%AF%87/42%20_%20%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%AE%9E%E6%88%98%EF%BC%9A%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E4%B8%AD%E7%9A%84%E6%8B%BC%E5%86%99%E7%BA%A0%E9%94%99%E5%8A%9F%E8%83%BD%EF%BC%9F.html","title":"42 _ 动态规划实战：如何实现搜索引擎中的拼写纠错功能？","lang":"zh-CN","frontmatter":{"description":"42 _ 动态规划实战：如何实现搜索引擎中的拼写纠错功能？ 在Trie树那节我们讲过，利用Trie树，可以实现搜索引擎的关键词提示功能，这样可以节省用户输入搜索关键词的时间。实际上，搜索引擎在用户体验方面的优化还有很多，比如你可能经常会用的拼写纠错功能。 当你在搜索框中，一不小心输错单词时，搜索引擎会非常智能地检测出你的拼写错误，并且用对应的正确单词来...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/interview/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/%E5%9F%BA%E7%A1%80%E7%AF%87/42%20_%20%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%AE%9E%E6%88%98%EF%BC%9A%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E4%B8%AD%E7%9A%84%E6%8B%BC%E5%86%99%E7%BA%A0%E9%94%99%E5%8A%9F%E8%83%BD%EF%BC%9F.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"42 _ 动态规划实战：如何实现搜索引擎中的拼写纠错功能？"}],["meta",{"property":"og:description","content":"42 _ 动态规划实战：如何实现搜索引擎中的拼写纠错功能？ 在Trie树那节我们讲过，利用Trie树，可以实现搜索引擎的关键词提示功能，这样可以节省用户输入搜索关键词的时间。实际上，搜索引擎在用户体验方面的优化还有很多，比如你可能经常会用的拼写纠错功能。 当你在搜索框中，一不小心输错单词时，搜索引擎会非常智能地检测出你的拼写错误，并且用对应的正确单词来..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-16T11:19:38.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-16T11:19:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"42 _ 动态规划实战：如何实现搜索引擎中的拼写纠错功能？\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-08-16T11:19:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755343178000,"updatedTime":1755343178000,"contributors":[{"name":"bbhou","username":"bbhou","email":"1557740299@qq.com","commits":1,"url":"https://github.com/bbhou"}]},"readingTime":{"minutes":15.26,"words":4579},"filePathRelative":"posts/数据结构与算法之美/基础篇/42 _ 动态规划实战：如何实现搜索引擎中的拼写纠错功能？.md","localizedDate":"2025年8月16日","excerpt":"\\n<p><audio id=\\"audio\\" title=\\"42 | 动态规划实战：如何实现搜索引擎中的拼写纠错功能？\\" controls=\\"\\" preload=\\"none\\"><source id=\\"mp3\\" src=\\"https://static001.geekbang.org/resource/audio/ed/a2/eddf200166804d9e476d78f47aa9efa2.mp3\\"></audio></p>\\n<p>在<a href=\\"https://time.geekbang.org/column/article/72414\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Trie树</a>那节我们讲过，利用Trie树，可以实现搜索引擎的关键词提示功能，这样可以节省用户输入搜索关键词的时间。实际上，搜索引擎在用户体验方面的优化还有很多，比如你可能经常会用的拼写纠错功能。</p>","autoDesc":true}');export{r as comp,m as data};
