import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,a as i,o as n}from"./app-d8EKP-K0.js";const d={};function l(r,s){return n(),e("div",null,s[0]||(s[0]=[i(`<h1 id="_05丨python科学计算-pandas" tabindex="-1"><a class="header-anchor" href="#_05丨python科学计算-pandas"><span>05丨Python科学计算：Pandas</span></a></h1><p><audio id="audio" title="05丨Python科学计算：Pandas" controls="" preload="none"><source id="mp3" src="https://static001.geekbang.org/resource/audio/a5/7b/a57cce18f0bf45f73b440a355ea9a37b.mp3"></audio></p><p>上一章中，我们讲了Python的一个重要的第三方库NumPy，今天我来给你介绍Python的另一个工具Pandas。</p><p>在数据分析工作中，Pandas的使用频率是很高的，一方面是因为Pandas提供的基础数据结构DataFrame与json的契合度很高，转换起来就很方便。另一方面，如果我们日常的数据清理工作不是很复杂的话，你通常用几句Pandas代码就可以对数据进行规整。</p><p>Pandas可以说是基于 NumPy 构建的含有更高级数据结构和分析能力的工具包。在NumPy中数据结构是围绕ndarray展开的，那么在Pandas中的核心数据结构是什么呢？</p><p>下面主要给你讲下<strong>Series和 DataFrame这两个核心数据结构</strong>，他们分别代表着一维的序列和二维的表结构。基于这两种数据结构，Pandas可以对数据进行导入、清洗、处理、统计和输出。</p><h2 id="数据结构-series和dataframe" tabindex="-1"><a class="header-anchor" href="#数据结构-series和dataframe"><span>数据结构：Series和DataFrame</span></a></h2><p><strong>Series是个定长的字典序列</strong>。说是定长是因为在存储的时候，相当于两个ndarray，这也是和字典结构最大的不同。因为在字典的结构里，元素的个数是不固定的。</p><p><strong>Series</strong>有两个基本属性：index 和 values。在Series结构中，index默认是0,1,2,……递增的整数序列，当然我们也可以自己来指定索引，比如index=[‘a’, ‘b’, ‘c’, ‘d’]。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>import pandas as pd</span></span>
<span class="line"><span>from pandas import Series, DataFrame</span></span>
<span class="line"><span>x1 = Series([1,2,3,4])</span></span>
<span class="line"><span>x2 = Series(data=[1,2,3,4], index=[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;])</span></span>
<span class="line"><span>print x1</span></span>
<span class="line"><span>print x2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>0    1</span></span>
<span class="line"><span>1    2</span></span>
<span class="line"><span>2    3</span></span>
<span class="line"><span>3    4</span></span>
<span class="line"><span>dtype: int64</span></span>
<span class="line"><span>a    1</span></span>
<span class="line"><span>b    2</span></span>
<span class="line"><span>c    3</span></span>
<span class="line"><span>d    4</span></span>
<span class="line"><span>dtype: int64</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个例子中，x1中的index采用的是默认值，x2中index进行了指定。我们也可以采用字典的方式来创建Series，比如：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>d = {&#39;a&#39;:1, &#39;b&#39;:2, &#39;c&#39;:3, &#39;d&#39;:4}</span></span>
<span class="line"><span>x3 = Series(d)</span></span>
<span class="line"><span>print x3</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>a    1</span></span>
<span class="line"><span>b    2</span></span>
<span class="line"><span>c    3</span></span>
<span class="line"><span>d    4</span></span>
<span class="line"><span>dtype: int64</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>DataFrame类型数据结构类似数据库表。</strong></p><p>它包括了行索引和列索引，我们可以将DataFrame 看成是由相同索引的Series组成的字典类型。</p><p>我们虚构一个王者荣耀考试的场景，想要输出几位英雄的考试成绩：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>import pandas as pd</span></span>
<span class="line"><span>from pandas import Series, DataFrame</span></span>
<span class="line"><span>data = {&#39;Chinese&#39;: [66, 95, 93, 90,80],&#39;English&#39;: [65, 85, 92, 88, 90],&#39;Math&#39;: [30, 98, 96, 77, 90]}</span></span>
<span class="line"><span>df1= DataFrame(data)</span></span>
<span class="line"><span>df2 = DataFrame(data, index=[&#39;ZhangFei&#39;, &#39;GuanYu&#39;, &#39;ZhaoYun&#39;, &#39;HuangZhong&#39;, &#39;DianWei&#39;], columns=[&#39;English&#39;, &#39;Math&#39;, &#39;Chinese&#39;])</span></span>
<span class="line"><span>print df1</span></span>
<span class="line"><span>print df2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在后面的案例中，我一般会用df, df1, df2这些作为DataFrame数据类型的变量名，我们以例子中的df2为例，列索引是[‘English’, ‘Math’, ‘Chinese’]，行索引是[‘ZhangFei’, ‘GuanYu’, ‘ZhaoYun’, ‘HuangZhong’, ‘DianWei’]，所以df2的输出是：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>            English  Math  Chinese</span></span>
<span class="line"><span>ZhangFei         65    30       66</span></span>
<span class="line"><span>GuanYu           85    98       95</span></span>
<span class="line"><span>ZhaoYun          92    96       93</span></span>
<span class="line"><span>HuangZhong       88    77       90</span></span>
<span class="line"><span>DianWei          90    90       80</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在了解了Series和 DataFrame这两个数据结构后，我们就从数据处理的流程角度，来看下他们的使用方法。</p><h2 id="数据导入和输出" tabindex="-1"><a class="header-anchor" href="#数据导入和输出"><span>数据导入和输出</span></a></h2><p>Pandas允许直接从xlsx，csv等文件中导入数据，也可以输出到xlsx, csv等文件，非常方便。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>import pandas as pd</span></span>
<span class="line"><span>from pandas import Series, DataFrame</span></span>
<span class="line"><span>score = DataFrame(pd.read_excel(&#39;data.xlsx&#39;))</span></span>
<span class="line"><span>score.to_excel(&#39;data1.xlsx&#39;)</span></span>
<span class="line"><span>print score</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要说明的是，在运行的过程可能会存在缺少xlrd和openpyxl包的情况，到时候如果缺少了，可以在命令行模式下使用“pip install”命令来进行安装。</p><h2 id="数据清洗" tabindex="-1"><a class="header-anchor" href="#数据清洗"><span>数据清洗</span></a></h2><p>数据清洗是数据准备过程中必不可少的环节，Pandas也为我们提供了数据清洗的工具，在后面数据清洗的章节中会给你做详细的介绍，这里简单介绍下Pandas在数据清洗中的使用方法。</p><p>我还是以上面这个王者荣耀的数据为例。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>data = {&#39;Chinese&#39;: [66, 95, 93, 90,80],&#39;English&#39;: [65, 85, 92, 88, 90],&#39;Math&#39;: [30, 98, 96, 77, 90]}</span></span>
<span class="line"><span>df2 = DataFrame(data, index=[&#39;ZhangFei&#39;, &#39;GuanYu&#39;, &#39;ZhaoYun&#39;, &#39;HuangZhong&#39;, &#39;DianWei&#39;], columns=[&#39;English&#39;, &#39;Math&#39;, &#39;Chinese&#39;])</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>在数据清洗过程中，一般都会遇到以下这几种情况，下面我来简单介绍一下。</strong></p><p><strong>1. 删除 DataFrame 中的不必要的列或行</strong></p><p>Pandas提供了一个便捷的方法 drop() 函数来删除我们不想要的列或行。比如我们想把“语文”这列删掉。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>df2 = df2.drop(columns=[&#39;Chinese&#39;])</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>想把“张飞”这行删掉。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>df2 = df2.drop(index=[&#39;ZhangFei&#39;])</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>2. 重命名列名columns，让列表名更容易识别</strong></p><p>如果你想对DataFrame中的columns进行重命名，可以直接使用rename(columns=new_names, inplace=True) 函数，比如我把列名Chinese改成YuWen，English改成YingYu。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>df2.rename(columns={&#39;Chinese&#39;: &#39;YuWen&#39;, &#39;English&#39;: &#39;Yingyu&#39;}, inplace = True)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>3. 去重复的值</strong></p><p>数据采集可能存在重复的行，这时只要使用drop_duplicates()就会自动把重复的行去掉。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>df = df.drop_duplicates() #去除重复行</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>4. 格式问题</strong></p><p><strong>更改数据格式</strong></p><p>这是个比较常用的操作，因为很多时候数据格式不规范，我们可以使用astype函数来规范数据格式，比如我们把Chinese字段的值改成str类型，或者int64可以这么写：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>df2[&#39;Chinese&#39;].astype(&#39;str&#39;) </span></span>
<span class="line"><span>df2[&#39;Chinese&#39;].astype(np.int64)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>数据间的空格</strong></p><p>有时候我们先把格式转成了str类型，是为了方便对数据进行操作，这时想要删除数据间的空格，我们就可以使用strip函数：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>#删除左右两边空格</span></span>
<span class="line"><span>df2[&#39;Chinese&#39;]=df2[&#39;Chinese&#39;].map(str.strip)</span></span>
<span class="line"><span>#删除左边空格</span></span>
<span class="line"><span>df2[&#39;Chinese&#39;]=df2[&#39;Chinese&#39;].map(str.lstrip)</span></span>
<span class="line"><span>#删除右边空格</span></span>
<span class="line"><span>df2[&#39;Chinese&#39;]=df2[&#39;Chinese&#39;].map(str.rstrip)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果数据里有某个特殊的符号，我们想要删除怎么办？同样可以使用strip函数，比如Chinese字段里有美元符号，我们想把这个删掉，可以这么写：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>df2[&#39;Chinese&#39;]=df2[&#39;Chinese&#39;].str.strip(&#39;$&#39;)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>大小写转换</strong></p><p>大小写是个比较常见的操作，比如人名、城市名等的统一都可能用到大小写的转换，在Python里直接使用upper(), lower(), title()函数，方法如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>#全部大写</span></span>
<span class="line"><span>df2.columns = df2.columns.str.upper()</span></span>
<span class="line"><span>#全部小写</span></span>
<span class="line"><span>df2.columns = df2.columns.str.lower()</span></span>
<span class="line"><span>#首字母大写</span></span>
<span class="line"><span>df2.columns = df2.columns.str.title()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>查找空值</strong></p><p>数据量大的情况下，有些字段存在空值NaN的可能，这时就需要使用Pandas中的isnull函数进行查找。比如，我们输入一个数据表如下：</p><p><img src="https://static001.geekbang.org/resource/image/34/ab/3440abb73e91e9f7a41dc2fbfeea44ab.png" alt=""><br><br> 如果我们想看下哪个地方存在空值NaN，可以针对数据表df进行df.isnull()，结果如下：</p><img src="https://static001.geekbang.org/resource/image/5b/fe/5b52bca4eb6f00d51f72dcc5c6ce2afe.png" alt=""><p>如果我想知道哪列存在空值，可以使用df.isnull().any()，结果如下：</p><img src="https://static001.geekbang.org/resource/image/89/03/89cb71afc4f54a11ce1d4d05cd46bb03.png" alt=""><h2 id="使用apply函数对数据进行清洗" tabindex="-1"><a class="header-anchor" href="#使用apply函数对数据进行清洗"><span>使用apply函数对数据进行清洗</span></a></h2><p>apply函数是Pandas中<strong>自由度非常高的函数</strong>，使用频率也非常高。</p><p>比如我们想对name列的数值都进行大写转化可以用：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>df[&#39;name&#39;] = df[&#39;name&#39;].apply(str.upper)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>我们也可以定义个函数，在apply中进行使用。比如定义double_df函数是将原来的数值<em>2进行返回。然后对df1中的“语文”列的数值进行</em>2处理，可以写成：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>def double_df(x):</span></span>
<span class="line"><span>           return 2*x</span></span>
<span class="line"><span>df1[u&#39;语文&#39;] = df1[u&#39;语文&#39;].apply(double_df)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们也可以定义更复杂的函数，比如对于DataFrame，我们新增两列，其中’new1’列是“语文”和“英语”成绩之和的m倍，&#39;new2’列是“语文”和“英语”成绩之和的n倍，我们可以这样写：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>def plus(df,n,m):</span></span>
<span class="line"><span>    df[&#39;new1&#39;] = (df[u&#39;语文&#39;]+df[u&#39;英语&#39;]) * m</span></span>
<span class="line"><span>    df[&#39;new2&#39;] = (df[u&#39;语文&#39;]+df[u&#39;英语&#39;]) * n</span></span>
<span class="line"><span>    return df</span></span>
<span class="line"><span>df1 = df1.apply(plus,axis=1,args=(2,3,))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中axis=1代表按照列为轴进行操作，axis=0代表按照行为轴进行操作，args是传递的两个参数，即n=2, m=3，在plus函数中使用到了n和m，从而生成新的df。</p><h2 id="数据统计" tabindex="-1"><a class="header-anchor" href="#数据统计"><span>数据统计</span></a></h2><p>在数据清洗后，我们就要对数据进行统计了。</p><p>Pandas和NumPy一样，都有常用的统计函数，如果遇到空值NaN，会自动排除。</p><p>常用的统计函数包括：</p><img src="https://static001.geekbang.org/resource/image/34/00/343ba98c1322dc0c013e07c87b157a00.jpg" alt=""><p>表格中有一个describe()函数，统计函数千千万，describe()函数最简便。它是个统计大礼包，可以快速让我们对数据有个全面的了解。下面我直接使用df1.descirbe()输出结果为：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>df1 = DataFrame({&#39;name&#39;:[&#39;ZhangFei&#39;, &#39;GuanYu&#39;, &#39;a&#39;, &#39;b&#39;, &#39;c&#39;], &#39;data1&#39;:range(5)})</span></span>
<span class="line"><span>print df1.describe()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><img src="https://static001.geekbang.org/resource/image/e4/83/e4a7a208a11d60dbcda6f3dbaff9a583.png" alt=""><h2 id="数据表合并" tabindex="-1"><a class="header-anchor" href="#数据表合并"><span>数据表合并</span></a></h2><p>有时候我们需要将多个渠道源的多个数据表进行合并，一个DataFrame相当于一个数据库的数据表，那么多个DataFrame数据表的合并就相当于多个数据库的表合并。</p><p>比如我要创建两个DataFrame：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>df1 = DataFrame({&#39;name&#39;:[&#39;ZhangFei&#39;, &#39;GuanYu&#39;, &#39;a&#39;, &#39;b&#39;, &#39;c&#39;], &#39;data1&#39;:range(5)})</span></span>
<span class="line"><span>df2 = DataFrame({&#39;name&#39;:[&#39;ZhangFei&#39;, &#39;GuanYu&#39;, &#39;A&#39;, &#39;B&#39;, &#39;C&#39;], &#39;data2&#39;:range(5)})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>两个DataFrame数据表的合并使用的是merge()函数，有下面5种形式：</p><p><strong>1. 基于指定列进行连接</strong></p><p>比如我们可以基于name这列进行连接。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>df3 = pd.merge(df1, df2, on=&#39;name&#39;)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><img src="https://static001.geekbang.org/resource/image/22/2f/220ce1ea19c8f6f2668d3a8122989c2f.png" alt=""><p><strong>2. inner内连接</strong></p><p>inner内链接是merge合并的默认情况，inner内连接其实也就是键的交集，在这里df1, df2相同的键是name，所以是基于name字段做的连接：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>df3 = pd.merge(df1, df2, how=&#39;inner&#39;)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><img src="https://static001.geekbang.org/resource/image/22/2f/220ce1ea19c8f6f2668d3a8122989c2f.png" alt=""><p><strong>3. left左连接</strong></p><p>左连接是以第一个DataFrame为主进行的连接，第二个DataFrame作为补充。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>df3 = pd.merge(df1, df2, how=&#39;left&#39;)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><img src="https://static001.geekbang.org/resource/image/90/ac/9091a7406d5aa7a2980328d587fb42ac.png" alt=""><p><strong>4. right右连接</strong></p><p>右连接是以第二个DataFrame为主进行的连接，第一个DataFrame作为补充。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>df3 = pd.merge(df1, df2, how=&#39;right&#39;)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><img src="https://static001.geekbang.org/resource/image/10/af/10f9f22f66f3745381d85d760f857baf.png" alt=""><p><strong>5. outer外连接</strong></p><p>外连接相当于求两个DataFrame的并集。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>df3 = pd.merge(df1, df2, how=&#39;outer&#39;)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><img src="https://static001.geekbang.org/resource/image/67/8c/6737f6d4d66af0d75734cd140b5d198c.png" alt=""><h2 id="如何用sql方式打开pandas" tabindex="-1"><a class="header-anchor" href="#如何用sql方式打开pandas"><span>如何用SQL方式打开Pandas</span></a></h2><p>Pandas的DataFrame数据类型可以让我们像处理数据表一样进行操作，比如数据表的增删改查，都可以用Pandas工具来完成。不过也会有很多人记不住这些Pandas的命令，相比之下还是用SQL语句更熟练，用SQL对数据表进行操作是最方便的，它的语句描述形式更接近我们的自然语言。</p><p>事实上，在Python里可以直接使用SQL语句来操作Pandas。</p><p>这里给你介绍个工具：pandasql。</p><p>pandasql 中的主要函数是 sqldf，它接收两个参数：一个SQL 查询语句，还有一组环境变量globals()或locals()。这样我们就可以在Python里，直接用SQL语句中对DataFrame进行操作，举个例子：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>import pandas as pd</span></span>
<span class="line"><span>from pandas import DataFrame</span></span>
<span class="line"><span>from pandasql import sqldf, load_meat, load_births</span></span>
<span class="line"><span>df1 = DataFrame({&#39;name&#39;:[&#39;ZhangFei&#39;, &#39;GuanYu&#39;, &#39;a&#39;, &#39;b&#39;, &#39;c&#39;], &#39;data1&#39;:range(5)})</span></span>
<span class="line"><span>pysqldf = lambda sql: sqldf(sql, globals())</span></span>
<span class="line"><span>sql = &amp;quot;select * from df1 where name =&#39;ZhangFei&#39;&amp;quot;</span></span>
<span class="line"><span>print pysqldf(sql)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>   data1      name</span></span>
<span class="line"><span>0      0  ZhangFei</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>上面这个例子中，我们是对“name=&#39;ZhangFei”“的行进行了输出。当然你会看到我们用到了lambda，lambda在python中算是使用频率很高的，那lambda是用来做什么的呢？它实际上是用来定义一个匿名函数的，具体的使用形式为：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span> lambda argument_list: expression</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这里argument_list是参数列表，expression是关于参数的表达式，会根据expression表达式计算结果进行输出返回。</p><p>在上面的代码中，我们定义了：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>pysqldf = lambda sql: sqldf(sql, globals())</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在这个例子里，输入的参数是sql，返回的结果是sqldf对sql的运行结果，当然sqldf中也输入了globals全局参数，因为在sql中有对全局参数df1的使用。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>和NumPy一样，Pandas有两个非常重要的数据结构：Series和DataFrame。使用Pandas可以直接从csv或xlsx等文件中导入数据，以及最终输出到excel表中。</p><p>我重点介绍了数据清洗中的操作，当然Pandas中同样提供了多种数据统计的函数。</p><p>最后我们介绍了如何将数据表进行合并，以及在Pandas中使用SQL对数据表更方便地进行操作。</p><p>Pandas包与NumPy工具库配合使用可以发挥巨大的威力，正是有了Pandas工具，Python做数据挖掘才具有优势。</p><img src="https://static001.geekbang.org/resource/image/74/cd/74884960677548b08acdc919c13460cd.jpg" alt=""><p>我们来回顾一下今天的内容，在Pandas中，最主要的数据结构是什么？它都提供了哪些函数，可以帮我们做数据清洗？你可以自己描述一下吗？</p><h2 id="练习题" tabindex="-1"><a class="header-anchor" href="#练习题"><span>练习题</span></a></h2><p>对于下表的数据，请使用Pandas中的DataFrame进行创建，并对数据进行清洗。同时新增一列“总和”计算每个人的三科成绩之和。</p><p><img src="https://static001.geekbang.org/resource/image/25/80/25b34b3f6227a945500074e05ea49e80.png" alt=""><br><br> 欢迎在评论区与我分享你的答案。</p><p>如果你觉着这篇文章有价值，欢迎点击“请朋友读”，把这篇文章分享给你的朋友或者同事。</p>`,128)]))}const h=a(d,[["render",l]]),c=JSON.parse('{"path":"/posts/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%9845%E8%AE%B2/%E7%AC%AC%E4%B8%80%E6%A8%A1%E5%9D%97%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%9F%BA%E7%A1%80%E7%AF%87/05%E4%B8%A8Python%E7%A7%91%E5%AD%A6%E8%AE%A1%E7%AE%97%EF%BC%9APandas.html","title":"05丨Python科学计算：Pandas","lang":"zh-CN","frontmatter":{"description":"05丨Python科学计算：Pandas 上一章中，我们讲了Python的一个重要的第三方库NumPy，今天我来给你介绍Python的另一个工具Pandas。 在数据分析工作中，Pandas的使用频率是很高的，一方面是因为Pandas提供的基础数据结构DataFrame与json的契合度很高，转换起来就很方便。另一方面，如果我们日常的数据清理工作不是很...","head":[["meta",{"property":"og:url","content":"https://houbb.github.io/interview/posts/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%9845%E8%AE%B2/%E7%AC%AC%E4%B8%80%E6%A8%A1%E5%9D%97%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%9F%BA%E7%A1%80%E7%AF%87/05%E4%B8%A8Python%E7%A7%91%E5%AD%A6%E8%AE%A1%E7%AE%97%EF%BC%9APandas.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"05丨Python科学计算：Pandas"}],["meta",{"property":"og:description","content":"05丨Python科学计算：Pandas 上一章中，我们讲了Python的一个重要的第三方库NumPy，今天我来给你介绍Python的另一个工具Pandas。 在数据分析工作中，Pandas的使用频率是很高的，一方面是因为Pandas提供的基础数据结构DataFrame与json的契合度很高，转换起来就很方便。另一方面，如果我们日常的数据清理工作不是很..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-16T11:19:38.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-16T11:19:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"05丨Python科学计算：Pandas\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-08-16T11:19:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"]]},"git":{"createdTime":1755343178000,"updatedTime":1755343178000,"contributors":[{"name":"bbhou","username":"bbhou","email":"1557740299@qq.com","commits":1,"url":"https://github.com/bbhou"}]},"readingTime":{"minutes":10.62,"words":3185},"filePathRelative":"posts/数据分析实战45讲/第一模块：数据分析基础篇/05丨Python科学计算：Pandas.md","localizedDate":"2025年8月16日","excerpt":"\\n<p><audio id=\\"audio\\" title=\\"05丨Python科学计算：Pandas\\" controls=\\"\\" preload=\\"none\\"><source id=\\"mp3\\" src=\\"https://static001.geekbang.org/resource/audio/a5/7b/a57cce18f0bf45f73b440a355ea9a37b.mp3\\"></audio></p>\\n<p>上一章中，我们讲了Python的一个重要的第三方库NumPy，今天我来给你介绍Python的另一个工具Pandas。</p>\\n<p>在数据分析工作中，Pandas的使用频率是很高的，一方面是因为Pandas提供的基础数据结构DataFrame与json的契合度很高，转换起来就很方便。另一方面，如果我们日常的数据清理工作不是很复杂的话，你通常用几句Pandas代码就可以对数据进行规整。</p>","autoDesc":true}');export{h as comp,c as data};
